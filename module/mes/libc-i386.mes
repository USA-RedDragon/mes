;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc-i386.mes defines C library routines

;;; Code:

(define (push-arg o)
  `(#x68 ,@(int->bv32 o)))              ; push o

(define (i386:ret)
  '(
    #xc3                                ; ret
    ))

(define (i386:call address . arguments)
  (let ((pushes (append-map push-arg arguments)))
   `(
     ,@pushes                                         ; push args
     #xe8 ,@(int->bv32 (- address 5 (length pushes))) ; call relative
     )))
  
(define (i386:eputs s t d)
  `(
    #x5f                                ; pop    %edi
    #xba #x01 #x00 #x00 #x00    	; mov    0xa,%edx
    #x59                                ; pop    %ecx
    #x57                                ; push   %edi
    #xbb #x02 #x00 #x00 #x00            ; mov    $0x1,%ebx
    #xb8 #x04 #x00 #x00 #x00            ; mov    $0x4,%eax
    #xcd #x80                           ; int    $0x80
    #xc3                                ; ret
    ))

(define (i386:exit s t d)
  `(
    #x5f                                ; pop    %edi
    #xb8 #x01 #x00 #x00 #x00            ; mov    $0x1,%eax
    #xcd #x80                           ; int    $0x80
    ))

(define (i386:puts s t d)
  `(
    #x5f                                ; pop    %edi
    #xba #x0a #x00 #x00 #x00    	; mov    0xa,%edx
    #x59                                ; pop    %ecx
    #x57                                ; push   %edi
    #xbb #x01 #x00 #x00 #x00            ; mov    $0x1,%ebx
    #xb8 #x04 #x00 #x00 #x00            ; mov    $0x4,%eax
    #xcd #x80                           ; int    $0x80
    #xc3                                ; ret
    ))
