#! /bin/sh
# -*-scheme-*-
if [ -n "$BUILD_DEBUG" ]; then
    set -x
fi
PREFIX=${PREFIX-@PREFIX@}
if [ "@PREFIX@" = @PREFIX""@ -o ! -d "$PREFIX/share/mes/module" ]
then
    MES_PREFIX=${MES_PREFIX-$(cd $(dirname $0)/.. && pwd)}
else
    MES_PREFIX=${MES_PREFIX-$PREFIX/share/mes}
fi
export MES_PREFIX
mes_p=$(command -v mes)
if [ '(' -z "$mes_p" -a -z "$MES" ')' -o "$MES" = "guile" -o "$MES" = "mes.guile" ]; then
    GODIR=${GODIR-@GODIR@}
    GUILEDIR=${GUILEDIR-@GUILEDIR@}
    [ "$GODIR" = @"GODIR"@ ] && GODIR=$(dirname $0)/../guile
    [ "$GUILEDIR" = @"GUILEDIR"@ ] && GUILEDIR=$(dirname $0)/../guile
    export GUILE_AUTO_COMPILE=${GUILE_AUTO_COMPILE-0}
    GUILE_LOAD_COMPILED_PATH=$GODIR:$GUILE_LOAD_COMPILED_PATH
    exec ${GUILE-guile} -L $GUILEDIR -e '(mescc)' -s "$0" "$@"
else
    MES=${MES-$(dirname $0)/mes}
    exec ${MES-mes} -e '(mescc)' -s $0 "$@"
fi
!#

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

(define-module (mescc)
  #:use-module (ice-9 getopt-long)
  #:use-module (mes misc)
  #:use-module (mescc mescc)
  #:export (main))

(define %prefix (or (getenv "MES_PREFIX")
                    (if (string-prefix? "@PREFIX" "@PREFIX@")
                        ""
                        "@PREFIX@/share/mes")))

(define %version (if (string-prefix? "@VERSION" "@VERSION@") "git"
                     "@VERSION@"))

(cond-expand
 (mes
  (define (set-port-encoding! port encoding) #t)
  (mes-use-module (mes guile))
  (mes-use-module (mes misc))
  (mes-use-module (mes getopt-long))
  (mes-use-module (mes display))
  (mes-use-module (mescc mescc)))
 (guile
  (define-macro (mes-use-module . rest) #t)))

(format (current-error-port) "mescc[~a]...\n" %scheme)

(define (parse-opts args)
  (let* ((option-spec
          '((assemble (single-char #\c))
            (compile (single-char #\S))
            (define (single-char #\D) (value #t))
            (debug-info (single-char #\g))
            (help (single-char #\h))
            (include (single-char #\I) (value #t))
            (library-dir (single-char #\L) (value #t))
            (library (single-char #\l) (value #t))
            (preprocess (single-char #\E))
            (output (single-char #\o) (value #t))
            (version (single-char #\V))
            (verbose (single-char #\v))
            (write (single-char #\w) (value #t))))
         (options (getopt-long args option-spec))
         (help? (option-ref options 'help #f))
         (files (option-ref options '() '()))
         (usage? (and (not help?) (null? files)))
         (version? (option-ref options 'version #f)))
    (or
     (and version?
          (format (current-output-port) "mescc (mes) ~a\n" %version))
     (and (or help? usage?)
          (format (or (and usage? (current-error-port)) (current-output-port)) "\
Usage: mescc [OPTION]... FILE...
  -c                 preprocess, compile and assemble only; do not link
  -D DEFINE[=VALUE]  define DEFINE [VALUE=1]
  -E                 preprocess only; do not compile, assemble or link
  -g                 add debug info [GDB, objdump] TODO: hex2 footer
  -h, --help         display this help and exit
  -I DIR             append DIR to include path
  -L DIR             append DIR to library path
  -l LIBNAME         link with LIBNAME
  -o FILE            write output to FILE
  -S                 preprocess and compile only; do not assemble or link
  -v, --version      display version and exit
  -w,--write=TYPE    dump Nyacc AST using TYPE {pretty-print,write}

Environment variables:

  MES=BINARY         run on mes-executable BINARY {mes,guile}
  MES_DEBUG=LEVEL    show debug output with verbosity LEVEL {0..5}
  NYACC_TRACE=1      show Nyacc progress
")
          (exit (or (and usage? 2) 0)))
     options)))

(define (main args)
  (let* ((options (parse-opts args))
         (options (acons 'prefix %prefix options))
         (preprocess? (option-ref options 'preprocess #f))
         (compile? (option-ref options 'compile #f))
         (assemble? (option-ref options 'assemble #f))
         (verbose? (option-ref options 'verbose (getenv "MES_DEBUG"))))
    (when verbose?
      (setenv "NYACC_TRACE" "yes")
      (format (current-error-port) "options=~s\n" options))
    (cond (preprocess? (mescc:preprocess options))
          (compile? (mescc:compile options))
          (assemble? (mescc:assemble options))
          (else (mescc:link options)))))
'done
