;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc.mes provides a minimal portable C library for mescc.

;;; Code:

(cond-expand
 (guile-2)
 (guile)
 (mes
  (mes-use-module (nyacc lang c99 parser))
  (mes-use-module (mes libc-i386))))

(define (_start)
  (let ((argc-argv (i386:_start)))
    (format (current-error-port) "parsing: _start\n")
    (with-input-from-string
        (string-append "
char **g_environment;
char **
_env (char **e)
{
  return e;
}

int
_start ()
{
  asm(\"" argc-argv "\");
  g_environment = _env ();
  asm (\".byte 0x58\");
  int r = main ();
  exit (r);
}
") parse-c99)))

(define (strlen)
  (format (current-error-port) "parsing: strlen\n")
  (with-input-from-string
      "
int
strlen (char const* s)
{
  int i = 0;
  while (s[i]) i++;
  return i;
}
"  parse-c99))

(define (getchar)
  (format (current-error-port) "parsing: getchar\n")
  (with-input-from-string
      "
int g_stdin = 0;
int ungetc_char = -1;
char ungetc_buf[2];
int
getchar ()
{
  char c;
  int i;
  if (ungetc_char == -1)
    {
      int r = read (g_stdin, &c, 1);
      if (r < 1) return -1;
      i = c;
   }
  else
    {
       //FIXME
       //i = ungetc_buf[ungetc_char--];
       i = ungetc_buf[ungetc_char];
       //ungetc_char--;
       ungetc_char = ungetc_char - 1;
     }
  if (i < 0) i += 256;

  return i;
}
" parse-c99))

(define (assert_fail)
  (format (current-error-port) "parsing: assert_fail\n")
  (with-input-from-string
               "
void
assert_fail (char* s)
{
  eputs (\"assert fail: \");
  eputs (s);
  eputs (\"\n\");
  //*((int*)0) = 0;
  char *fail = s;
  fail = 0;
  *fail = 0;
}
" parse-c99))

(define (ungetc)
  (format (current-error-port) "parsing: ungetc\n")
  (with-input-from-string
                "
//#define assert(x) ((x) ? (void)0 : assert_fail (#x))
int
ungetc (int c, int fd)
{
  //FIXME
  //assert (ungetc_char < 2);
  //assert (ungetc_char == -1 || ungetc_char < 2);
  //FIXME
  //ungetc_buf[++ungetc_char] = c;
  ungetc_char++;
  ungetc_buf[ungetc_char] = c;
  return c;
 }
" parse-c99))

(define (putchar)
  (format (current-error-port) "parsing: putchar\n")
  (with-input-from-string
               "
int
putchar (int c)
{
  write (1, (char*)&c, 1);
  return 0;
}
" parse-c99))

(define (fputc)
  (format (current-error-port) "parsing: fputc\n")
  (with-input-from-string
               "
int
fputc (int c, int fd)
{
  write (fd, (char*)&c, 1);
  return 0;
}
" parse-c99))

(define (eputs)
  (format (current-error-port) "parsing: eputs\n")
  (with-input-from-string
               "
int
eputs (char const* s)
{
  int i = strlen (s);
  write (2, s, i);
  return 0;
}
" parse-c99))


(define (fputs)
  (format (current-error-port) "parsing: fputs\n")
  (with-input-from-string
               "
int
fputs (char const* s, int fd)
{
  int i = strlen (s);
  write (fd, s, i);
  return 0;
}
" parse-c99))

(define (puts)
  (format (current-error-port) "parsing: puts\n")
  (with-input-from-string
               "
int
puts (char const* s)
{
  int i = strlen (s);
  write (1, s, i);
  return 0;
}
" parse-c99))

(define (strcmp)
  (format (current-error-port) "parsing: strcmp\n")
  (with-input-from-string
               "
int
strcmp (char const* a, char const* b)
{
  while (*a && *b && *a == *b)
    {
      a++;b++;
    }
  return *a - *b;
}
" parse-c99))

(define (strcpy)
  (format (current-error-port) "parsing: strcpy\n")
  (with-input-from-string
               "
char *
strcpy (char *dest, char const *src)
{
  char *p = dest;
  while (*src) *p++ = *src++;
  *p = 0;
  return dest;
}
" parse-c99))

(define (itoa)
  (format (current-error-port) "parsing: itoa\n")
  (with-input-from-string
               "
char itoa_buf[10];

char const*
itoa (int x)
{
  //static char itoa_buf[10];
  //char *p = buf+9;
  char *p = itoa_buf;
  p += 9;
  *p-- = 0;

  //int sign = x < 0; // FIXME
  int sign = 0;
  if (x < 0) sign = 1;
  if (sign)
    x = -x;

  do
     {
       *p-- = '0' + (x % 10);
       x = x / 10;
     } while (x);

  if (sign && *(p + 1) != '0')
    *p-- = '-';

  return p+1;
}
" parse-c99))

(define (isdigit)
  (format (current-error-port) "parsing: isdigit\n")
  (with-input-from-string
               "
int
isdigit (char c)
{
  //return (c>='0') && (c<='9');
  if (c>='0' && c<='9') return 1;
  return 0;
}
" parse-c99))

(define (atoi)
  (format (current-error-port) "parsing: atoi\n")
  (with-input-from-string
               "
int
atoi (char const *s)
{
  int i = 0;
  int sign = 1;
  if (*s && *s == '-')
    {
      sign = -1;
      s++;
    }
  while (isdigit (*s))
    {
      i *= 10;
      i += (*s - '0');
      s++;
    }
  return i * sign;
}
" parse-c99))

(define (malloc)
  (format (current-error-port) "parsing: malloc\n")
  (with-input-from-string
               "
//void *g_malloc_base = 0;
char *g_malloc_base = 0;

//void *
int *
malloc (int size)
{
  //void *p = brk (0);
  char *p = 0;
  p = brk (0);
  if (!g_malloc_base) g_malloc_base = p;
  brk (p+size);
  return p;
}
" parse-c99))

(define (realloc)
  (format (current-error-port) "parsing: realloc\n")
  (with-input-from-string
               "
//void *
int *
//realloc (void *p, int size)
realloc (int *p, int size)
{
  brk (g_malloc_base + size);
  return g_malloc_base;
}
" parse-c99))

(define (strncmp)
  (format (current-error-port) "parsing: strncmp\n")
  (with-input-from-string
               "
int
strncmp (char const* a, char const* b, int length)
{
  while (*a && *b && *a == *b && --length) {a++;b++;}
  return *a - *b;
}
" parse-c99))

(define (c:getenv)
  (format (current-error-port) "parsing: getenv\n")
  (with-input-from-string
                  "
char **g_environment;
char const*
getenv (char const* s)
{
  char **p = g_environment;
  p = *g_environment;
  int length = strlen (s);
  while (*p)
    {
      if (!strncmp (s, *p, length) && *(*p + length) == '=') return (*p + length + 1);
      p++;
    }
  return 0;
}
" parse-c99))

(define (printf)
  (format (current-error-port) "parsing: printf\n")
  (let ((va-arg (i386:va-arg)))
      (with-input-from-string
               (string-append "
int
printf (char const* format, int va_args)
{
  int va_arg = 0;
  int va;
  char *p = format;
  while (*p)
    if (*p != '%')
      putchar (*p++);
    else
      {
        p++;
        char c = *p;
        switch (c)
          {
            case '%': {putchar (*p); break;}
            case 'c': {asm (\"" va-arg "\"); putchar ((char)va); va_arg++; break;}
            case 'd': {asm (\"" va-arg "\"); puts (itoa (va)); va_arg++; break;}
            case 's': {asm (\"" va-arg "\"); puts ((char*)va); va_arg++; break;}
            default: putchar (*p);
          }
        p++;
      }
  return 0;
}
") parse-c99)))

(define libc
  (list
   strlen
   getchar
   assert_fail
   ungetc
   putchar
   fputc
   eputs
   fputs
   puts
   strcmp
   strcpy
   itoa
   isdigit
   atoi
   malloc
   realloc
   strncmp
   c:getenv
   printf
   ))
