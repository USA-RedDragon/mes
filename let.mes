;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; let.mes: This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

(define-macro (simple-let bindings . rest)
  `(,`(lambda ,(map car bindings) ,@rest)
    ,@(map cadr bindings)))

(define-macro (named-let label bindings . rest)
  `(simple-let ((,label *unspecified*))
     (set! ,label (lambda ,(map car bindings) ,@rest))
     (,label ,@(map cadr bindings))))

(define-macro (let bindings-or-label . rest)
  `(`,(if ,(symbol? bindings-or-label)
          (list 'lambda '() (cons* 'named-let ,bindings-or-label ,(car rest) ,(cdr rest)))
            (list 'lambda '() (cons* 'simple-let ,bindings-or-label ,rest)))))

(define-macro (xsimple-let bindings rest)
  `(,`(lambda ,(map car bindings) ,@rest)
    ,@(map cadr bindings)))

(define-macro (xnamed-let label bindings rest)
  `(simple-let ((,label *unspecified*))
     (set! ,label (lambda ,(map car bindings) ,@rest))
     (,label ,@(map cadr bindings))))

;; IF
(define-macro (let bindings-or-label . rest)
  `(if ,(symbol? bindings-or-label) ;; IF
       (xnamed-let ,bindings-or-label ,(car rest) ,(cdr rest))
       (xsimple-let ,bindings-or-label ,rest)))

(define (expand-let* bindings body)
  (if (null? bindings)
      `((lambda () ,@body))
      `((lambda (,(caar bindings))
          ,(expand-let* (cdr bindings) body))
        ,@(cdar bindings))))

(define-macro (let* bindings . body)
  (expand-let* bindings body))

(define (unspecified-bindings bindings params)
  (if (null? bindings) params
      (unspecified-bindings
       (cdr bindings)
       (append params (cons (cons (caar bindings) '(*unspecified*)) '())))))

(define (letrec-setters bindings setters)
  (if (null? bindings) setters
      (letrec-setters (cdr bindings)
                      (append setters
                              (cons (cons 'set! (car bindings)) '())))))

(define-macro (letrec bindings . body)
  `(let ,(unspecified-bindings bindings '())
     ,@(letrec-setters bindings '())
     ,@body))

