

:alloc
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_free + n < ARENA_SIZE? ...: ...
	mov____0x32,%eax &g_free
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	push___%eax
	mov____0x32,%eax &ARENA_SIZE
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %alloc_1_else
	jmp32  %alloc_1_break
:alloc_1_else
	push___$i32 &string_isxdigit_130
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:alloc_1_break
					# SCM x = g_free; 
	mov____0x32,%eax &g_free
	mov____%eax,0x8(%ebp) !0x-4
					# g_free += n
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x32,%eax &g_free
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x32 &g_free
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:tmp_num_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[tmp_num].cdr = x
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &tmp_num
	leave
	ret


:tmp_num2_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[tmp_num2].cdr = x
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x32,%eax &tmp_num2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &tmp_num2
	leave
	ret


:make_cell_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM x = alloc(1); 
	mov____$i32,%eax %0x1
	push___%eax
	call32 %alloc
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells[type].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %make_cell__6_else
	jmp32  %make_cell__6_break
:make_cell__6_else
	push___$i32 &string_isxdigit_131
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:make_cell__6_break
					# g_cells[x].type = g_cells[type].cdr
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# if (g_cells[type].cdr == TCHAR || g_cells[type].cdr == TNUMBER) ...else ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %make_cell__40_else_b_41
	jmp32  %make_cell__40_else_skip_b_41
:make_cell__40_else_b_41
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %make_cell__40_else
:make_cell__40_else_skip_b_41
					# if (car) ...
	mov____0x8(%ebp),%eax !0xc
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %make_cell__66_break
					# g_cells[x].car = g_cells[car].car
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	jmp32  %make_cell__66_break
:make_cell__66_break
					# if (cdr) ...
	mov____0x8(%ebp),%eax !0x10
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %make_cell__90_break
					# g_cells[x].cdr = g_cells[cdr].cdr
	mov____0x8(%ebp),%eax !0x10
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	jmp32  %make_cell__90_break
:make_cell__90_break
	jmp32  %make_cell__40_break
:make_cell__40_else
					# if (g_cells[type].cdr == TFUNCTION) ...else ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %make_cell__116_else
					# if (car) ...
	mov____0x8(%ebp),%eax !0xc
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %make_cell__128_break
					# g_cells[x].car = car
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	jmp32  %make_cell__128_break
:make_cell__128_break
					# if (cdr) ...
	mov____0x8(%ebp),%eax !0x10
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %make_cell__148_break
					# g_cells[x].cdr = g_cells[cdr].cdr
	mov____0x8(%ebp),%eax !0x10
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	jmp32  %make_cell__148_break
:make_cell__148_break
	jmp32  %make_cell__116_break
:make_cell__116_else
					# g_cells[x].car = car
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[x].cdr = cdr
	mov____0x8(%ebp),%eax !0x10
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
:make_cell__116_break
:make_cell__40_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:make_symbol_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[tmp_num].cdr = TSYMBOL
	mov____$i32,%eax %0xb
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# SCM x = make_cell_(tmp_num, s, 0); 
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &tmp_num
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
					# g_symbols = cons(x, g_symbols)
	mov____0x32,%eax &g_symbols
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_symbols
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:list_of_char_equal_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# while (a != 1 && b != 1 && g_cells[g_cells[a].car].cdr == g_cells[g_cells[b].     car].cdr) ...
	jmp32  %list_of_char_equal_p_1_continue
:list_of_char_equal_p_1_loop
					# g_cells[g_cells[a].car].type == TCHAR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_4_else
	jmp32  %list_of_char_equal_p_4_break
:list_of_char_equal_p_4_else
	push___$i32 &string_isxdigit_132
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:list_of_char_equal_p_4_break
					# g_cells[g_cells[b].car].type == TCHAR? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_26_else
	jmp32  %list_of_char_equal_p_26_break
:list_of_char_equal_p_26_else
	push___$i32 &string_isxdigit_133
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:list_of_char_equal_p_26_break
					# a = g_cells[a].cdr
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# b = g_cells[b].cdr
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0xc
	test___%eax,%eax
:list_of_char_equal_p_1_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_1_break
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_1_break
	jmp32  %list_of_char_equal_p_1_loop
:list_of_char_equal_p_1_break
					# a == 1 && b == 1? ...: ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_104_else
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %list_of_char_equal_p_104_else
	mov____$i32,%eax %0x3
	test___%eax,%eax
	jmp32  %list_of_char_equal_p_104_break
:list_of_char_equal_p_104_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:list_of_char_equal_p_104_break
	leave
	ret


:lookup_symbol_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM x = g_symbols; 
	mov____0x32,%eax &g_symbols
	mov____%eax,0x8(%ebp) !0x-4
					# while (x) ...
	jmp32  %lookup_symbol__4_continue
:lookup_symbol__4_loop
					# if (list_of_char_equal_p(g_cells[g_cells[x].car].car, s) == 3) ...
	push___0x8(%ebp) !0x8
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %list_of_char_equal_p
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lookup_symbol__7_break
	jmp32  %lookup_symbol__4_break
	jmp32  %lookup_symbol__7_break
:lookup_symbol__7_break
					# x = g_cells[x].cdr
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
:lookup_symbol__4_continue
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %lookup_symbol__4_break
	jmp32  %lookup_symbol__4_loop
:lookup_symbol__4_break
					# if (x) ...
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %lookup_symbol__45_break
					# x = g_cells[x].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %lookup_symbol__45_break
:lookup_symbol__45_break
					# if (!x) ...
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %lookup_symbol__61_break
					# x = make_symbol_(s)
	push___0x8(%ebp) !0x8
	call32 %make_symbol_
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %lookup_symbol__61_break
:lookup_symbol__61_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:type_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:car_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type != TCONTINUATION && ((((g_cells[g_cells[x].car].type == TPAIR      || g_cells[g_cells[x].car].type == TREF) || g_cells[g_cells[x].car].type      == TSPECIAL) || g_cells[g_cells[x].car].type == TSYMBOL) || g_cells[     g_cells[x].car].type == TSTRING)? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %car__1_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %car__1_else_b_13_b_13_b_13_b_13
	jmp32  %car__1_else_b_13_b_13_b_13_skip_b_13
:car__1_else_b_13_b_13_b_13_b_13
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %car__1_else_b_13_b_13_b_13
:car__1_else_b_13_b_13_b_13_skip_b_13
	jmp32  %car__1_else_b_13_b_13_skip_b_13
:car__1_else_b_13_b_13_b_13
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %car__1_else_b_13_b_13
:car__1_else_b_13_b_13_skip_b_13
	jmp32  %car__1_else_b_13_skip_b_13
:car__1_else_b_13_b_13
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %car__1_else_b_13
:car__1_else_b_13_skip_b_13
	jmp32  %car__1_else_skip_b_13
:car__1_else_b_13
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %car__1_else
:car__1_else_skip_b_13
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	test___%eax,%eax
	jmp32  %car__1_break
:car__1_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	test___%eax,%eax
:car__1_break
	leave
	ret


:cdr_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# (((g_cells[g_cells[x].cdr].type == TPAIR || g_cells[g_cells[x].cdr].type ==      TREF) || g_cells[g_cells[x].car].type == TSPECIAL) || g_cells[g_cells[x].     cdr].type == TSYMBOL) || g_cells[g_cells[x].cdr].type == TSTRING? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %cdr__1_else_b_2_b_2_b_2_b_2
	jmp32  %cdr__1_else_b_2_b_2_b_2_skip_b_2
:cdr__1_else_b_2_b_2_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %cdr__1_else_b_2_b_2_b_2
:cdr__1_else_b_2_b_2_b_2_skip_b_2
	jmp32  %cdr__1_else_b_2_b_2_skip_b_2
:cdr__1_else_b_2_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %cdr__1_else_b_2_b_2
:cdr__1_else_b_2_b_2_skip_b_2
	jmp32  %cdr__1_else_b_2_skip_b_2
:cdr__1_else_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %cdr__1_else_b_2
:cdr__1_else_b_2_skip_b_2
	jmp32  %cdr__1_else_skip_b_2
:cdr__1_else_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %cdr__1_else
:cdr__1_else_skip_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
	jmp32  %cdr__1_break
:cdr__1_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	test___%eax,%eax
:cdr__1_break
	leave
	ret


:arity_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TFUNCTION? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %arity__1_else
	jmp32  %arity__1_break
:arity__1_else
	push___$i32 &string_isxdigit_134
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:arity__1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:cons
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[tmp_num].cdr = TPAIR
	mov____$i32,%eax %0x7
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &tmp_num
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:car
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_cells[x].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %car_1_break
					# error(29, cons(x, 37)); 
	mov____$i32,%eax %0x25
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x1d
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %car_1_break
:car_1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	leave
	ret


:cdr
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_cells[x].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %cdr_1_break
					# error(29, cons(x, 38)); 
	mov____$i32,%eax %0x26
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x1d
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %cdr_1_break
:cdr_1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	leave
	ret


:list
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____0x8(%ebp),%eax !0x8
	leave
	ret


:null_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# x == 1? ...: ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %null_p_1_else
	mov____$i32,%eax %0x3
	test___%eax,%eax
	jmp32  %null_p_1_break
:null_p_1_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:null_p_1_break
	leave
	ret


:eq_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# ((x == y || (g_cells[x].type == TKEYWORD && g_cells[y].type == TKEYWORD &&      g_cells[x].car == g_cells[y].car)) || (g_cells[x].type == TCHAR && g_cells[     y].type == TCHAR && g_cells[x].cdr == g_cells[y].cdr)) || (g_cells[x].type      == TNUMBER && g_cells[y].type == TNUMBER && g_cells[x].cdr == g_cells[y].     cdr)? ...: ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2_b_2_b_2
	jmp32  %eq_p_1_else_b_2_b_2_skip_b_2
:eq_p_1_else_b_2_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2_b_2
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2_b_2
:eq_p_1_else_b_2_b_2_skip_b_2
	jmp32  %eq_p_1_else_b_2_skip_b_2
:eq_p_1_else_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else_b_2
:eq_p_1_else_b_2_skip_b_2
	jmp32  %eq_p_1_else_skip_b_2
:eq_p_1_else_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eq_p_1_else
:eq_p_1_else_skip_b_2
	mov____$i32,%eax %0x3
	test___%eax,%eax
	jmp32  %eq_p_1_break
:eq_p_1_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:eq_p_1_break
	leave
	ret


:values
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM v = cons(0, x); 
	push___0x8(%ebp) !0x8
	mov____$i32,%eax %0x0
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells[v].type = TVALUES
	mov____$i32,%eax %0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:acons
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret


:length
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %length_4_continue
:length_4_loop
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-4
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# if (g_cells[x].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %length_13_break
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %length_13_break
:length_13_break
					# x = g_cells[x].cdr
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:length_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %length_4_break
	jmp32  %length_4_loop
:length_4_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:error
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM throw; 
					# if ((throw = assq_ref_env(28, r0)) != 6) ...
					# throw = assq_ref_env(28, r0)
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x1c
	push___%eax
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %error_2_break
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	push___0x8(%ebp) !0xc
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %apply
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %error_2_break
:error_2_break
					# display_error_(key); 
	push___0x8(%ebp) !0x8
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(": "); 
	push___$i32 &string_isxdigit_135
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# display_error_(x); 
	push___0x8(%ebp) !0xc
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# exit(1); 
	mov____$i32,%eax %0x1
	push___%eax
	call32 %exit
	add____$i8,%esp !0x4
	test___%eax,%eax
	leave
	ret


:cstring_to_list
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM p = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
					# int i = strlen(s); 
	push___0x8(%ebp) !0x8
	call32 %strlen
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-8
					# while (i--) ...
	jmp32  %cstring_to_list_8_continue
:cstring_to_list_8_loop
					# p = cons(make_cell_(tmp_num_(TCHAR), 0, tmp_num2_(s[i])), p)
	push___0x8(%ebp) !0x-4
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	mov____0x8(%ebp),%edx !0x8
	add____%edx,%eax
	movzbl_(%eax),%eax
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
:cstring_to_list_8_continue
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-8
	add____$i8,(%eax) !0x-1
	pop____%eax
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %cstring_to_list_8_break
	jmp32  %cstring_to_list_8_loop
:cstring_to_list_8_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:assert_defined
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (e == 6) ...
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %assert_defined_1_break
	push___0x8(%ebp) !0x8
	mov____$i32,%eax %0x21
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %assert_defined_1_break
:assert_defined_1_break
	mov____0x8(%ebp),%eax !0xc
	leave
	ret


:check_formals
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int flen = g_cells[formals].type == TNUMBER? g_cells[formals].cdr: g_cells[     length(formals)].cdr; 
					# g_cells[formals].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_formals_2_else
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
	jmp32  %check_formals_2_break
:check_formals_2_else
	push___0x8(%ebp) !0xc
	call32 %length
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
:check_formals_2_break
	mov____%eax,0x8(%ebp) !0x-4
					# int alen = g_cells[length(args)].cdr; 
	push___0x8(%ebp) !0x10
	call32 %length
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
					# if (alen != flen && alen != -1 && flen != -1) ...
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %check_formals_39_break
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %check_formals_39_break
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %check_formals_39_break
					# char *s = "apply: wrong number of arguments; expected: "; 
	mov____$i32,%eax &string_isxdigit_137
	mov____%eax,0x8(%ebp) !0x-c
					# eputs(s); 
	push___0x8(%ebp) !0x-c
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(flen)); 
	push___0x8(%ebp) !0x-4
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(", got: "); 
	push___$i32 &string_isxdigit_138
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(alen)); 
	push___0x8(%ebp) !0x-8
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# display_error_(f); 
	push___0x8(%ebp) !0x8
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# SCM e = make_cell_(tmp_num_(TSTRING), cstring_to_list(s), 0); 
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x-c
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-10
	push___0x8(%ebp) !0x8
	push___0x8(%ebp) !0x-10
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x1f
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %check_formals_39_break
:check_formals_39_break
	mov____$i32,%eax %0x7
	leave
	ret


:check_apply
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *type = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
					# if (f == 2 || f == 3) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_4_break_b_5
	jmp32  %check_apply_4_break_skip_b_5
:check_apply_4_break_b_5
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_4_break
:check_apply_4_break_skip_b_5
					# type = "bool"
	mov____$i32,%eax &string_isxdigit_139
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_4_break
:check_apply_4_break
					# if (f == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_28_break
					# type = "nil"
	mov____$i32,%eax &string_isxdigit_140
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_28_break
:check_apply_28_break
					# if (f == 7) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_42_break
					# type = "*unspecified*"
	mov____$i32,%eax &string_isxdigit_6
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_42_break
:check_apply_42_break
					# if (f == 6) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_56_break
					# type = "*undefined*"
	mov____$i32,%eax &string_isxdigit_5
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_56_break
:check_apply_56_break
					# if (g_cells[f].type == TCHAR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_70_break
					# type = "char"
	mov____$i32,%eax &string_isxdigit_141
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_70_break
:check_apply_70_break
					# if (g_cells[f].type == TNUMBER) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_88_break
					# type = "number"
	mov____$i32,%eax &string_isxdigit_142
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_88_break
:check_apply_88_break
					# if (g_cells[f].type == TSTRING) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %check_apply_106_break
					# type = "string"
	mov____$i32,%eax &string_isxdigit_143
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %check_apply_106_break
:check_apply_106_break
					# if (type) ...
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %check_apply_124_break
					# char *s = "cannot apply: "; 
	mov____$i32,%eax &string_isxdigit_144
	mov____%eax,0x8(%ebp) !0x-8
					# eputs(s); 
	push___0x8(%ebp) !0x-8
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(type); 
	push___0x8(%ebp) !0x-4
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("["); 
	push___$i32 &string_isxdigit_145
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# display_error_(e); 
	push___0x8(%ebp) !0xc
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("]\n"); 
	push___$i32 &string_isxdigit_146
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# SCM e = make_cell_(tmp_num_(TSTRING), cstring_to_list(s), 0); 
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x-8
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-c
	push___0x8(%ebp) !0x8
	push___0x8(%ebp) !0x-c
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x20
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %check_apply_124_break
:check_apply_124_break
	mov____$i32,%eax %0x7
	leave
	ret


:gc_push_frame
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM frame = cons(r1, cons(r2, cons(r3, cons(r0, 1)))); 
	mov____$i32,%eax %0x1
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r3
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# g_stack = cons(frame, g_stack)
	mov____0x32,%eax &g_stack
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
	mov____0x32,%eax &g_stack
	leave
	ret


:append2
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (x == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %append2_1_break
	mov____0x8(%ebp),%eax !0xc
	leave
	ret
	jmp32  %append2_1_break
:append2_1_break
					# g_cells[x].type == TPAIR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %append2_13_else
	jmp32  %append2_13_break
:append2_13_else
	push___$i32 &string_isxdigit_147
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:append2_13_break
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	call32 %append2
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret


:pairlis
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (x == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %pairlis_1_break
	mov____0x8(%ebp),%eax !0x10
	leave
	ret
	jmp32  %pairlis_1_break
:pairlis_1_break
					# if (g_cells[x].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %pairlis_13_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %pairlis_13_break
:pairlis_13_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	call32 %pairlis
	add____$i8,%esp !0xc
	push___%eax
	push___0x8(%ebp) !0xc
	call32 %car
	add____$i8,%esp !0x4
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret


:call
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if ((g_functions[g_cells[fn].cdr].arity > 0 || g_functions[g_cells[fn].cdr].     arity == -1) && x != 1 && g_cells[g_cells[x].car].type == TVALUES) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %call_1_break_b_2
	jmp32  %call_1_break_skip_b_2
:call_1_break_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %call_1_break
:call_1_break_skip_b_2
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %call_1_break
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %call_1_break
					# x = cons(g_cells[g_cells[g_cells[x].car].cdr].car, g_cells[x].cdr)
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0xc
	test___%eax,%eax
	jmp32  %call_1_break
:call_1_break
					# if ((g_functions[g_cells[fn].cdr].arity > 1 || g_functions[g_cells[fn].cdr].     arity == -1) && x != 1 && g_cells[g_cells[x].cdr].type == TPAIR && g_cells[     g_cells[g_cells[x].cdr].car].type == TVALUES) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %call_87_break_b_88
	jmp32  %call_87_break_skip_b_88
:call_87_break_b_88
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %call_87_break
:call_87_break_skip_b_88
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %call_87_break
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %call_87_break
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %call_87_break
					# x = cons(g_cells[x].car, cons(g_cells[g_cells[g_cells[g_cells[x].cdr].car].cdr]     .car, g_cells[x].cdr))
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0xc
	test___%eax,%eax
	jmp32  %call_87_break
:call_87_break
					# switch (g_functions[g_cells[fn].cdr].arity) {   ...} 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
:call_204_clause0
	cmp____$i8,%eax !0x0
	je32   %call_204_body0
	jmp32  %call_204_clause1
:call_204_body0
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0x0
	leave
	ret
	jmp32  %call_204_body1
:call_204_clause1
	cmp____$i8,%eax !0x1
	je32   %call_204_body1
	jmp32  %call_204_clause2
:call_204_body1
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %call_204_body2
:call_204_clause2
	cmp____$i8,%eax !0x2
	je32   %call_204_body2
	jmp32  %call_204_clause3
:call_204_body2
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %call_204_body3
:call_204_clause3
	cmp____$i8,%eax !0x3
	je32   %call_204_body3
	jmp32  %call_204_clause4
:call_204_body3
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %call_204_body4
:call_204_clause4
	cmp____$i8,%eax !0x-1
	je32   %call_204_body4
	jmp32  %call_204_clause5
:call_204_body4
	push___0x8(%ebp) !0xc
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %call_204_body5
:call_204_clause5
:call_204_body5
	push___0x8(%ebp) !0xc
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	pop____%eax
	call___*%eax
	add____$i8,%esp !0x4
	leave
	ret
:call_204_break
	mov____$i32,%eax %0x7
	leave
	ret


:assq
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# while (a != 1 && eq_p(x, g_cells[g_cells[a].car].car) == 2) ...
	jmp32  %assq_1_continue
:assq_1_loop
					# a = g_cells[a].cdr
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0xc
	test___%eax,%eax
:assq_1_continue
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %assq_1_break
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %eq_p
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %assq_1_break
	jmp32  %assq_1_loop
:assq_1_break
					# a != 1? ...: ...
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %assq_40_else
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	test___%eax,%eax
	jmp32  %assq_40_break
:assq_40_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:assq_40_break
	leave
	ret


:assq_ref_env
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# x = assq(x, a)
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %assq
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# if (x == 2) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %assq_ref_env_7_break
	mov____$i32,%eax %0x6
	leave
	ret
	jmp32  %assq_ref_env_7_break
:assq_ref_env_7_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	leave
	ret


:set_car_x
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TPAIR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %set_car_x_1_else
	jmp32  %set_car_x_1_break
:set_car_x_1_else
	push___$i32 &string_isxdigit_147
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:set_car_x_1_break
					# g_cells[x].car = e
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:set_cdr_x
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_cells[x].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %set_cdr_x_1_break
					# error(29, cons(x, cell_set_cdr_x)); 
	mov____0x32,%eax &cell_set_cdr_x
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x1d
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %set_cdr_x_1_break
:set_cdr_x_1_break
					# g_cells[x].cdr = e
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:set_env_x
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM p = assert_defined(x, assq(x, a)); 
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0x8
	call32 %assq
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %assert_defined
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# if (g_cells[p].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %set_env_x_9_break
					# error(29, cons(p, x)); 
	push___0x8(%ebp) !0x8
	push___0x8(%ebp) !0x-4
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x1d
	push___%eax
	call32 %error
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %set_env_x_9_break
:set_env_x_9_break
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x-4
	call32 %set_cdr_x
	add____$i8,%esp !0x8
	leave
	ret


:call_lambda
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM cl = cons(cons(8, x), x); 
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0xc
	mov____$i32,%eax %0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# r1 = e
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# r0 = cl
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &r0
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:make_closure_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x10
	mov____$i32,%eax %0x9
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x2
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:lookup_macro_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_cells[x].type != TSYMBOL) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %lookup_macro__1_break
	mov____$i32,%eax %0x2
	leave
	ret
	jmp32  %lookup_macro__1_break
:lookup_macro__1_break
					# SCM m = assq_ref_env(x, a); 
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# if (g_cells[m].type == TMACRO) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x5
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lookup_macro__22_break
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	leave
	ret
	jmp32  %lookup_macro__22_break
:lookup_macro__22_break
	mov____$i32,%eax %0x2
	leave
	ret


:push_cc
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM x = r3; 
	mov____0x32,%eax &r3
	mov____%eax,0x8(%ebp) !0x-4
					# r3 = c
	mov____0x8(%ebp),%eax !0x14
	mov____%eax,0x32 &r3
	test___%eax,%eax
					# r2 = p2
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,0x32 &r2
	test___%eax,%eax
					# gc_push_frame(); 
	call32 %gc_push_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = p1
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# r0 = a
	mov____0x8(%ebp),%eax !0x10
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# r3 = x
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &r3
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:gc_peek_frame
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM frame = g_cells[g_stack].car; 
	mov____0x32,%eax &g_stack
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# r1 = g_cells[frame].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# r2 = g_cells[g_cells[frame].cdr].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r2
	test___%eax,%eax
					# r3 = g_cells[g_cells[g_cells[frame].cdr].cdr].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r3
	test___%eax,%eax
					# r0 = g_cells[g_cells[g_cells[g_cells[frame].cdr].cdr].cdr].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r0
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:gc_pop_frame
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM frame = gc_peek_frame(g_stack); 
	mov____0x32,%eax &g_stack
	push___%eax
	call32 %gc_peek_frame
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# g_stack = g_cells[g_stack].cdr
	mov____0x32,%eax &g_stack
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:eval_apply
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
:eval_apply_label_eval_apply
					# gc_check(); 
	call32 %gc_check
	add____$i8,%esp !0x0
	test___%eax,%eax
					# switch (r3) {   ...} 
	mov____0x32,%eax &r3
:eval_apply_5_clause0
	cmp____$i8,%eax !0x2a
	je32   %eval_apply_5_body0
	jmp32  %eval_apply_5_clause1
:eval_apply_5_body0
	jmp32  %eval_apply_label_evlis
	jmp32  %eval_apply_5_body1
:eval_apply_5_clause1
	cmp____$i8,%eax !0x2b
	je32   %eval_apply_5_body1
	jmp32  %eval_apply_5_clause2
:eval_apply_5_body1
	jmp32  %eval_apply_label_evlis2
	jmp32  %eval_apply_5_body2
:eval_apply_5_clause2
	cmp____$i8,%eax !0x2c
	je32   %eval_apply_5_body2
	jmp32  %eval_apply_5_clause3
:eval_apply_5_body2
	jmp32  %eval_apply_label_evlis3
	jmp32  %eval_apply_5_body3
:eval_apply_5_clause3
	cmp____$i8,%eax !0x2d
	je32   %eval_apply_5_body3
	jmp32  %eval_apply_5_clause4
:eval_apply_5_body3
	jmp32  %eval_apply_label_apply
	jmp32  %eval_apply_5_body4
:eval_apply_5_clause4
	cmp____$i8,%eax !0x2e
	je32   %eval_apply_5_body4
	jmp32  %eval_apply_5_clause5
:eval_apply_5_body4
	jmp32  %eval_apply_label_apply2
	jmp32  %eval_apply_5_body5
:eval_apply_5_clause5
	cmp____$i8,%eax !0x2f
	je32   %eval_apply_5_body5
	jmp32  %eval_apply_5_clause6
:eval_apply_5_body5
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_5_body6
:eval_apply_5_clause6
	cmp____$i8,%eax !0x30
	je32   %eval_apply_5_body6
	jmp32  %eval_apply_5_clause7
:eval_apply_5_body6
	jmp32  %eval_apply_label_eval_car
	jmp32  %eval_apply_5_body7
:eval_apply_5_clause7
	cmp____$i8,%eax !0x31
	je32   %eval_apply_5_body7
	jmp32  %eval_apply_5_clause8
:eval_apply_5_body7
	jmp32  %eval_apply_label_eval_cdr
	jmp32  %eval_apply_5_body8
:eval_apply_5_clause8
	cmp____$i8,%eax !0x32
	je32   %eval_apply_5_body8
	jmp32  %eval_apply_5_clause9
:eval_apply_5_body8
	jmp32  %eval_apply_label_eval_cons
	jmp32  %eval_apply_5_body9
:eval_apply_5_clause9
	cmp____$i8,%eax !0x33
	je32   %eval_apply_5_body9
	jmp32  %eval_apply_5_clause10
:eval_apply_5_body9
	jmp32  %eval_apply_label_eval_null_p
	jmp32  %eval_apply_5_body10
:eval_apply_5_clause10
	cmp____$i8,%eax !0x34
	je32   %eval_apply_5_body10
	jmp32  %eval_apply_5_clause11
:eval_apply_5_body10
	jmp32  %eval_apply_label_eval_set_x
	jmp32  %eval_apply_5_body11
:eval_apply_5_clause11
	cmp____$i8,%eax !0x35
	je32   %eval_apply_5_body11
	jmp32  %eval_apply_5_clause12
:eval_apply_5_body11
	jmp32  %eval_apply_label_eval_macro
	jmp32  %eval_apply_5_body12
:eval_apply_5_clause12
	cmp____$i8,%eax !0x36
	je32   %eval_apply_5_body12
	jmp32  %eval_apply_5_clause13
:eval_apply_5_body12
	jmp32  %eval_apply_label_eval_check_func
	jmp32  %eval_apply_5_body13
:eval_apply_5_clause13
	cmp____$i8,%eax !0x37
	je32   %eval_apply_5_body13
	jmp32  %eval_apply_5_clause14
:eval_apply_5_body13
	jmp32  %eval_apply_label_eval2
	jmp32  %eval_apply_5_body14
:eval_apply_5_clause14
	cmp____$i8,%eax !0x38
	je32   %eval_apply_5_body14
	jmp32  %eval_apply_5_clause15
:eval_apply_5_body14
	jmp32  %eval_apply_label_macro_expand
	jmp32  %eval_apply_5_body15
:eval_apply_5_clause15
	cmp____$i8,%eax !0x39
	je32   %eval_apply_5_body15
	jmp32  %eval_apply_5_clause16
:eval_apply_5_body15
	jmp32  %eval_apply_label_begin
	jmp32  %eval_apply_5_body16
:eval_apply_5_clause16
	cmp____$i8,%eax !0x3a
	je32   %eval_apply_5_body16
	jmp32  %eval_apply_5_clause17
:eval_apply_5_body16
	jmp32  %eval_apply_label_begin_read_input_file
	jmp32  %eval_apply_5_body17
:eval_apply_5_clause17
	cmp____$i8,%eax !0x3b
	je32   %eval_apply_5_body17
	jmp32  %eval_apply_5_clause18
:eval_apply_5_body17
	jmp32  %eval_apply_label_begin2
	jmp32  %eval_apply_5_body18
:eval_apply_5_clause18
	cmp____$i8,%eax !0x3c
	je32   %eval_apply_5_body18
	jmp32  %eval_apply_5_clause19
:eval_apply_5_body18
	jmp32  %eval_apply_label_vm_if
	jmp32  %eval_apply_5_body19
:eval_apply_5_clause19
	cmp____$i8,%eax !0x3d
	je32   %eval_apply_5_body19
	jmp32  %eval_apply_5_clause20
:eval_apply_5_body19
	jmp32  %eval_apply_label_if_expr
	jmp32  %eval_apply_5_body20
:eval_apply_5_clause20
	cmp____$i8,%eax !0x3f
	je32   %eval_apply_5_body20
	jmp32  %eval_apply_5_clause21
:eval_apply_5_body20
	jmp32  %eval_apply_label_call_with_current_continuation2
	jmp32  %eval_apply_5_body21
:eval_apply_5_clause21
	cmp____$i8,%eax !0x3e
	je32   %eval_apply_5_body21
	jmp32  %eval_apply_5_clause22
:eval_apply_5_body21
	jmp32  %eval_apply_label_call_with_values2
	jmp32  %eval_apply_5_body22
:eval_apply_5_clause22
	cmp____$i8,%eax !0x40
	je32   %eval_apply_5_body22
	jmp32  %eval_apply_5_clause23
:eval_apply_5_body22
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_5_body23
:eval_apply_5_clause23
	cmp____$i8,%eax !0x7
	je32   %eval_apply_5_body23
	jmp32  %eval_apply_5_clause24
:eval_apply_5_body23
	mov____0x32,%eax &r1
	leave
	ret
	jmp32  %eval_apply_5_body24
:eval_apply_5_clause24
:eval_apply_5_body24
					# 0? ...: ...
	mov____$i32,%eax %0x0
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %eval_apply_178_else
	jmp32  %eval_apply_178_break
:eval_apply_178_else
	push___$i32 &string_isxdigit_148
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:eval_apply_178_break
:eval_apply_5_break
					# SCM x = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
:eval_apply_label_evlis
					# gc_check(); 
	call32 %gc_check
	add____$i8,%esp !0x0
	test___%eax,%eax
					# if (r1 == 1) ...
	mov____0x32,%eax &r1
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_198_break
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_198_break
:eval_apply_198_break
					# if (g_cells[r1].type != TPAIR) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_209_break
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_209_break
:eval_apply_209_break
					# push_cc(g_cells[r1].car, r1, r0, 43); 
	mov____$i32,%eax %0x2b
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_evlis2
					# push_cc(g_cells[r2].cdr, r1, r0, 44); 
	mov____$i32,%eax %0x2c
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_evlis
:eval_apply_label_evlis3
					# r1 = cons(r2, r1)
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
:eval_apply_label_apply
					# gc_check(); 
	call32 %gc_check
	add____$i8,%esp !0x0
	test___%eax,%eax
					# switch (g_cells[g_cells[r1].car].type) {   ...} 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
:eval_apply_265_clause0
	cmp____$i8,%eax !0x3
	je32   %eval_apply_265_body0
	jmp32  %eval_apply_265_clause1
:eval_apply_265_body0
					# check_formals(g_cells[r1].car, make_cell_(tmp_num_(TNUMBER), 0, tmp_num2_(     g_functions[g_cells[g_cells[r1].car].cdr].arity)), g_cells[r1].cdr); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %check_formals
	add____$i8,%esp !0xc
	test___%eax,%eax
					# r1 = call(g_cells[r1].car, g_cells[r1].cdr)
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %call
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_265_body1
:eval_apply_265_clause1
	cmp____$i8,%eax !0x1
	je32   %eval_apply_265_body1
	jmp32  %eval_apply_265_clause2
:eval_apply_265_body1
					# SCM cl = g_cells[g_cells[r1].car].cdr; 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
					# SCM formals = g_cells[g_cells[cl].cdr].car; 
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-c
					# SCM body = g_cells[g_cells[cl].cdr].cdr; 
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-10
					# SCM aa = g_cells[g_cells[cl].car].cdr; 
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-14
					# aa = g_cells[aa].cdr
	mov____0x8(%ebp),%eax !0x-14
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-14
	test___%eax,%eax
					# check_formals(g_cells[r1].car, formals, g_cells[r1].cdr); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x-c
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %check_formals
	add____$i8,%esp !0xc
	test___%eax,%eax
					# SCM p = pairlis(formals, g_cells[r1].cdr, aa); 
	push___0x8(%ebp) !0x-14
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x-c
	call32 %pairlis
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-18
					# call_lambda(body, p, aa, r0); 
	mov____0x32,%eax &r0
	push___%eax
	push___0x8(%ebp) !0x-14
	push___0x8(%ebp) !0x-18
	push___0x8(%ebp) !0x-10
	call32 %call_lambda
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_begin
	jmp32  %eval_apply_265_body2
:eval_apply_265_clause2
	cmp____$i8,%eax !0x2
	je32   %eval_apply_265_body2
	jmp32  %eval_apply_265_clause3
:eval_apply_265_body2
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# g_stack = g_cells[g_cells[r1].car].cdr
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = g_cells[g_cells[x].cdr].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_265_body3
:eval_apply_265_clause3
	cmp____$i8,%eax !0x9
	je32   %eval_apply_265_body3
	jmp32  %eval_apply_265_clause4
:eval_apply_265_body3
					# switch (g_cells[r1].car) {   ...} 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
:eval_apply_472_clause0
	cmp____$i8,%eax !0x2d
	je32   %eval_apply_472_body0
	jmp32  %eval_apply_472_clause1
:eval_apply_472_body0
					# push_cc(cons(g_cells[g_cells[r1].cdr].car, g_cells[g_cells[g_cells[r1].cdr].cdr     ].car), r1, r0, 64); 
	mov____$i32,%eax %0x40
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
	jmp32  %eval_apply_472_body1
:eval_apply_472_clause1
	cmp____$i8,%eax !0x2f
	je32   %eval_apply_472_body1
	jmp32  %eval_apply_472_clause2
:eval_apply_472_body1
					# push_cc(g_cells[g_cells[r1].cdr].car, r1, g_cells[g_cells[g_cells[r1].cdr].cdr]     .car, 64); 
	mov____$i32,%eax %0x40
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_472_body2
:eval_apply_472_clause2
	cmp____$i8,%eax !0x15
	je32   %eval_apply_472_body2
	jmp32  %eval_apply_472_clause3
:eval_apply_472_body2
					# r1 = g_cells[r1].cdr
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_call_with_current_continuation
	jmp32  %eval_apply_472_body3
:eval_apply_472_clause3
:eval_apply_472_body3
					# check_apply(2, g_cells[r1].car); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x2
	push___%eax
	call32 %check_apply
	add____$i8,%esp !0x8
	test___%eax,%eax
:eval_apply_472_break
	jmp32  %eval_apply_265_body4
:eval_apply_265_clause4
	cmp____$i8,%eax !0xb
	je32   %eval_apply_265_body4
	jmp32  %eval_apply_265_clause5
:eval_apply_265_body4
					# if (g_cells[r1].car == 20) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x14
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_590_break
					# r1 = g_cells[r1].cdr
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_call_with_values
	jmp32  %eval_apply_590_break
:eval_apply_590_break
					# if (g_cells[r1].car == 23) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x17
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_613_break
					# r1 = r0
	mov____0x32,%eax &r0
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_613_break
:eval_apply_613_break
	jmp32  %eval_apply_265_break
	jmp32  %eval_apply_265_body5
:eval_apply_265_clause5
	cmp____$i8,%eax !0x7
	je32   %eval_apply_265_body5
	jmp32  %eval_apply_265_break
:eval_apply_265_body5
					# switch (g_cells[g_cells[r1].car].car) {   ...} 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
:eval_apply_639_clause0
	cmp____$i8,%eax !0xc
	je32   %eval_apply_639_body0
	jmp32  %eval_apply_639_break
:eval_apply_639_body0
					# SCM formals = g_cells[g_cells[g_cells[r1].car].cdr].car; 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-1c
					# SCM body = g_cells[g_cells[g_cells[r1].car].cdr].cdr; 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-20
					# SCM p = pairlis(formals, g_cells[r1].cdr, r0); 
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x-1c
	call32 %pairlis
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-24
					# check_formals(r1, formals, g_cells[r1].cdr); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x-1c
	mov____0x32,%eax &r1
	push___%eax
	call32 %check_formals
	add____$i8,%esp !0xc
	test___%eax,%eax
					# call_lambda(body, p, p, r0); 
	mov____0x32,%eax &r0
	push___%eax
	push___0x8(%ebp) !0x-24
	push___0x8(%ebp) !0x-24
	push___0x8(%ebp) !0x-20
	call32 %call_lambda
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_begin
:eval_apply_639_break
:eval_apply_265_break
					# push_cc(g_cells[r1].car, r1, r0, 46); 
	mov____$i32,%eax %0x2e
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_apply2
					# check_apply(r1, g_cells[r2].car); 
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %check_apply
	add____$i8,%esp !0x8
	test___%eax,%eax
					# r1 = cons(r1, g_cells[r2].cdr)
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_label_eval
					# gc_check(); 
	call32 %gc_check
	add____$i8,%esp !0x0
	test___%eax,%eax
					# switch (g_cells[r1].type) {   ...} 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
:eval_apply_757_clause0
	cmp____$i8,%eax !0x7
	je32   %eval_apply_757_body0
	jmp32  %eval_apply_757_clause1
:eval_apply_757_body0
					# switch (g_cells[r1].car) {   ...} 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
:eval_apply_768_clause0
	cmp____$i8,%eax !0x25
	je32   %eval_apply_768_body0
	jmp32  %eval_apply_768_clause1
:eval_apply_768_body0
					# push_cc(g_cells[g_cells[r1].cdr].car, r1, r0, 48); 
	mov____$i32,%eax %0x30
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_eval_car
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = g_cells[x].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_768_body1
:eval_apply_768_clause1
	cmp____$i8,%eax !0x26
	je32   %eval_apply_768_body1
	jmp32  %eval_apply_768_clause2
:eval_apply_768_body1
					# push_cc(g_cells[g_cells[r1].cdr].car, r1, r0, 49); 
	mov____$i32,%eax %0x31
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_eval_cdr
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = g_cells[x].cdr
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_768_body2
:eval_apply_768_clause2
	cmp____$i8,%eax !0x29
	je32   %eval_apply_768_body2
	jmp32  %eval_apply_768_clause3
:eval_apply_768_body2
					# push_cc(g_cells[r1].cdr, r1, r0, 50); 
	mov____$i32,%eax %0x32
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_evlis
:eval_apply_label_eval_cons
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = cons(g_cells[x].car, g_cells[g_cells[x].cdr].car)
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_768_body3
:eval_apply_768_clause3
	cmp____$i8,%eax !0x27
	je32   %eval_apply_768_body3
	jmp32  %eval_apply_768_clause4
:eval_apply_768_body3
					# push_cc(g_cells[g_cells[r1].cdr].car, r1, r0, 51); 
	mov____$i32,%eax %0x33
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_eval_null_p
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = null_p(x)
	push___0x8(%ebp) !0x-4
	call32 %null_p
	add____$i8,%esp !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_768_body4
:eval_apply_768_clause4
	cmp____$i8,%eax !0xf
	je32   %eval_apply_768_body4
	jmp32  %eval_apply_768_clause5
:eval_apply_768_body4
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = g_cells[g_cells[x].cdr].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	jmp32  %eval_apply_768_body5
:eval_apply_768_clause5
	cmp____$i8,%eax !0xd
	je32   %eval_apply_768_body5
	jmp32  %eval_apply_768_clause6
:eval_apply_768_body5
	jmp32  %eval_apply_label_begin
	jmp32  %eval_apply_768_body6
:eval_apply_768_clause6
	cmp____$i8,%eax !0xc
	je32   %eval_apply_768_body6
	jmp32  %eval_apply_768_clause7
:eval_apply_768_body6
					# r1 = make_closure_(g_cells[g_cells[r1].cdr].car, g_cells[g_cells[r1].cdr].cdr,      assq(8, r0))
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x8
	push___%eax
	call32 %assq
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %make_closure_
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_768_body7
:eval_apply_768_clause7
	cmp____$i8,%eax !0xe
	je32   %eval_apply_768_body7
	jmp32  %eval_apply_768_clause8
:eval_apply_768_body7
					# r1 = g_cells[r1].cdr
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_if
	jmp32  %eval_apply_768_body8
:eval_apply_768_clause8
	cmp____$i8,%eax !0x10
	je32   %eval_apply_768_body8
	jmp32  %eval_apply_768_clause9
:eval_apply_768_body8
					# push_cc(g_cells[g_cells[g_cells[r1].cdr].cdr].car, r1, r0, 52); 
	mov____$i32,%eax %0x34
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_eval_set_x
					# x = r2
	mov____0x32,%eax &r2
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# r1 = set_env_x(g_cells[g_cells[x].cdr].car, r1, r0)
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %set_env_x
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_768_body9
:eval_apply_768_clause9
	cmp____$i8,%eax !0x38
	je32   %eval_apply_768_body9
	jmp32  %eval_apply_768_clause10
:eval_apply_768_body9
					# push_cc(g_cells[g_cells[r1].cdr].car, r1, r0, 64); 
	mov____$i32,%eax %0x40
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_macro_expand
	jmp32  %eval_apply_768_body10
:eval_apply_768_clause10
:eval_apply_768_body10
					# push_cc(r1, r1, r0, 53); 
	mov____$i32,%eax %0x35
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_macro_expand
:eval_apply_label_eval_macro
					# if (r1 != r2) ...
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1113_break
					# if (g_cells[r1].type == TPAIR) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1121_break
					# set_cdr_x(r2, g_cells[r1].cdr); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	call32 %set_cdr_x
	add____$i8,%esp !0x8
	test___%eax,%eax
					# set_car_x(r2, g_cells[r1].car); 
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	call32 %set_car_x
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %eval_apply_1121_break
:eval_apply_1121_break
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_1113_break
:eval_apply_1113_break
					# push_cc(g_cells[r1].car, r1, r0, 54); 
	mov____$i32,%eax %0x36
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_eval_check_func
					# push_cc(g_cells[r2].cdr, r2, r0, 55); 
	mov____$i32,%eax %0x37
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_evlis
:eval_apply_label_eval2
					# r1 = cons(g_cells[r2].car, r1)
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_768_break
	jmp32  %eval_apply_757_body1
:eval_apply_757_clause1
	cmp____$i8,%eax !0xb
	je32   %eval_apply_757_body1
	jmp32  %eval_apply_757_clause2
:eval_apply_757_body1
					# r1 = assert_defined(r1, assq_ref_env(r1, r0))
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %assert_defined
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
	jmp32  %eval_apply_757_body2
:eval_apply_757_clause2
:eval_apply_757_body2
	jmp32  %eval_apply_label_vm_return
:eval_apply_757_break
					# SCM macro; 
					# SCM expanders; 
:eval_apply_label_macro_expand
					# if (g_cells[r1].type == TPAIR && (macro = lookup_macro_(g_cells[r1].car, r0))      != 2) ...else ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1225_else
					# macro = lookup_macro_(g_cells[r1].car, r0)
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_macro_
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1225_else
					# r1 = cons(macro, g_cells[r1].cdr)
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x-8
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
	jmp32  %eval_apply_1225_break
:eval_apply_1225_else
					# if (g_cells[r1].type == TPAIR && g_cells[g_cells[r1].car].type == TSYMBOL && (     expanders = assq_ref_env(19, r0)) != 6 && (macro = assq(g_cells[r1].car,      expanders)) != 2) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1267_break
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1267_break
					# expanders = assq_ref_env(19, r0)
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x13
	push___%eax
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-c
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1267_break
					# macro = assq(g_cells[r1].car, expanders)
	push___0x8(%ebp) !0x-c
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %assq
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1267_break
					# SCM sc_expand = assq_ref_env(18, r0); 
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x12
	push___%eax
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-10
					# if (sc_expand != 6 && sc_expand != 2) ...
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1328_break
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1328_break
					# r1 = cons(sc_expand, cons(r1, 1))
	mov____$i32,%eax %0x1
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x-10
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
	jmp32  %eval_apply_1328_break
:eval_apply_1328_break
	jmp32  %eval_apply_1267_break
:eval_apply_1267_break
:eval_apply_1225_break
	jmp32  %eval_apply_label_vm_return
:eval_apply_label_begin
					# x = 7
	mov____$i32,%eax %0x7
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# while (r1 != 1) ...
	jmp32  %eval_apply_1365_continue
:eval_apply_1365_loop
					# gc_check(); 
	call32 %gc_check
	add____$i8,%esp !0x0
	test___%eax,%eax
					# if (g_cells[r1].type == TPAIR && g_cells[g_cells[r1].car].type == TPAIR) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1371_break
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1371_break
					# if (g_cells[g_cells[r1].car].car == 13) ...else ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1398_else
					# r1 = append2(g_cells[g_cells[r1].car].cdr, g_cells[r1].cdr)
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %append2
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_1398_break
:eval_apply_1398_else
					# if (g_cells[g_cells[r1].car].car == 24) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0x18
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1436_break
					# push_cc(cons(25, 1), r1, r0, 58); 
	mov____$i32,%eax %0x3a
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	mov____$i32,%eax %0x19
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_label_begin_read_input_file
					# r1 = append2(r1, g_cells[r2].cdr)
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	call32 %append2
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_1436_break
:eval_apply_1436_break
:eval_apply_1398_break
	jmp32  %eval_apply_1371_break
:eval_apply_1371_break
					# if (g_cells[r1].cdr == 1) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1483_break
					# r1 = g_cells[r1].car
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_1483_break
:eval_apply_1483_break
					# push_cc(g_cells[r1].car, r1, r0, 59); 
	mov____$i32,%eax %0x3b
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_begin2
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# r1 = g_cells[r2].cdr
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
:eval_apply_1365_continue
	mov____0x32,%eax &r1
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1365_break
	jmp32  %eval_apply_1365_loop
:eval_apply_1365_break
					# r1 = x
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
:eval_apply_label_vm_if
					# push_cc(g_cells[r1].car, r1, r0, 61); 
	mov____$i32,%eax %0x3d
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
:eval_apply_label_if_expr
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# r1 = r2
	mov____0x32,%eax &r2
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# if (x != 2) ...
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1572_break
					# r1 = g_cells[g_cells[r1].cdr].car
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_1572_break
:eval_apply_1572_break
					# if (g_cells[g_cells[r1].cdr].cdr != 1) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %eval_apply_1595_break
					# r1 = g_cells[g_cells[g_cells[r1].cdr].cdr].car
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval
	jmp32  %eval_apply_1595_break
:eval_apply_1595_break
					# r1 = 7
	mov____$i32,%eax %0x7
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
:eval_apply_label_call_with_current_continuation
					# gc_push_frame(); 
	call32 %gc_push_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# x = make_cell_(tmp_num_(TCONTINUATION), g_continuations++, g_stack)
	mov____0x32,%eax &g_stack
	push___%eax
	mov____0x32,%eax &g_continuations
	push___%eax
	mov____$i32,%eax &g_continuations
	add____$i8,(%eax) !0x1
	pop____%eax
	push___%eax
	mov____$i32,%eax %0x2
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# push_cc(cons(g_cells[r1].car, cons(x, 1)), x, r0, 63); 
	mov____$i32,%eax %0x3f
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x1
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_label_call_with_current_continuation2
					# g_cells[r2].cdr = g_stack
	mov____0x32,%eax &g_stack
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	jmp32  %eval_apply_label_vm_return
:eval_apply_label_call_with_values
					# push_cc(cons(g_cells[r1].car, 1), r1, r0, 62); 
	mov____$i32,%eax %0x3e
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r1
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_label_call_with_values2
					# if (g_cells[r1].type == TVALUES) ...
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eval_apply_1711_break
					# r1 = g_cells[r1].cdr
	mov____0x32,%eax &r1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_1711_break
:eval_apply_1711_break
					# r1 = cons(g_cells[g_cells[r2].cdr].car, r1)
	mov____0x32,%eax &r1
	push___%eax
	mov____0x32,%eax &r2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_apply
:eval_apply_label_vm_return
					# x = r1
	mov____0x32,%eax &r1
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_pop_frame(); 
	call32 %gc_pop_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# r1 = x
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &r1
	test___%eax,%eax
	jmp32  %eval_apply_label_eval_apply
	leave
	ret


:apply
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# push_cc(cons(f, x), 7, r0, 7); 
	mov____$i32,%eax %0x7
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x7
	push___%eax
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
					# r3 = 45
	mov____$i32,%eax %0x2d
	mov____%eax,0x32 &r3
	test___%eax,%eax
	call32 %eval_apply
	add____$i8,%esp !0x0
	leave
	ret


:mes_g_stack
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# r0 = a
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# r1 = make_cell_(tmp_num_(TCHAR), 0, tmp_num2_(0))
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# r2 = make_cell_(tmp_num_(TCHAR), 0, tmp_num2_(0))
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r2
	test___%eax,%eax
					# r3 = make_cell_(tmp_num_(TCHAR), 0, tmp_num2_(0))
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r3
	test___%eax,%eax
					# g_stack = cons(1, 1)
	mov____$i32,%eax %0x1
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
	mov____0x32,%eax &r0
	leave
	ret


:make_tmps
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# tmp = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &tmp
	test___%eax,%eax
					# cells[tmp].type = TCHAR
	mov____$i32,%eax %0x0
	push___%eax
	mov____0x32,%eax &tmp
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0x8
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# tmp_num = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &tmp_num
	test___%eax,%eax
					# cells[tmp_num].type = TNUMBER
	mov____$i32,%eax %0x6
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0x8
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# tmp_num2 = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &tmp_num2
	test___%eax,%eax
					# cells[tmp_num2].type = TNUMBER
	mov____$i32,%eax %0x6
	push___%eax
	mov____0x32,%eax &tmp_num2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0x8
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x0
	leave
	ret


:ungetchar
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____0x32,%eax &g_stdin
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %ungetc
	add____$i8,%esp !0x8
	leave
	ret


:peekchar
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int c = getchar(); 
	call32 %getchar
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x-4
					# ungetchar(c); 
	push___0x8(%ebp) !0x-4
	call32 %ungetchar
	add____$i8,%esp !0x4
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:peek_byte
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	call32 %peekchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:read_byte
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:unread_byte
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# ungetchar(g_cells[i].cdr); 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %ungetchar
	add____$i8,%esp !0x4
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x8
	leave
	ret


:write_byte
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM c = car(x); 
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# SCM p = cdr(x); 
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-8
					# int fd = g_stdout; 
	mov____0x32,%eax &g_stdout
	mov____%eax,0x8(%ebp) !0x-c
					# if (g_cells[p].type == TPAIR && g_cells[car(p)].type == TNUMBER && g_cells[     g_cells[p].car].cdr != 1) ...
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %write_byte_12_break
	push___0x8(%ebp) !0x-8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %write_byte_12_break
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %write_byte_12_break
					# fd = g_cells[g_cells[p].car].cdr
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-c
	test___%eax,%eax
	jmp32  %write_byte_12_break
:write_byte_12_break
					# char cc = g_cells[c].cdr; 
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-10
					# write(fd, (char*)&cc, 1); 
	mov____$i32,%eax %0x1
	push___%eax
	lea____0x8(%ebp),%eax !0x-10
	push___%eax
	push___0x8(%ebp) !0x-c
	call32 %write
	add____$i8,%esp !0xc
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:string_to_cstring
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *p = string_to_cstring_buf; 
	mov____$i32,%eax &string_to_cstring_buf
	mov____%eax,0x8(%ebp) !0x-4
					# s = g_cells[s].car
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# while (s != 1) ...
	jmp32  %string_to_cstring_12_continue
:string_to_cstring_12_loop
					# *p = g_cells[car(s)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	mov____%al,(%edx)
	add____$i8,0x8(%ebp) !0x-4 !0x1
	test___%eax,%eax
					# s = cdr(s)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:string_to_cstring_12_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %string_to_cstring_12_break
	jmp32  %string_to_cstring_12_loop
:string_to_cstring_12_break
					# *p = 0
	mov____$i32,%eax %0x0
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	mov____%al,(%edx)
	test___%eax,%eax
	mov____$i32,%eax &string_to_cstring_buf
	leave
	ret


:getenv_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *p; 
					# p = getenv(string_to_cstring(s))
	push___0x8(%ebp) !0x8
	call32 %string_to_cstring
	add____$i8,%esp !0x4
	push___%eax
	call32 %getenv
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# p? ...: ...
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %getenv__9_else
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	test___%eax,%eax
	jmp32  %getenv__9_break
:getenv__9_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:getenv__9_break
	leave
	ret


:access_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# access(string_to_cstring(file_name), g_cells[mode].cdr) == 0? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %string_to_cstring
	add____$i8,%esp !0x4
	push___%eax
	call32 %access
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %access_p_1_else
	mov____$i32,%eax %0x3
	test___%eax,%eax
	jmp32  %access_p_1_break
:access_p_1_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:access_p_1_break
	leave
	ret


:current_input_port
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____0x32,%eax &g_stdin
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:open_input_file
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %string_to_cstring
	add____$i8,%esp !0x4
	push___%eax
	call32 %open
	add____$i8,%esp !0x8
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:set_current_input_port
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_stdin = g_cells[port].cdr? g_cells[port].cdr: 0
					# g_cells[port].cdr? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %set_current_input_port_2_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
	jmp32  %set_current_input_port_2_break
:set_current_input_port_2_else
	mov____$i32,%eax %0x0
	test___%eax,%eax
:set_current_input_port_2_break
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
	call32 %current_input_port
	add____$i8,%esp !0x0
	leave
	ret


:current_output_port
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____0x32,%eax &g_stdout
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:open_output_file
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM file_name = car(x); 
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# int mode = 00400 | 00200; 
	mov____$i32,%eax %0x100
	push___%eax
	mov____$i32,%eax %0x80
	mov____%eax,%edx
	pop____%eax
	or_____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-8
					# if (g_cells[x].type == TPAIR && g_cells[car(x)].type == TNUMBER) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %open_output_file_17_break
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %open_output_file_17_break
					# mode = g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
	test___%eax,%eax
	jmp32  %open_output_file_17_break
:open_output_file_17_break
	push___0x8(%ebp) !0x-8
	mov____$i32,%eax %0x1
	push___%eax
	mov____$i32,%eax %0x40
	mov____%eax,%edx
	pop____%eax
	or_____%edx,%eax
	push___%eax
	mov____$i32,%eax %0x200
	mov____%eax,%edx
	pop____%eax
	or_____%edx,%eax
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %string_to_cstring
	add____$i8,%esp !0x4
	push___%eax
	call32 %open
	add____$i8,%esp !0xc
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:set_current_output_port
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_stdout = g_cells[port].cdr? g_cells[port].cdr: 1
					# g_cells[port].cdr? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %set_current_output_port_2_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
	jmp32  %set_current_output_port_2_break
:set_current_output_port_2_else
	mov____$i32,%eax %0x1
	test___%eax,%eax
:set_current_output_port_2_break
	mov____%eax,0x32 &g_stdout
	test___%eax,%eax
	call32 %current_output_port
	add____$i8,%esp !0x0
	leave
	ret


:force_output
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	mov____$i32,%eax %0x7
	leave
	ret


:greater_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 2147483647; 
	mov____$i32,%eax %0x7fffffff
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %greater_p_4_continue
:greater_p_4_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %greater_p_7_else
	jmp32  %greater_p_7_break
:greater_p_7_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:greater_p_7_break
					# if (g_cells[car(x)].cdr >= n) ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setge__%al
	movzbl_%al,%eax
					# jmp test LABEL
	jl32   %greater_p_26_break
	mov____$i32,%eax %0x2
	leave
	ret
	jmp32  %greater_p_26_break
:greater_p_26_break
					# n = g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:greater_p_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %greater_p_4_break
	jmp32  %greater_p_4_loop
:greater_p_4_break
	mov____$i32,%eax %0x3
	leave
	ret


:less_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = -2147483648; 
	push___%eax
	mov____$i32,%eax %0x80000000
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %less_p_8_continue
:less_p_8_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %less_p_11_else
	jmp32  %less_p_11_break
:less_p_11_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:less_p_11_break
					# if (g_cells[car(x)].cdr <= n) ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setle__%al
	movzbl_%al,%eax
					# jmp test LABEL
	jg32   %less_p_30_break
	mov____$i32,%eax %0x2
	leave
	ret
	jmp32  %less_p_30_break
:less_p_30_break
					# n = g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:less_p_8_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %less_p_8_break
	jmp32  %less_p_8_loop
:less_p_8_break
	mov____$i32,%eax %0x3
	leave
	ret


:is_p
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (x == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %is_p_1_break
	mov____$i32,%eax %0x3
	leave
	ret
	jmp32  %is_p_1_break
:is_p_1_break
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %is_p_13_else
	jmp32  %is_p_13_break
:is_p_13_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:is_p_13_break
					# int n = g_cells[car(x)].cdr; 
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# while (x != 1) ...
	jmp32  %is_p_45_continue
:is_p_45_loop
					# if (g_cells[car(x)].cdr != n) ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %is_p_48_break
	mov____$i32,%eax %0x2
	leave
	ret
	jmp32  %is_p_48_break
:is_p_48_break
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:is_p_45_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %is_p_45_break
	jmp32  %is_p_45_loop
:is_p_45_break
	mov____$i32,%eax %0x3
	leave
	ret


:minus
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM a = car(x); 
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells[a].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %minus_5_else
	jmp32  %minus_5_break
:minus_5_else
	push___$i32 &string_isxdigit_150
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:minus_5_break
					# int n = g_cells[a].cdr; 
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# if (x == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %minus_35_break
					# n = -n
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-8
	test___%eax,%eax
	jmp32  %minus_35_break
:minus_35_break
					# while (x != 1) ...
	jmp32  %minus_53_continue
:minus_53_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %minus_56_else
	jmp32  %minus_56_break
:minus_56_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:minus_56_break
					# n -= g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	pop____%edx
	sub____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-8
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:minus_53_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %minus_53_break
	jmp32  %minus_53_loop
:minus_53_break
	push___0x8(%ebp) !0x-8
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:plus
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %plus_4_continue
:plus_4_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %plus_7_else
	jmp32  %plus_7_break
:plus_7_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:plus_7_break
					# n += g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:plus_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %plus_4_break
	jmp32  %plus_4_loop
:plus_4_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:divide
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
					# if (x != 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %divide_4_break
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %divide_12_else
	jmp32  %divide_12_break
:divide_12_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:divide_12_break
					# n = g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
	jmp32  %divide_4_break
:divide_4_break
					# while (x != 1) ...
	jmp32  %divide_47_continue
:divide_47_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %divide_50_else
	jmp32  %divide_50_break
:divide_50_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:divide_50_break
					# n /= g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	mov____%edx,%ebx
	xor____%edx,%edx
	idiv___%ebx
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:divide_47_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %divide_47_break
	jmp32  %divide_47_loop
:divide_47_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:modulo
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[a].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %modulo_1_else
	jmp32  %modulo_1_break
:modulo_1_else
	push___$i32 &string_isxdigit_150
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:modulo_1_break
					# g_cells[b].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %modulo_19_else
	jmp32  %modulo_19_break
:modulo_19_else
	push___$i32 &string_isxdigit_151
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:modulo_19_break
					# int x = g_cells[a].cdr; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# while (x < 0) ...
	jmp32  %modulo_44_continue
:modulo_44_loop
					# x += g_cells[b].cdr
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
:modulo_44_continue
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %modulo_44_break
	jmp32  %modulo_44_loop
:modulo_44_break
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%edx,%ebx
	xor____%edx,%edx
	idiv___%ebx
	mov____%edx,%eax
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:multiply
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %multiply_4_continue
:multiply_4_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %multiply_7_else
	jmp32  %multiply_7_break
:multiply_7_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:multiply_7_break
					# n *= g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	mul____%edx
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:multiply_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %multiply_4_break
	jmp32  %multiply_4_loop
:multiply_4_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:logand
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %logand_4_continue
:logand_4_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %logand_7_else
	jmp32  %logand_7_break
:logand_7_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:logand_7_break
					# n &= g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	and____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:logand_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %logand_4_break
	jmp32  %logand_4_loop
:logand_4_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:logior
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int n = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
					# while (x != 1) ...
	jmp32  %logior_4_continue
:logior_4_loop
					# g_cells[car(x)].type == TNUMBER? ...: ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %logior_7_else
	jmp32  %logior_7_break
:logior_7_else
	push___$i32 &string_isxdigit_149
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:logior_7_break
					# n |= g_cells[car(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	or_____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:logior_4_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %logior_4_break
	jmp32  %logior_4_loop
:logior_4_break
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:lognot
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lognot_1_else
	jmp32  %lognot_1_break
:lognot_1_else
	push___$i32 &string_isxdigit_152
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:lognot_1_break
					# int n = ~g_cells[x].cdr; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
	not____%eax
	mov____%eax,0x8(%ebp) !0x-4
	push___0x8(%ebp) !0x-4
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:ash
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[n].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %ash_1_else
	jmp32  %ash_1_break
:ash_1_else
	push___$i32 &string_isxdigit_153
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:ash_1_break
					# g_cells[count].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %ash_19_else
	jmp32  %ash_19_break
:ash_19_else
	push___$i32 &string_isxdigit_154
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:ash_19_break
					# int cn = g_cells[n].cdr; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# int ccount = g_cells[count].cdr; 
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
					# ccount < 0? ...: ...
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %ash_51_else
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	xor____%ecx,%ecx
	mov____%edx,%ecx
	shr____%cl,%eax
	jmp32  %ash_51_break
:ash_51_else
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	xor____%ecx,%ecx
	mov____%edx,%ecx
	shl____%cl,%eax
:ash_51_break
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:display_helper
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# fputs(sep, fd); 
	push___0x8(%ebp) !0x14
	push___0x8(%ebp) !0x10
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# if (g_depth == 0) ...
	mov____0x32,%eax &g_depth
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %display_helper_6_break
	mov____$i32,%eax %0x7
	leave
	ret
	jmp32  %display_helper_6_break
:display_helper_6_break
					# g_depth = g_depth - 1
	mov____0x32,%eax &g_depth
	add____$i8,%eax !0x-1
	mov____%eax,0x32 &g_depth
	test___%eax,%eax
					# switch (g_cells[x].type) {   ...} 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
:display_helper_23_clause0
	cmp____$i8,%eax !0x0
	je32   %display_helper_23_body0
	jmp32  %display_helper_23_clause1
:display_helper_23_body0
					# fputs("#\\", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_155
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputc(g_cells[x].cdr, fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %fputc
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body1
:display_helper_23_clause1
	cmp____$i8,%eax !0x3
	je32   %display_helper_23_body1
	jmp32  %display_helper_23_clause2
:display_helper_23_body1
					# fputs("#<procedure ", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_156
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# char *p = "?"; 
	mov____$i32,%eax &string_isxdigit_157
	mov____%eax,0x8(%ebp) !0x-4
					# if (g_functions[g_cells[x].cdr].name != 0) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %display_helper_64_break
					# p = g_functions[g_cells[x].cdr].name
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %display_helper_64_break
:display_helper_64_break
					# fputs(p, fd); 
	push___0x8(%ebp) !0x14
	push___0x8(%ebp) !0x-4
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs("[", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_145
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(g_cells[x].cdr), fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(",", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_158
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(x), fd); 
	push___0x8(%ebp) !0x14
	push___0x8(%ebp) !0x8
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs("]>", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_159
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body2
:display_helper_23_clause2
	cmp____$i8,%eax !0x5
	je32   %display_helper_23_body2
	jmp32  %display_helper_23_clause3
:display_helper_23_body2
					# fputs("#<macro ", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_160
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# display_helper(cdr(x), cont, "", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_161
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	call32 %display_helper
	add____$i8,%esp !0x10
	test___%eax,%eax
					# fputs(">", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_73
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body3
:display_helper_23_clause3
	cmp____$i8,%eax !0x6
	je32   %display_helper_23_body3
	jmp32  %display_helper_23_clause4
:display_helper_23_body3
					# fputs(itoa(g_cells[x].cdr), fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body4
:display_helper_23_clause4
	cmp____$i8,%eax !0x7
	je32   %display_helper_23_body4
	jmp32  %display_helper_23_clause5
:display_helper_23_body4
					# if (!cont) ...
	mov____0x8(%ebp),%eax !0xc
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %display_helper_185_break
					# fputs("(", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_162
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_185_break
:display_helper_185_break
					# if (x && x != 1) ...
	mov____0x8(%ebp),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %display_helper_199_break
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %display_helper_199_break
					# fdisplay_(g_cells[x].car, fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %fdisplay_
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_199_break
:display_helper_199_break
					# if (g_cells[x].cdr && g_cells[g_cells[x].cdr].type == TPAIR) ...else ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %display_helper_224_else
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %display_helper_224_else
					# display_helper(g_cells[x].cdr, 1, " ", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_163
	mov____$i32,%eax %0x1
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %display_helper
	add____$i8,%esp !0x10
	test___%eax,%eax
	jmp32  %display_helper_224_break
:display_helper_224_else
					# if (g_cells[x].cdr && g_cells[x].cdr != 1) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %display_helper_264_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %display_helper_264_break
					# if (g_cells[g_cells[x].cdr].type != TPAIR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %display_helper_285_break
					# fputs(" . ", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_164
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_285_break
:display_helper_285_break
					# fdisplay_(g_cells[x].cdr, fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %fdisplay_
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_264_break
:display_helper_264_break
:display_helper_224_break
					# if (!cont) ...
	mov____0x8(%ebp),%eax !0xc
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %display_helper_321_break
					# fputs(")", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_165
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_321_break
:display_helper_321_break
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body5
:display_helper_23_clause5
	cmp____$i8,%eax !0x9
	je32   %display_helper_23_body5
	cmp____$i8,%eax !0xa
	je32   %display_helper_23_body5
	cmp____$i8,%eax !0xb
	je32   %display_helper_23_body5
	jmp32  %display_helper_23_clause6
:display_helper_23_body5
					# SCM t = g_cells[x].car; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-8
					# while (t && t != 1) ...
	jmp32  %display_helper_353_continue
:display_helper_353_loop
					# fputc(g_cells[g_cells[t].car].cdr, fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %fputc
	add____$i8,%esp !0x8
	test___%eax,%eax
					# t = g_cells[t].cdr
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
	test___%eax,%eax
:display_helper_353_continue
	mov____0x8(%ebp),%eax !0x-8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %display_helper_353_break
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %display_helper_353_break
	jmp32  %display_helper_353_loop
:display_helper_353_break
	jmp32  %display_helper_23_break
	jmp32  %display_helper_23_body6
:display_helper_23_clause6
:display_helper_23_body6
					# fputs("<", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_74
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(g_cells[x].type), fd); 
	push___0x8(%ebp) !0x14
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(":", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_166
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(x), fd); 
	push___0x8(%ebp) !0x14
	push___0x8(%ebp) !0x8
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(">", fd); 
	push___0x8(%ebp) !0x14
	push___$i32 &string_isxdigit_73
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %display_helper_23_break
:display_helper_23_break
	mov____$i32,%eax %0x0
	leave
	ret


:display_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_depth = 5
	mov____$i32,%eax %0x5
	mov____%eax,0x32 &g_depth
	test___%eax,%eax
	mov____$i32,%eax %0x1
	push___%eax
	push___$i32 &string_isxdigit_161
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %display_helper
	add____$i8,%esp !0x10
	leave
	ret


:display_error_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_depth = 5
	mov____$i32,%eax %0x5
	mov____%eax,0x32 &g_depth
	test___%eax,%eax
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_161
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %display_helper
	add____$i8,%esp !0x10
	leave
	ret


:fdisplay_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_depth = 5
	mov____$i32,%eax %0x5
	mov____%eax,0x32 &g_depth
	test___%eax,%eax
	push___0x8(%ebp) !0xc
	push___$i32 &string_isxdigit_161
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %display_helper
	add____$i8,%esp !0x10
	leave
	ret


:exit_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TNUMBER? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %exit__1_else
	jmp32  %exit__1_break
:exit__1_else
	push___$i32 &string_isxdigit_152
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:exit__1_break
					# exit(g_cells[x].cdr); 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %exit
	add____$i8,%esp !0x4
	test___%eax,%eax
	leave
	ret


:xassq
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# while (a != 1 && x != g_cells[g_cells[a].car].cdr) ...
	jmp32  %xassq_1_continue
:xassq_1_loop
					# a = g_cells[a].cdr
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0xc
	test___%eax,%eax
:xassq_1_continue
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %xassq_1_break
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %xassq_1_break
	jmp32  %xassq_1_loop
:xassq_1_break
					# a != 1? ...: ...
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %xassq_37_else
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	test___%eax,%eax
	jmp32  %xassq_37_break
:xassq_37_else
	mov____$i32,%eax %0x2
	test___%eax,%eax
:xassq_37_break
	leave
	ret


:gc_init_cells
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells = (struct scm*)malloc(2*ARENA_SIZE*sizeof(struct scm))
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x32,%eax &ARENA_SIZE
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	call32 %malloc
	add____$i8,%esp !0x4
	mov____%eax,0x32 &g_cells
	test___%eax,%eax
					# g_cells[0].type = TVECTOR
	mov____$i32,%eax %0xd
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[0].car = 1000
	mov____$i32,%eax %0x3e8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[0].cdr = 0
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells += sizeof(struct scm)
	mov____$i32,%eax %0xc
	mov____$i32,%edx %0xc
	mul____%edx
	push___%eax
	mov____0x32,%eax &g_cells
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x32 &g_cells
	test___%eax,%eax
					# g_cells[0].type = TCHAR
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[0].cdr = 'c'
	mov____$i32,%eax %0x63
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x0
	leave
	ret


:gc_init_news
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *p = g_cells; 
	mov____0x32,%eax &g_cells
	mov____%eax,0x8(%ebp) !0x-4
					# p -= sizeof(struct scm)
	mov____$i32,%eax %0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	sub____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# p += ARENA_SIZE*sizeof(struct scm)
	mov____0x32,%eax &ARENA_SIZE
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# g_news = p
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &g_news
	test___%eax,%eax
					# g_news[0].type = TVECTOR
	mov____$i32,%eax %0xd
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_news[0].car = 1000
	mov____$i32,%eax %0x3e8
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_news[0].cdr = 0
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_news += sizeof(struct scm)
	mov____$i32,%eax %0xc
	mov____$i32,%edx %0xc
	mul____%edx
	push___%eax
	mov____0x32,%eax &g_news
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x32 &g_news
	test___%eax,%eax
					# g_news[0].type = TCHAR
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_news[0].cdr = 'n'
	mov____$i32,%eax %0x6e
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x0
	leave
	ret


:mes_symbols
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# gc_init_cells(); 
	call32 %gc_init_cells
	add____$i8,%esp !0x0
	test___%eax,%eax
					# gc_init_news(); 
	call32 %gc_init_news
	add____$i8,%esp !0x0
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[1] = scm_nil
	mov____$i32,%eax &scm_nil
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[2] = scm_f
	mov____$i32,%eax &scm_f
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[3] = scm_t
	mov____$i32,%eax &scm_t
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[4] = scm_dot
	mov____$i32,%eax &scm_dot
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[5] = scm_arrow
	mov____$i32,%eax &scm_arrow
	push___%eax
	mov____$i32,%eax %0x5
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[6] = scm_undefined
	mov____$i32,%eax &scm_undefined
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[7] = scm_unspecified
	mov____$i32,%eax &scm_unspecified
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[8] = scm_closure
	mov____$i32,%eax &scm_closure
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[9] = scm_circular
	mov____$i32,%eax &scm_circular
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[10] = scm_begin
	mov____$i32,%eax &scm_begin
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[11] = scm_symbol_dot
	mov____$i32,%eax &scm_symbol_dot
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[12] = scm_symbol_lambda
	mov____$i32,%eax &scm_symbol_lambda
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[13] = scm_symbol_begin
	mov____$i32,%eax &scm_symbol_begin
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[14] = scm_symbol_if
	mov____$i32,%eax &scm_symbol_if
	push___%eax
	mov____$i32,%eax %0xe
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[15] = scm_symbol_quote
	mov____$i32,%eax &scm_symbol_quote
	push___%eax
	mov____$i32,%eax %0xf
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[16] = scm_symbol_set_x
	mov____$i32,%eax &scm_symbol_set_x
	push___%eax
	mov____$i32,%eax %0x10
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[17] = scm_symbol_sc_expand
	mov____$i32,%eax &scm_symbol_sc_expand
	push___%eax
	mov____$i32,%eax %0x11
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[18] = scm_symbol_macro_expand
	mov____$i32,%eax &scm_symbol_macro_expand
	push___%eax
	mov____$i32,%eax %0x12
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[19] = scm_symbol_sc_expander_alist
	mov____$i32,%eax &scm_symbol_sc_expander_alist
	push___%eax
	mov____$i32,%eax %0x13
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[20] = scm_symbol_call_with_values
	mov____$i32,%eax &scm_symbol_call_with_values
	push___%eax
	mov____$i32,%eax %0x14
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[21] = scm_call_with_current_continuation
	mov____$i32,%eax &scm_call_with_current_continuation
	push___%eax
	mov____$i32,%eax %0x15
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[22] = scm_symbol_call_with_current_continuation
	mov____$i32,%eax &scm_symbol_call_with_current_continuation
	push___%eax
	mov____$i32,%eax %0x16
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[23] = scm_symbol_current_module
	mov____$i32,%eax &scm_symbol_current_module
	push___%eax
	mov____$i32,%eax %0x17
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[24] = scm_symbol_primitive_load
	mov____$i32,%eax &scm_symbol_primitive_load
	push___%eax
	mov____$i32,%eax %0x18
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[25] = scm_symbol_read_input_file
	mov____$i32,%eax &scm_symbol_read_input_file
	push___%eax
	mov____$i32,%eax %0x19
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[26] = scm_symbol_write
	mov____$i32,%eax &scm_symbol_write
	push___%eax
	mov____$i32,%eax %0x1a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[27] = scm_symbol_display
	mov____$i32,%eax &scm_symbol_display
	push___%eax
	mov____$i32,%eax %0x1b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[28] = scm_symbol_throw
	mov____$i32,%eax &scm_symbol_throw
	push___%eax
	mov____$i32,%eax %0x1c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[29] = scm_symbol_not_a_pair
	mov____$i32,%eax &scm_symbol_not_a_pair
	push___%eax
	mov____$i32,%eax %0x1d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[30] = scm_symbol_system_error
	mov____$i32,%eax &scm_symbol_system_error
	push___%eax
	mov____$i32,%eax %0x1e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[31] = scm_symbol_wrong_number_of_args
	mov____$i32,%eax &scm_symbol_wrong_number_of_args
	push___%eax
	mov____$i32,%eax %0x1f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[32] = scm_symbol_wrong_type_arg
	mov____$i32,%eax &scm_symbol_wrong_type_arg
	push___%eax
	mov____$i32,%eax %0x20
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[33] = scm_symbol_unbound_variable
	mov____$i32,%eax &scm_symbol_unbound_variable
	push___%eax
	mov____$i32,%eax %0x21
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[34] = scm_symbol_argv
	mov____$i32,%eax &scm_symbol_argv
	push___%eax
	mov____$i32,%eax %0x22
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[35] = scm_symbol_mes_prefix
	mov____$i32,%eax &scm_symbol_mes_prefix
	push___%eax
	mov____$i32,%eax %0x23
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[36] = scm_symbol_mes_version
	mov____$i32,%eax &scm_symbol_mes_version
	push___%eax
	mov____$i32,%eax %0x24
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[37] = scm_symbol_car
	mov____$i32,%eax &scm_symbol_car
	push___%eax
	mov____$i32,%eax %0x25
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[38] = scm_symbol_cdr
	mov____$i32,%eax &scm_symbol_cdr
	push___%eax
	mov____$i32,%eax %0x26
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[39] = scm_symbol_null_p
	mov____$i32,%eax &scm_symbol_null_p
	push___%eax
	mov____$i32,%eax %0x27
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[40] = scm_symbol_eq_p
	mov____$i32,%eax &scm_symbol_eq_p
	push___%eax
	mov____$i32,%eax %0x28
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[41] = scm_symbol_cons
	mov____$i32,%eax &scm_symbol_cons
	push___%eax
	mov____$i32,%eax %0x29
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[42] = scm_vm_evlis
	mov____$i32,%eax &scm_vm_evlis
	push___%eax
	mov____$i32,%eax %0x2a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[43] = scm_vm_evlis2
	mov____$i32,%eax &scm_vm_evlis2
	push___%eax
	mov____$i32,%eax %0x2b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[44] = scm_vm_evlis3
	mov____$i32,%eax &scm_vm_evlis3
	push___%eax
	mov____$i32,%eax %0x2c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[45] = scm_vm_apply
	mov____$i32,%eax &scm_vm_apply
	push___%eax
	mov____$i32,%eax %0x2d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[46] = scm_vm_apply2
	mov____$i32,%eax &scm_vm_apply2
	push___%eax
	mov____$i32,%eax %0x2e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[47] = scm_vm_eval
	mov____$i32,%eax &scm_vm_eval
	push___%eax
	mov____$i32,%eax %0x2f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[48] = scm_vm_eval_car
	mov____$i32,%eax &scm_vm_eval_car
	push___%eax
	mov____$i32,%eax %0x30
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[49] = scm_vm_eval_cdr
	mov____$i32,%eax &scm_vm_eval_cdr
	push___%eax
	mov____$i32,%eax %0x31
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[50] = scm_vm_eval_cons
	mov____$i32,%eax &scm_vm_eval_cons
	push___%eax
	mov____$i32,%eax %0x32
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[51] = scm_vm_eval_null_p
	mov____$i32,%eax &scm_vm_eval_null_p
	push___%eax
	mov____$i32,%eax %0x33
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[52] = scm_vm_eval_set_x
	mov____$i32,%eax &scm_vm_eval_set_x
	push___%eax
	mov____$i32,%eax %0x34
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[53] = scm_vm_eval_macro
	mov____$i32,%eax &scm_vm_eval_macro
	push___%eax
	mov____$i32,%eax %0x35
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[54] = scm_vm_eval_check_func
	mov____$i32,%eax &scm_vm_eval_check_func
	push___%eax
	mov____$i32,%eax %0x36
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[55] = scm_vm_eval2
	mov____$i32,%eax &scm_vm_eval2
	push___%eax
	mov____$i32,%eax %0x37
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[56] = scm_vm_macro_expand
	mov____$i32,%eax &scm_vm_macro_expand
	push___%eax
	mov____$i32,%eax %0x38
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[57] = scm_vm_begin
	mov____$i32,%eax &scm_vm_begin
	push___%eax
	mov____$i32,%eax %0x39
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[58] = scm_vm_begin_read_input_file
	mov____$i32,%eax &scm_vm_begin_read_input_file
	push___%eax
	mov____$i32,%eax %0x3a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[59] = scm_vm_begin2
	mov____$i32,%eax &scm_vm_begin2
	push___%eax
	mov____$i32,%eax %0x3b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[60] = scm_vm_if
	mov____$i32,%eax &scm_vm_if
	push___%eax
	mov____$i32,%eax %0x3c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[61] = scm_vm_if_expr
	mov____$i32,%eax &scm_vm_if_expr
	push___%eax
	mov____$i32,%eax %0x3d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[62] = scm_vm_call_with_values2
	mov____$i32,%eax &scm_vm_call_with_values2
	push___%eax
	mov____$i32,%eax %0x3e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[63] = scm_vm_call_with_current_continuation2
	mov____$i32,%eax &scm_vm_call_with_current_continuation2
	push___%eax
	mov____$i32,%eax %0x3f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[64] = scm_vm_return
	mov____$i32,%eax &scm_vm_return
	push___%eax
	mov____$i32,%eax %0x40
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[65] = scm_symbol_gnuc
	mov____$i32,%eax &scm_symbol_gnuc
	push___%eax
	mov____$i32,%eax %0x41
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[66] = scm_symbol_mesc
	mov____$i32,%eax &scm_symbol_mesc
	push___%eax
	mov____$i32,%eax %0x42
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
					# g_cells[67] = scm_test
	mov____$i32,%eax &scm_test
	push___%eax
	mov____$i32,%eax %0x43
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# g_symbol_max = g_free
	mov____0x32,%eax &g_free
	mov____%eax,0x32 &g_symbol_max
	test___%eax,%eax
					# make_tmps(g_cells); 
	mov____0x32,%eax &g_cells
	push___%eax
	call32 %make_tmps
	add____$i8,%esp !0x4
	test___%eax,%eax
					# g_symbols = 0
	mov____$i32,%eax %0x0
	mov____%eax,0x32 &g_symbols
	test___%eax,%eax
					# for (int i = 1; i < g_symbol_max; i++) ...
					# int i = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
	jmp32  %mes_symbols_1158_initial_skip
:mes_symbols_1158_loop
					# g_symbols = cons(i, g_symbols)
	mov____0x32,%eax &g_symbols
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_symbols
	test___%eax,%eax
:mes_symbols_1158_continue
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-4
	add____$i8,(%eax) !0x1
	pop____%eax
:mes_symbols_1158_initial_skip
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x32,%eax &g_symbol_max
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %mes_symbols_1158_break
	jmp32  %mes_symbols_1158_loop
:mes_symbols_1158_break
					# SCM a = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells[1].car = cstring_to_list(scm_nil.car)
	mov____$i32,%eax &scm_nil
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[2].car = cstring_to_list(scm_f.car)
	mov____$i32,%eax &scm_f
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[3].car = cstring_to_list(scm_t.car)
	mov____$i32,%eax &scm_t
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[4].car = cstring_to_list(scm_dot.car)
	mov____$i32,%eax &scm_dot
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[5].car = cstring_to_list(scm_arrow.car)
	mov____$i32,%eax &scm_arrow
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x5
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[6].car = cstring_to_list(scm_undefined.car)
	mov____$i32,%eax &scm_undefined
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[7].car = cstring_to_list(scm_unspecified.car)
	mov____$i32,%eax &scm_unspecified
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[8].car = cstring_to_list(scm_closure.car)
	mov____$i32,%eax &scm_closure
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[9].car = cstring_to_list(scm_circular.car)
	mov____$i32,%eax &scm_circular
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[10].car = cstring_to_list(scm_begin.car)
	mov____$i32,%eax &scm_begin
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[11].car = cstring_to_list(scm_symbol_dot.car)
	mov____$i32,%eax &scm_symbol_dot
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[12].car = cstring_to_list(scm_symbol_lambda.car)
	mov____$i32,%eax &scm_symbol_lambda
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[13].car = cstring_to_list(scm_symbol_begin.car)
	mov____$i32,%eax &scm_symbol_begin
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[14].car = cstring_to_list(scm_symbol_if.car)
	mov____$i32,%eax &scm_symbol_if
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xe
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[15].car = cstring_to_list(scm_symbol_quote.car)
	mov____$i32,%eax &scm_symbol_quote
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xf
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[16].car = cstring_to_list(scm_symbol_set_x.car)
	mov____$i32,%eax &scm_symbol_set_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x10
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[17].car = cstring_to_list(scm_symbol_sc_expand.car)
	mov____$i32,%eax &scm_symbol_sc_expand
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x11
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[18].car = cstring_to_list(scm_symbol_macro_expand.car)
	mov____$i32,%eax &scm_symbol_macro_expand
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x12
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[19].car = cstring_to_list(scm_symbol_sc_expander_alist.car)
	mov____$i32,%eax &scm_symbol_sc_expander_alist
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x13
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[20].car = cstring_to_list(scm_symbol_call_with_values.car)
	mov____$i32,%eax &scm_symbol_call_with_values
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x14
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[21].car = cstring_to_list(scm_call_with_current_continuation.car)
	mov____$i32,%eax &scm_call_with_current_continuation
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x15
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[22].car = cstring_to_list(scm_symbol_call_with_current_continuation.car     )
	mov____$i32,%eax &scm_symbol_call_with_current_continuation
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x16
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[23].car = cstring_to_list(scm_symbol_current_module.car)
	mov____$i32,%eax &scm_symbol_current_module
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x17
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[24].car = cstring_to_list(scm_symbol_primitive_load.car)
	mov____$i32,%eax &scm_symbol_primitive_load
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x18
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[25].car = cstring_to_list(scm_symbol_read_input_file.car)
	mov____$i32,%eax &scm_symbol_read_input_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x19
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[26].car = cstring_to_list(scm_symbol_write.car)
	mov____$i32,%eax &scm_symbol_write
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[27].car = cstring_to_list(scm_symbol_display.car)
	mov____$i32,%eax &scm_symbol_display
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[28].car = cstring_to_list(scm_symbol_throw.car)
	mov____$i32,%eax &scm_symbol_throw
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[29].car = cstring_to_list(scm_symbol_not_a_pair.car)
	mov____$i32,%eax &scm_symbol_not_a_pair
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[30].car = cstring_to_list(scm_symbol_system_error.car)
	mov____$i32,%eax &scm_symbol_system_error
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[31].car = cstring_to_list(scm_symbol_wrong_number_of_args.car)
	mov____$i32,%eax &scm_symbol_wrong_number_of_args
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[32].car = cstring_to_list(scm_symbol_wrong_type_arg.car)
	mov____$i32,%eax &scm_symbol_wrong_type_arg
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x20
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[33].car = cstring_to_list(scm_symbol_unbound_variable.car)
	mov____$i32,%eax &scm_symbol_unbound_variable
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x21
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[34].car = cstring_to_list(scm_symbol_argv.car)
	mov____$i32,%eax &scm_symbol_argv
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x22
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[35].car = cstring_to_list(scm_symbol_mes_prefix.car)
	mov____$i32,%eax &scm_symbol_mes_prefix
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x23
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[36].car = cstring_to_list(scm_symbol_mes_version.car)
	mov____$i32,%eax &scm_symbol_mes_version
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x24
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[37].car = cstring_to_list(scm_symbol_car.car)
	mov____$i32,%eax &scm_symbol_car
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x25
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[38].car = cstring_to_list(scm_symbol_cdr.car)
	mov____$i32,%eax &scm_symbol_cdr
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x26
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[39].car = cstring_to_list(scm_symbol_null_p.car)
	mov____$i32,%eax &scm_symbol_null_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x27
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[40].car = cstring_to_list(scm_symbol_eq_p.car)
	mov____$i32,%eax &scm_symbol_eq_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x28
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[41].car = cstring_to_list(scm_symbol_cons.car)
	mov____$i32,%eax &scm_symbol_cons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x29
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[42].car = cstring_to_list(scm_vm_evlis.car)
	mov____$i32,%eax &scm_vm_evlis
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[43].car = cstring_to_list(scm_vm_evlis2.car)
	mov____$i32,%eax &scm_vm_evlis2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[44].car = cstring_to_list(scm_vm_evlis3.car)
	mov____$i32,%eax &scm_vm_evlis3
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[45].car = cstring_to_list(scm_vm_apply.car)
	mov____$i32,%eax &scm_vm_apply
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[46].car = cstring_to_list(scm_vm_apply2.car)
	mov____$i32,%eax &scm_vm_apply2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[47].car = cstring_to_list(scm_vm_eval.car)
	mov____$i32,%eax &scm_vm_eval
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x2f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[48].car = cstring_to_list(scm_vm_eval_car.car)
	mov____$i32,%eax &scm_vm_eval_car
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x30
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[49].car = cstring_to_list(scm_vm_eval_cdr.car)
	mov____$i32,%eax &scm_vm_eval_cdr
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x31
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[50].car = cstring_to_list(scm_vm_eval_cons.car)
	mov____$i32,%eax &scm_vm_eval_cons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x32
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[51].car = cstring_to_list(scm_vm_eval_null_p.car)
	mov____$i32,%eax &scm_vm_eval_null_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x33
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[52].car = cstring_to_list(scm_vm_eval_set_x.car)
	mov____$i32,%eax &scm_vm_eval_set_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x34
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[53].car = cstring_to_list(scm_vm_eval_macro.car)
	mov____$i32,%eax &scm_vm_eval_macro
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x35
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[54].car = cstring_to_list(scm_vm_eval_check_func.car)
	mov____$i32,%eax &scm_vm_eval_check_func
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x36
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[55].car = cstring_to_list(scm_vm_eval2.car)
	mov____$i32,%eax &scm_vm_eval2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x37
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[56].car = cstring_to_list(scm_vm_macro_expand.car)
	mov____$i32,%eax &scm_vm_macro_expand
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x38
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[57].car = cstring_to_list(scm_vm_begin.car)
	mov____$i32,%eax &scm_vm_begin
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x39
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[58].car = cstring_to_list(scm_vm_begin_read_input_file.car)
	mov____$i32,%eax &scm_vm_begin_read_input_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3a
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[59].car = cstring_to_list(scm_vm_begin2.car)
	mov____$i32,%eax &scm_vm_begin2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3b
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[60].car = cstring_to_list(scm_vm_if.car)
	mov____$i32,%eax &scm_vm_if
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[61].car = cstring_to_list(scm_vm_if_expr.car)
	mov____$i32,%eax &scm_vm_if_expr
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3d
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[62].car = cstring_to_list(scm_vm_call_with_values2.car)
	mov____$i32,%eax &scm_vm_call_with_values2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3e
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[63].car = cstring_to_list(scm_vm_call_with_current_continuation2.car)
	mov____$i32,%eax &scm_vm_call_with_current_continuation2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x3f
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[64].car = cstring_to_list(scm_vm_return.car)
	mov____$i32,%eax &scm_vm_return
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x40
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[65].car = cstring_to_list(scm_symbol_gnuc.car)
	mov____$i32,%eax &scm_symbol_gnuc
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x41
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[66].car = cstring_to_list(scm_symbol_mesc.car)
	mov____$i32,%eax &scm_symbol_mesc
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x42
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[67].car = cstring_to_list(scm_test.car)
	mov____$i32,%eax &scm_test
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x43
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(36, make_cell_(tmp_num_(TSTRING), cstring_to_list("0.9"), 0), a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x0
	push___%eax
	push___$i32 &string_isxdigit_167
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____$i32,%eax %0x24
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(35, make_cell_(tmp_num_(TSTRING), cstring_to_list("tmp"), 0), a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x0
	push___%eax
	push___$i32 &string_isxdigit_168
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____$i32,%eax %0x23
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(11, 4, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x4
	push___%eax
	mov____$i32,%eax %0xb
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(13, 10, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0xa
	push___%eax
	mov____$i32,%eax %0xd
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(20, 20, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x14
	push___%eax
	mov____$i32,%eax %0x14
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(23, 23, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x17
	push___%eax
	mov____$i32,%eax %0x17
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(22, 21, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x15
	push___%eax
	mov____$i32,%eax %0x16
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(17, 2, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x2
	push___%eax
	mov____$i32,%eax %0x11
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(65, 2, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x2
	push___%eax
	mov____$i32,%eax %0x41
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(66, 3, a)
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x3
	push___%eax
	mov____$i32,%eax %0x42
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# a = acons(8, a, a)
	push___0x8(%ebp) !0x-4
	push___0x8(%ebp) !0x-4
	mov____$i32,%eax %0x8
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:mes_environment
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM a = mes_symbols(); 
	call32 %mes_symbols
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x-4
	push___0x8(%ebp) !0x-4
	call32 %mes_g_stack
	add____$i8,%esp !0x4
	leave
	ret


:mes_builtins
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# scm_make_cell_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_make_cell_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_make_cell_
	mov____$i32,%eax &fun_make_cell_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_make_cell_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_make_cell_
	test___%eax,%eax
					# g_cells[cell_make_cell_] = scm_make_cell_
	mov____$i32,%eax &scm_make_cell_
	push___%eax
	mov____0x32,%eax &cell_make_cell_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_lookup_symbol_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_lookup_symbol_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_lookup_symbol_
	mov____$i32,%eax &fun_lookup_symbol_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_lookup_symbol_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_lookup_symbol_
	test___%eax,%eax
					# g_cells[cell_lookup_symbol_] = scm_lookup_symbol_
	mov____$i32,%eax &scm_lookup_symbol_
	push___%eax
	mov____0x32,%eax &cell_lookup_symbol_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_type_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_type_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_type_
	mov____$i32,%eax &fun_type_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_type_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_type_
	test___%eax,%eax
					# g_cells[cell_type_] = scm_type_
	mov____$i32,%eax &scm_type_
	push___%eax
	mov____0x32,%eax &cell_type_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_car_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_car_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_car_
	mov____$i32,%eax &fun_car_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_car_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_car_
	test___%eax,%eax
					# g_cells[cell_car_] = scm_car_
	mov____$i32,%eax &scm_car_
	push___%eax
	mov____0x32,%eax &cell_car_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_cdr_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_cdr_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_cdr_
	mov____$i32,%eax &fun_cdr_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_cdr_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_cdr_
	test___%eax,%eax
					# g_cells[cell_cdr_] = scm_cdr_
	mov____$i32,%eax &scm_cdr_
	push___%eax
	mov____0x32,%eax &cell_cdr_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_arity_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_arity_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_arity_
	mov____$i32,%eax &fun_arity_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_arity_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_arity_
	test___%eax,%eax
					# g_cells[cell_arity_] = scm_arity_
	mov____$i32,%eax &scm_arity_
	push___%eax
	mov____0x32,%eax &cell_arity_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_cons.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_cons
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_cons
	mov____$i32,%eax &fun_cons
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_cons = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_cons
	test___%eax,%eax
					# g_cells[cell_cons] = scm_cons
	mov____$i32,%eax &scm_cons
	push___%eax
	mov____0x32,%eax &cell_cons
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_car.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_car
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_car
	mov____$i32,%eax &fun_car
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_car = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_car
	test___%eax,%eax
					# g_cells[cell_car] = scm_car
	mov____$i32,%eax &scm_car
	push___%eax
	mov____0x32,%eax &cell_car
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_cdr.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_cdr
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_cdr
	mov____$i32,%eax &fun_cdr
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_cdr = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_cdr
	test___%eax,%eax
					# g_cells[cell_cdr] = scm_cdr
	mov____$i32,%eax &scm_cdr
	push___%eax
	mov____0x32,%eax &cell_cdr
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_list.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_list
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_list
	mov____$i32,%eax &fun_list
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_list = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_list
	test___%eax,%eax
					# g_cells[cell_list] = scm_list
	mov____$i32,%eax &scm_list
	push___%eax
	mov____0x32,%eax &cell_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_null_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_null_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_null_p
	mov____$i32,%eax &fun_null_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_null_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_null_p
	test___%eax,%eax
					# g_cells[cell_null_p] = scm_null_p
	mov____$i32,%eax &scm_null_p
	push___%eax
	mov____0x32,%eax &cell_null_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_eq_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_eq_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_eq_p
	mov____$i32,%eax &fun_eq_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_eq_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_eq_p
	test___%eax,%eax
					# g_cells[cell_eq_p] = scm_eq_p
	mov____$i32,%eax &scm_eq_p
	push___%eax
	mov____0x32,%eax &cell_eq_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_values.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_values
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_values
	mov____$i32,%eax &fun_values
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_values = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_values
	test___%eax,%eax
					# g_cells[cell_values] = scm_values
	mov____$i32,%eax &scm_values
	push___%eax
	mov____0x32,%eax &cell_values
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_acons.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_acons
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_acons
	mov____$i32,%eax &fun_acons
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_acons = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_acons
	test___%eax,%eax
					# g_cells[cell_acons] = scm_acons
	mov____$i32,%eax &scm_acons
	push___%eax
	mov____0x32,%eax &cell_acons
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_length.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_length
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_length
	mov____$i32,%eax &fun_length
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_length = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_length
	test___%eax,%eax
					# g_cells[cell_length] = scm_length
	mov____$i32,%eax &scm_length
	push___%eax
	mov____0x32,%eax &cell_length
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_error.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_error
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_error
	mov____$i32,%eax &fun_error
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_error = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_error
	test___%eax,%eax
					# g_cells[cell_error] = scm_error
	mov____$i32,%eax &scm_error
	push___%eax
	mov____0x32,%eax &cell_error
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_append2.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_append2
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_append2
	mov____$i32,%eax &fun_append2
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_append2 = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_append2
	test___%eax,%eax
					# g_cells[cell_append2] = scm_append2
	mov____$i32,%eax &scm_append2
	push___%eax
	mov____0x32,%eax &cell_append2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_pairlis.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_pairlis
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_pairlis
	mov____$i32,%eax &fun_pairlis
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_pairlis = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_pairlis
	test___%eax,%eax
					# g_cells[cell_pairlis] = scm_pairlis
	mov____$i32,%eax &scm_pairlis
	push___%eax
	mov____0x32,%eax &cell_pairlis
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_call.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_call
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_call
	mov____$i32,%eax &fun_call
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_call = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_call
	test___%eax,%eax
					# g_cells[cell_call] = scm_call
	mov____$i32,%eax &scm_call
	push___%eax
	mov____0x32,%eax &cell_call
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_assq.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_assq
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_assq
	mov____$i32,%eax &fun_assq
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_assq = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_assq
	test___%eax,%eax
					# g_cells[cell_assq] = scm_assq
	mov____$i32,%eax &scm_assq
	push___%eax
	mov____0x32,%eax &cell_assq
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_assq_ref_env.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_assq_ref_env
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_assq_ref_env
	mov____$i32,%eax &fun_assq_ref_env
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_assq_ref_env = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_assq_ref_env
	test___%eax,%eax
					# g_cells[cell_assq_ref_env] = scm_assq_ref_env
	mov____$i32,%eax &scm_assq_ref_env
	push___%eax
	mov____0x32,%eax &cell_assq_ref_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_set_car_x.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_set_car_x
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_set_car_x
	mov____$i32,%eax &fun_set_car_x
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_set_car_x = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_set_car_x
	test___%eax,%eax
					# g_cells[cell_set_car_x] = scm_set_car_x
	mov____$i32,%eax &scm_set_car_x
	push___%eax
	mov____0x32,%eax &cell_set_car_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_set_cdr_x.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_set_cdr_x
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_set_cdr_x
	mov____$i32,%eax &fun_set_cdr_x
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_set_cdr_x = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_set_cdr_x
	test___%eax,%eax
					# g_cells[cell_set_cdr_x] = scm_set_cdr_x
	mov____$i32,%eax &scm_set_cdr_x
	push___%eax
	mov____0x32,%eax &cell_set_cdr_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_set_env_x.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_set_env_x
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_set_env_x
	mov____$i32,%eax &fun_set_env_x
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_set_env_x = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_set_env_x
	test___%eax,%eax
					# g_cells[cell_set_env_x] = scm_set_env_x
	mov____$i32,%eax &scm_set_env_x
	push___%eax
	mov____0x32,%eax &cell_set_env_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_eval_apply.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_eval_apply
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_eval_apply
	mov____$i32,%eax &fun_eval_apply
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_eval_apply = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_eval_apply
	test___%eax,%eax
					# g_cells[cell_eval_apply] = scm_eval_apply
	mov____$i32,%eax &scm_eval_apply
	push___%eax
	mov____0x32,%eax &cell_eval_apply
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_peek_byte.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_peek_byte
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_peek_byte
	mov____$i32,%eax &fun_peek_byte
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_peek_byte = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_peek_byte
	test___%eax,%eax
					# g_cells[cell_peek_byte] = scm_peek_byte
	mov____$i32,%eax &scm_peek_byte
	push___%eax
	mov____0x32,%eax &cell_peek_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_read_byte.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_read_byte
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_read_byte
	mov____$i32,%eax &fun_read_byte
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_read_byte = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_read_byte
	test___%eax,%eax
					# g_cells[cell_read_byte] = scm_read_byte
	mov____$i32,%eax &scm_read_byte
	push___%eax
	mov____0x32,%eax &cell_read_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_unread_byte.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_unread_byte
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_unread_byte
	mov____$i32,%eax &fun_unread_byte
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_unread_byte = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_unread_byte
	test___%eax,%eax
					# g_cells[cell_unread_byte] = scm_unread_byte
	mov____$i32,%eax &scm_unread_byte
	push___%eax
	mov____0x32,%eax &cell_unread_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_write_byte.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_write_byte
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_write_byte
	mov____$i32,%eax &fun_write_byte
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_write_byte = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_write_byte
	test___%eax,%eax
					# g_cells[cell_write_byte] = scm_write_byte
	mov____$i32,%eax &scm_write_byte
	push___%eax
	mov____0x32,%eax &cell_write_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_getenv_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_getenv_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_getenv_
	mov____$i32,%eax &fun_getenv_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_getenv_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_getenv_
	test___%eax,%eax
					# g_cells[cell_getenv_] = scm_getenv_
	mov____$i32,%eax &scm_getenv_
	push___%eax
	mov____0x32,%eax &cell_getenv_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_access_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_access_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_access_p
	mov____$i32,%eax &fun_access_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_access_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_access_p
	test___%eax,%eax
					# g_cells[cell_access_p] = scm_access_p
	mov____$i32,%eax &scm_access_p
	push___%eax
	mov____0x32,%eax &cell_access_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_current_input_port.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_current_input_port
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_current_input_port
	mov____$i32,%eax &fun_current_input_port
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_current_input_port = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_current_input_port
	test___%eax,%eax
					# g_cells[cell_current_input_port] = scm_current_input_port
	mov____$i32,%eax &scm_current_input_port
	push___%eax
	mov____0x32,%eax &cell_current_input_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_open_input_file.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_open_input_file
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_open_input_file
	mov____$i32,%eax &fun_open_input_file
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_open_input_file = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_open_input_file
	test___%eax,%eax
					# g_cells[cell_open_input_file] = scm_open_input_file
	mov____$i32,%eax &scm_open_input_file
	push___%eax
	mov____0x32,%eax &cell_open_input_file
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_set_current_input_port.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_set_current_input_port
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_set_current_input_port
	mov____$i32,%eax &fun_set_current_input_port
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_set_current_input_port = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_set_current_input_port
	test___%eax,%eax
					# g_cells[cell_set_current_input_port] = scm_set_current_input_port
	mov____$i32,%eax &scm_set_current_input_port
	push___%eax
	mov____0x32,%eax &cell_set_current_input_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_current_output_port.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_current_output_port
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_current_output_port
	mov____$i32,%eax &fun_current_output_port
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_current_output_port = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_current_output_port
	test___%eax,%eax
					# g_cells[cell_current_output_port] = scm_current_output_port
	mov____$i32,%eax &scm_current_output_port
	push___%eax
	mov____0x32,%eax &cell_current_output_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_open_output_file.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_open_output_file
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_open_output_file
	mov____$i32,%eax &fun_open_output_file
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_open_output_file = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_open_output_file
	test___%eax,%eax
					# g_cells[cell_open_output_file] = scm_open_output_file
	mov____$i32,%eax &scm_open_output_file
	push___%eax
	mov____0x32,%eax &cell_open_output_file
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_set_current_output_port.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_set_current_output_port
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_set_current_output_port
	mov____$i32,%eax &fun_set_current_output_port
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_set_current_output_port = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_set_current_output_port
	test___%eax,%eax
					# g_cells[cell_set_current_output_port] = scm_set_current_output_port
	mov____$i32,%eax &scm_set_current_output_port
	push___%eax
	mov____0x32,%eax &cell_set_current_output_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_force_output.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_force_output
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_force_output
	mov____$i32,%eax &fun_force_output
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_force_output = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_force_output
	test___%eax,%eax
					# g_cells[cell_force_output] = scm_force_output
	mov____$i32,%eax &scm_force_output
	push___%eax
	mov____0x32,%eax &cell_force_output
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_greater_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_greater_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_greater_p
	mov____$i32,%eax &fun_greater_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_greater_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_greater_p
	test___%eax,%eax
					# g_cells[cell_greater_p] = scm_greater_p
	mov____$i32,%eax &scm_greater_p
	push___%eax
	mov____0x32,%eax &cell_greater_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_less_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_less_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_less_p
	mov____$i32,%eax &fun_less_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_less_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_less_p
	test___%eax,%eax
					# g_cells[cell_less_p] = scm_less_p
	mov____$i32,%eax &scm_less_p
	push___%eax
	mov____0x32,%eax &cell_less_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_is_p.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_is_p
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_is_p
	mov____$i32,%eax &fun_is_p
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_is_p = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_is_p
	test___%eax,%eax
					# g_cells[cell_is_p] = scm_is_p
	mov____$i32,%eax &scm_is_p
	push___%eax
	mov____0x32,%eax &cell_is_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_minus.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_minus
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_minus
	mov____$i32,%eax &fun_minus
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_minus = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_minus
	test___%eax,%eax
					# g_cells[cell_minus] = scm_minus
	mov____$i32,%eax &scm_minus
	push___%eax
	mov____0x32,%eax &cell_minus
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_plus.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_plus
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_plus
	mov____$i32,%eax &fun_plus
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_plus = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_plus
	test___%eax,%eax
					# g_cells[cell_plus] = scm_plus
	mov____$i32,%eax &scm_plus
	push___%eax
	mov____0x32,%eax &cell_plus
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_divide.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_divide
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_divide
	mov____$i32,%eax &fun_divide
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_divide = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_divide
	test___%eax,%eax
					# g_cells[cell_divide] = scm_divide
	mov____$i32,%eax &scm_divide
	push___%eax
	mov____0x32,%eax &cell_divide
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_modulo.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_modulo
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_modulo
	mov____$i32,%eax &fun_modulo
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_modulo = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_modulo
	test___%eax,%eax
					# g_cells[cell_modulo] = scm_modulo
	mov____$i32,%eax &scm_modulo
	push___%eax
	mov____0x32,%eax &cell_modulo
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_multiply.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_multiply
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_multiply
	mov____$i32,%eax &fun_multiply
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_multiply = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_multiply
	test___%eax,%eax
					# g_cells[cell_multiply] = scm_multiply
	mov____$i32,%eax &scm_multiply
	push___%eax
	mov____0x32,%eax &cell_multiply
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_logand.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_logand
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_logand
	mov____$i32,%eax &fun_logand
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_logand = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_logand
	test___%eax,%eax
					# g_cells[cell_logand] = scm_logand
	mov____$i32,%eax &scm_logand
	push___%eax
	mov____0x32,%eax &cell_logand
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_logior.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_logior
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_logior
	mov____$i32,%eax &fun_logior
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_logior = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_logior
	test___%eax,%eax
					# g_cells[cell_logior] = scm_logior
	mov____$i32,%eax &scm_logior
	push___%eax
	mov____0x32,%eax &cell_logior
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_lognot.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_lognot
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_lognot
	mov____$i32,%eax &fun_lognot
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_lognot = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_lognot
	test___%eax,%eax
					# g_cells[cell_lognot] = scm_lognot
	mov____$i32,%eax &scm_lognot
	push___%eax
	mov____0x32,%eax &cell_lognot
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_ash.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_ash
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_ash
	mov____$i32,%eax &fun_ash
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_ash = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_ash
	test___%eax,%eax
					# g_cells[cell_ash] = scm_ash
	mov____$i32,%eax &scm_ash
	push___%eax
	mov____0x32,%eax &cell_ash
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_display_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_display_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_display_
	mov____$i32,%eax &fun_display_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_display_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_display_
	test___%eax,%eax
					# g_cells[cell_display_] = scm_display_
	mov____$i32,%eax &scm_display_
	push___%eax
	mov____0x32,%eax &cell_display_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_display_error_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_display_error_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_display_error_
	mov____$i32,%eax &fun_display_error_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_display_error_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_display_error_
	test___%eax,%eax
					# g_cells[cell_display_error_] = scm_display_error_
	mov____$i32,%eax &scm_display_error_
	push___%eax
	mov____0x32,%eax &cell_display_error_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_exit_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_exit_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_exit_
	mov____$i32,%eax &fun_exit_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_exit_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_exit_
	test___%eax,%eax
					# g_cells[cell_exit_] = scm_exit_
	mov____$i32,%eax &scm_exit_
	push___%eax
	mov____0x32,%eax &cell_exit_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_xassq.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_xassq
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_xassq
	mov____$i32,%eax &fun_xassq
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_xassq = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_xassq
	test___%eax,%eax
					# g_cells[cell_xassq] = scm_xassq
	mov____$i32,%eax &scm_xassq
	push___%eax
	mov____0x32,%eax &cell_xassq
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_make_vector.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_make_vector
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_make_vector
	mov____$i32,%eax &fun_make_vector
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_make_vector = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_make_vector
	test___%eax,%eax
					# g_cells[cell_make_vector] = scm_make_vector
	mov____$i32,%eax &scm_make_vector
	push___%eax
	mov____0x32,%eax &cell_make_vector
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_vector_length.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_vector_length
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_vector_length
	mov____$i32,%eax &fun_vector_length
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_vector_length = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_vector_length
	test___%eax,%eax
					# g_cells[cell_vector_length] = scm_vector_length
	mov____$i32,%eax &scm_vector_length
	push___%eax
	mov____0x32,%eax &cell_vector_length
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_vector_ref.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_vector_ref
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_vector_ref
	mov____$i32,%eax &fun_vector_ref
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_vector_ref = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_vector_ref
	test___%eax,%eax
					# g_cells[cell_vector_ref] = scm_vector_ref
	mov____$i32,%eax &scm_vector_ref
	push___%eax
	mov____0x32,%eax &cell_vector_ref
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_vector_entry.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_vector_entry
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_vector_entry
	mov____$i32,%eax &fun_vector_entry
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_vector_entry = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_vector_entry
	test___%eax,%eax
					# g_cells[cell_vector_entry] = scm_vector_entry
	mov____$i32,%eax &scm_vector_entry
	push___%eax
	mov____0x32,%eax &cell_vector_entry
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_vector_set_x.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_vector_set_x
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_vector_set_x
	mov____$i32,%eax &fun_vector_set_x
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_vector_set_x = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_vector_set_x
	test___%eax,%eax
					# g_cells[cell_vector_set_x] = scm_vector_set_x
	mov____$i32,%eax &scm_vector_set_x
	push___%eax
	mov____0x32,%eax &cell_vector_set_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_list_to_vector.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_list_to_vector
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_list_to_vector
	mov____$i32,%eax &fun_list_to_vector
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_list_to_vector = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_list_to_vector
	test___%eax,%eax
					# g_cells[cell_list_to_vector] = scm_list_to_vector
	mov____$i32,%eax &scm_list_to_vector
	push___%eax
	mov____0x32,%eax &cell_list_to_vector
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_vector_to_list.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_vector_to_list
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_vector_to_list
	mov____$i32,%eax &fun_vector_to_list
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_vector_to_list = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_vector_to_list
	test___%eax,%eax
					# g_cells[cell_vector_to_list] = scm_vector_to_list
	mov____$i32,%eax &scm_vector_to_list
	push___%eax
	mov____0x32,%eax &cell_vector_to_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_gc_check.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_gc_check
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_gc_check
	mov____$i32,%eax &fun_gc_check
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_gc_check = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_gc_check
	test___%eax,%eax
					# g_cells[cell_gc_check] = scm_gc_check
	mov____$i32,%eax &scm_gc_check
	push___%eax
	mov____0x32,%eax &cell_gc_check
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_gc.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_gc
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_gc
	mov____$i32,%eax &fun_gc
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_gc = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_gc
	test___%eax,%eax
					# g_cells[cell_gc] = scm_gc
	mov____$i32,%eax &scm_gc
	push___%eax
	mov____0x32,%eax &cell_gc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_read_input_file_env_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_read_input_file_env_
	mov____$i32,%eax &fun_read_input_file_env_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_read_input_file_env_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_read_input_file_env_
	test___%eax,%eax
					# g_cells[cell_read_input_file_env_] = scm_read_input_file_env_
	mov____$i32,%eax &scm_read_input_file_env_
	push___%eax
	mov____0x32,%eax &cell_read_input_file_env_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_read_input_file_env.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_read_input_file_env
	mov____$i32,%eax &fun_read_input_file_env
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_read_input_file_env = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_read_input_file_env
	test___%eax,%eax
					# g_cells[cell_read_input_file_env] = scm_read_input_file_env
	mov____$i32,%eax &scm_read_input_file_env
	push___%eax
	mov____0x32,%eax &cell_read_input_file_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_read_list.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_read_list
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_read_list
	mov____$i32,%eax &fun_read_list
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_read_list = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_read_list
	test___%eax,%eax
					# g_cells[cell_read_list] = scm_read_list
	mov____$i32,%eax &scm_read_list
	push___%eax
	mov____0x32,%eax &cell_read_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_read_env.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_read_env
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_read_env
	mov____$i32,%eax &fun_read_env
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_read_env = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_read_env
	test___%eax,%eax
					# g_cells[cell_read_env] = scm_read_env
	mov____$i32,%eax &scm_read_env
	push___%eax
	mov____0x32,%eax &cell_read_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_lookup_.cdr = g_function
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &scm_lookup_
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_functions[g_function++] = fun_lookup_
	mov____$i32,%eax &fun_lookup_
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	mov____$i32,%eax &g_function
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# cell_lookup_ = g_free++
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x32 &cell_lookup_
	test___%eax,%eax
					# g_cells[cell_lookup_] = scm_lookup_
	mov____$i32,%eax &scm_lookup_
	push___%eax
	mov____0x32,%eax &cell_lookup_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# scm_gc_check.car = cstring_to_list(fun_gc_check.name)
	mov____$i32,%eax &fun_gc_check
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_gc_check
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_gc_check].car = make_cell_(tmp_num_(TSTRING), scm_gc_check.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_gc_check
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_gc_check
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_gc_check.car), cell_gc_check, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_gc_check
	push___%eax
	mov____$i32,%eax &scm_gc_check
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_gc.car = cstring_to_list(fun_gc.name)
	mov____$i32,%eax &fun_gc
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_gc
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_gc].car = make_cell_(tmp_num_(TSTRING), scm_gc.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_gc
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_gc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_gc.car), cell_gc, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_gc
	push___%eax
	mov____$i32,%eax &scm_gc
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_display_.car = cstring_to_list(fun_display_.name)
	mov____$i32,%eax &fun_display_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_display_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_display_].car = make_cell_(tmp_num_(TSTRING), scm_display_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_display_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_display_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_display_.car), cell_display_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_display_
	push___%eax
	mov____$i32,%eax &scm_display_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_display_error_.car = cstring_to_list(fun_display_error_.name)
	mov____$i32,%eax &fun_display_error_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_display_error_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_display_error_].car = make_cell_(tmp_num_(TSTRING),      scm_display_error_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_display_error_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_display_error_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_display_error_.car), cell_display_error_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_display_error_
	push___%eax
	mov____$i32,%eax &scm_display_error_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_exit_.car = cstring_to_list(fun_exit_.name)
	mov____$i32,%eax &fun_exit_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_exit_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_exit_].car = make_cell_(tmp_num_(TSTRING), scm_exit_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_exit_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_exit_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_exit_.car), cell_exit_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_exit_
	push___%eax
	mov____$i32,%eax &scm_exit_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_xassq.car = cstring_to_list(fun_xassq.name)
	mov____$i32,%eax &fun_xassq
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_xassq
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_xassq].car = make_cell_(tmp_num_(TSTRING), scm_xassq.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_xassq
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_xassq
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_xassq.car), cell_xassq, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_xassq
	push___%eax
	mov____$i32,%eax &scm_xassq
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_greater_p.car = cstring_to_list(fun_greater_p.name)
	mov____$i32,%eax &fun_greater_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_greater_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_greater_p].car = make_cell_(tmp_num_(TSTRING), scm_greater_p.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_greater_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_greater_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_greater_p.car), cell_greater_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_greater_p
	push___%eax
	mov____$i32,%eax &scm_greater_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_less_p.car = cstring_to_list(fun_less_p.name)
	mov____$i32,%eax &fun_less_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_less_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_less_p].car = make_cell_(tmp_num_(TSTRING), scm_less_p.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_less_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_less_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_less_p.car), cell_less_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_less_p
	push___%eax
	mov____$i32,%eax &scm_less_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_is_p.car = cstring_to_list(fun_is_p.name)
	mov____$i32,%eax &fun_is_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_is_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_is_p].car = make_cell_(tmp_num_(TSTRING), scm_is_p.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_is_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_is_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_is_p.car), cell_is_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_is_p
	push___%eax
	mov____$i32,%eax &scm_is_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_minus.car = cstring_to_list(fun_minus.name)
	mov____$i32,%eax &fun_minus
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_minus
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_minus].car = make_cell_(tmp_num_(TSTRING), scm_minus.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_minus
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_minus
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_minus.car), cell_minus, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_minus
	push___%eax
	mov____$i32,%eax &scm_minus
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_plus.car = cstring_to_list(fun_plus.name)
	mov____$i32,%eax &fun_plus
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_plus
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_plus].car = make_cell_(tmp_num_(TSTRING), scm_plus.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_plus
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_plus
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_plus.car), cell_plus, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_plus
	push___%eax
	mov____$i32,%eax &scm_plus
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_divide.car = cstring_to_list(fun_divide.name)
	mov____$i32,%eax &fun_divide
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_divide
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_divide].car = make_cell_(tmp_num_(TSTRING), scm_divide.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_divide
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_divide
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_divide.car), cell_divide, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_divide
	push___%eax
	mov____$i32,%eax &scm_divide
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_modulo.car = cstring_to_list(fun_modulo.name)
	mov____$i32,%eax &fun_modulo
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_modulo
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_modulo].car = make_cell_(tmp_num_(TSTRING), scm_modulo.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_modulo
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_modulo
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_modulo.car), cell_modulo, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_modulo
	push___%eax
	mov____$i32,%eax &scm_modulo
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_multiply.car = cstring_to_list(fun_multiply.name)
	mov____$i32,%eax &fun_multiply
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_multiply
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_multiply].car = make_cell_(tmp_num_(TSTRING), scm_multiply.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_multiply
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_multiply
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_multiply.car), cell_multiply, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_multiply
	push___%eax
	mov____$i32,%eax &scm_multiply
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_logand.car = cstring_to_list(fun_logand.name)
	mov____$i32,%eax &fun_logand
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_logand
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_logand].car = make_cell_(tmp_num_(TSTRING), scm_logand.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_logand
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_logand
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_logand.car), cell_logand, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_logand
	push___%eax
	mov____$i32,%eax &scm_logand
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_logior.car = cstring_to_list(fun_logior.name)
	mov____$i32,%eax &fun_logior
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_logior
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_logior].car = make_cell_(tmp_num_(TSTRING), scm_logior.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_logior
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_logior
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_logior.car), cell_logior, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_logior
	push___%eax
	mov____$i32,%eax &scm_logior
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_lognot.car = cstring_to_list(fun_lognot.name)
	mov____$i32,%eax &fun_lognot
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_lognot
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_lognot].car = make_cell_(tmp_num_(TSTRING), scm_lognot.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_lognot
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_lognot
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_lognot.car), cell_lognot, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_lognot
	push___%eax
	mov____$i32,%eax &scm_lognot
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_ash.car = cstring_to_list(fun_ash.name)
	mov____$i32,%eax &fun_ash
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_ash
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_ash].car = make_cell_(tmp_num_(TSTRING), scm_ash.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_ash
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_ash
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_ash.car), cell_ash, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_ash
	push___%eax
	mov____$i32,%eax &scm_ash
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_make_cell_.car = cstring_to_list(fun_make_cell_.name)
	mov____$i32,%eax &fun_make_cell_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_make_cell_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_make_cell_].car = make_cell_(tmp_num_(TSTRING), scm_make_cell_.car     , 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_make_cell_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_make_cell_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_make_cell_.car), cell_make_cell_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_make_cell_
	push___%eax
	mov____$i32,%eax &scm_make_cell_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_lookup_symbol_.car = cstring_to_list(fun_lookup_symbol_.name)
	mov____$i32,%eax &fun_lookup_symbol_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_lookup_symbol_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_lookup_symbol_].car = make_cell_(tmp_num_(TSTRING),      scm_lookup_symbol_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_lookup_symbol_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_lookup_symbol_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_lookup_symbol_.car), cell_lookup_symbol_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_lookup_symbol_
	push___%eax
	mov____$i32,%eax &scm_lookup_symbol_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_type_.car = cstring_to_list(fun_type_.name)
	mov____$i32,%eax &fun_type_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_type_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_type_].car = make_cell_(tmp_num_(TSTRING), scm_type_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_type_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_type_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_type_.car), cell_type_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_type_
	push___%eax
	mov____$i32,%eax &scm_type_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_car_.car = cstring_to_list(fun_car_.name)
	mov____$i32,%eax &fun_car_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_car_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_car_].car = make_cell_(tmp_num_(TSTRING), scm_car_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_car_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_car_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_car_.car), cell_car_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_car_
	push___%eax
	mov____$i32,%eax &scm_car_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_cdr_.car = cstring_to_list(fun_cdr_.name)
	mov____$i32,%eax &fun_cdr_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_cdr_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_cdr_].car = make_cell_(tmp_num_(TSTRING), scm_cdr_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_cdr_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_cdr_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_cdr_.car), cell_cdr_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_cdr_
	push___%eax
	mov____$i32,%eax &scm_cdr_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_arity_.car = cstring_to_list(fun_arity_.name)
	mov____$i32,%eax &fun_arity_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_arity_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_arity_].car = make_cell_(tmp_num_(TSTRING), scm_arity_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_arity_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_arity_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_arity_.car), cell_arity_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_arity_
	push___%eax
	mov____$i32,%eax &scm_arity_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_cons.car = cstring_to_list(fun_cons.name)
	mov____$i32,%eax &fun_cons
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_cons
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_cons].car = make_cell_(tmp_num_(TSTRING), scm_cons.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_cons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_cons
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_cons.car), cell_cons, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_cons
	push___%eax
	mov____$i32,%eax &scm_cons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_car.car = cstring_to_list(fun_car.name)
	mov____$i32,%eax &fun_car
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_car
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_car].car = make_cell_(tmp_num_(TSTRING), scm_car.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_car
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_car
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_car.car), cell_car, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_car
	push___%eax
	mov____$i32,%eax &scm_car
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_cdr.car = cstring_to_list(fun_cdr.name)
	mov____$i32,%eax &fun_cdr
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_cdr
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_cdr].car = make_cell_(tmp_num_(TSTRING), scm_cdr.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_cdr
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_cdr
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_cdr.car), cell_cdr, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_cdr
	push___%eax
	mov____$i32,%eax &scm_cdr
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_list.car = cstring_to_list(fun_list.name)
	mov____$i32,%eax &fun_list
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_list
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_list].car = make_cell_(tmp_num_(TSTRING), scm_list.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_list.car), cell_list, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_list
	push___%eax
	mov____$i32,%eax &scm_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_null_p.car = cstring_to_list(fun_null_p.name)
	mov____$i32,%eax &fun_null_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_null_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_null_p].car = make_cell_(tmp_num_(TSTRING), scm_null_p.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_null_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_null_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_null_p.car), cell_null_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_null_p
	push___%eax
	mov____$i32,%eax &scm_null_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_eq_p.car = cstring_to_list(fun_eq_p.name)
	mov____$i32,%eax &fun_eq_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_eq_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_eq_p].car = make_cell_(tmp_num_(TSTRING), scm_eq_p.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_eq_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_eq_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_eq_p.car), cell_eq_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_eq_p
	push___%eax
	mov____$i32,%eax &scm_eq_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_values.car = cstring_to_list(fun_values.name)
	mov____$i32,%eax &fun_values
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_values
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_values].car = make_cell_(tmp_num_(TSTRING), scm_values.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_values
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_values
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_values.car), cell_values, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_values
	push___%eax
	mov____$i32,%eax &scm_values
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_acons.car = cstring_to_list(fun_acons.name)
	mov____$i32,%eax &fun_acons
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_acons
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_acons].car = make_cell_(tmp_num_(TSTRING), scm_acons.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_acons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_acons
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_acons.car), cell_acons, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_acons
	push___%eax
	mov____$i32,%eax &scm_acons
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_length.car = cstring_to_list(fun_length.name)
	mov____$i32,%eax &fun_length
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_length
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_length].car = make_cell_(tmp_num_(TSTRING), scm_length.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_length
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_length
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_length.car), cell_length, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_length
	push___%eax
	mov____$i32,%eax &scm_length
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_error.car = cstring_to_list(fun_error.name)
	mov____$i32,%eax &fun_error
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_error
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_error].car = make_cell_(tmp_num_(TSTRING), scm_error.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_error
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_error
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_error.car), cell_error, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_error
	push___%eax
	mov____$i32,%eax &scm_error
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_append2.car = cstring_to_list(fun_append2.name)
	mov____$i32,%eax &fun_append2
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_append2
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_append2].car = make_cell_(tmp_num_(TSTRING), scm_append2.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_append2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_append2
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_append2.car), cell_append2, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_append2
	push___%eax
	mov____$i32,%eax &scm_append2
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_pairlis.car = cstring_to_list(fun_pairlis.name)
	mov____$i32,%eax &fun_pairlis
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_pairlis
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_pairlis].car = make_cell_(tmp_num_(TSTRING), scm_pairlis.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_pairlis
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_pairlis
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_pairlis.car), cell_pairlis, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_pairlis
	push___%eax
	mov____$i32,%eax &scm_pairlis
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_call.car = cstring_to_list(fun_call.name)
	mov____$i32,%eax &fun_call
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_call
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_call].car = make_cell_(tmp_num_(TSTRING), scm_call.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_call
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_call
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_call.car), cell_call, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_call
	push___%eax
	mov____$i32,%eax &scm_call
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_assq.car = cstring_to_list(fun_assq.name)
	mov____$i32,%eax &fun_assq
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_assq
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_assq].car = make_cell_(tmp_num_(TSTRING), scm_assq.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_assq
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_assq
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_assq.car), cell_assq, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_assq
	push___%eax
	mov____$i32,%eax &scm_assq
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_assq_ref_env.car = cstring_to_list(fun_assq_ref_env.name)
	mov____$i32,%eax &fun_assq_ref_env
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_assq_ref_env
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_assq_ref_env].car = make_cell_(tmp_num_(TSTRING), scm_assq_ref_env     .car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_assq_ref_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_assq_ref_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_assq_ref_env.car), cell_assq_ref_env, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_assq_ref_env
	push___%eax
	mov____$i32,%eax &scm_assq_ref_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_set_car_x.car = cstring_to_list(fun_set_car_x.name)
	mov____$i32,%eax &fun_set_car_x
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_set_car_x
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_set_car_x].car = make_cell_(tmp_num_(TSTRING), scm_set_car_x.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_set_car_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_set_car_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_set_car_x.car), cell_set_car_x, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_set_car_x
	push___%eax
	mov____$i32,%eax &scm_set_car_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_set_cdr_x.car = cstring_to_list(fun_set_cdr_x.name)
	mov____$i32,%eax &fun_set_cdr_x
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_set_cdr_x
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_set_cdr_x].car = make_cell_(tmp_num_(TSTRING), scm_set_cdr_x.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_set_cdr_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_set_cdr_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_set_cdr_x.car), cell_set_cdr_x, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_set_cdr_x
	push___%eax
	mov____$i32,%eax &scm_set_cdr_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_set_env_x.car = cstring_to_list(fun_set_env_x.name)
	mov____$i32,%eax &fun_set_env_x
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_set_env_x
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_set_env_x].car = make_cell_(tmp_num_(TSTRING), scm_set_env_x.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_set_env_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_set_env_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_set_env_x.car), cell_set_env_x, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_set_env_x
	push___%eax
	mov____$i32,%eax &scm_set_env_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_eval_apply.car = cstring_to_list(fun_eval_apply.name)
	mov____$i32,%eax &fun_eval_apply
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_eval_apply
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_eval_apply].car = make_cell_(tmp_num_(TSTRING), scm_eval_apply.car     , 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_eval_apply
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_eval_apply
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_eval_apply.car), cell_eval_apply, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_eval_apply
	push___%eax
	mov____$i32,%eax &scm_eval_apply
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_peek_byte.car = cstring_to_list(fun_peek_byte.name)
	mov____$i32,%eax &fun_peek_byte
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_peek_byte
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_peek_byte].car = make_cell_(tmp_num_(TSTRING), scm_peek_byte.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_peek_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_peek_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_peek_byte.car), cell_peek_byte, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_peek_byte
	push___%eax
	mov____$i32,%eax &scm_peek_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_read_byte.car = cstring_to_list(fun_read_byte.name)
	mov____$i32,%eax &fun_read_byte
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_read_byte
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_read_byte].car = make_cell_(tmp_num_(TSTRING), scm_read_byte.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_read_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_read_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_read_byte.car), cell_read_byte, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_read_byte
	push___%eax
	mov____$i32,%eax &scm_read_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_unread_byte.car = cstring_to_list(fun_unread_byte.name)
	mov____$i32,%eax &fun_unread_byte
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_unread_byte
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_unread_byte].car = make_cell_(tmp_num_(TSTRING), scm_unread_byte.     car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_unread_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_unread_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_unread_byte.car), cell_unread_byte, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_unread_byte
	push___%eax
	mov____$i32,%eax &scm_unread_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_write_byte.car = cstring_to_list(fun_write_byte.name)
	mov____$i32,%eax &fun_write_byte
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_write_byte
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_write_byte].car = make_cell_(tmp_num_(TSTRING), scm_write_byte.car     , 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_write_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_write_byte
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_write_byte.car), cell_write_byte, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_write_byte
	push___%eax
	mov____$i32,%eax &scm_write_byte
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_getenv_.car = cstring_to_list(fun_getenv_.name)
	mov____$i32,%eax &fun_getenv_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_getenv_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_getenv_].car = make_cell_(tmp_num_(TSTRING), scm_getenv_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_getenv_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_getenv_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_getenv_.car), cell_getenv_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_getenv_
	push___%eax
	mov____$i32,%eax &scm_getenv_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_access_p.car = cstring_to_list(fun_access_p.name)
	mov____$i32,%eax &fun_access_p
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_access_p
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_access_p].car = make_cell_(tmp_num_(TSTRING), scm_access_p.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_access_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_access_p
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_access_p.car), cell_access_p, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_access_p
	push___%eax
	mov____$i32,%eax &scm_access_p
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_current_input_port.car = cstring_to_list(fun_current_input_port.name)
	mov____$i32,%eax &fun_current_input_port
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_current_input_port
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_current_input_port].car = make_cell_(tmp_num_(TSTRING),      scm_current_input_port.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_current_input_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_current_input_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_current_input_port.car), cell_current_input_port,      a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_current_input_port
	push___%eax
	mov____$i32,%eax &scm_current_input_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_open_input_file.car = cstring_to_list(fun_open_input_file.name)
	mov____$i32,%eax &fun_open_input_file
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_open_input_file
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_open_input_file].car = make_cell_(tmp_num_(TSTRING),      scm_open_input_file.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_open_input_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_open_input_file
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_open_input_file.car), cell_open_input_file, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_open_input_file
	push___%eax
	mov____$i32,%eax &scm_open_input_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_set_current_input_port.car = cstring_to_list(fun_set_current_input_port.     name)
	mov____$i32,%eax &fun_set_current_input_port
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_set_current_input_port
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_set_current_input_port].car = make_cell_(tmp_num_(TSTRING),      scm_set_current_input_port.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_set_current_input_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_set_current_input_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_set_current_input_port.car),      cell_set_current_input_port, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_set_current_input_port
	push___%eax
	mov____$i32,%eax &scm_set_current_input_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_current_output_port.car = cstring_to_list(fun_current_output_port.name)
	mov____$i32,%eax &fun_current_output_port
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_current_output_port
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_current_output_port].car = make_cell_(tmp_num_(TSTRING),      scm_current_output_port.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_current_output_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_current_output_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_current_output_port.car), cell_current_output_port     , a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_current_output_port
	push___%eax
	mov____$i32,%eax &scm_current_output_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_open_output_file.car = cstring_to_list(fun_open_output_file.name)
	mov____$i32,%eax &fun_open_output_file
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_open_output_file
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_open_output_file].car = make_cell_(tmp_num_(TSTRING),      scm_open_output_file.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_open_output_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_open_output_file
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_open_output_file.car), cell_open_output_file, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_open_output_file
	push___%eax
	mov____$i32,%eax &scm_open_output_file
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_set_current_output_port.car = cstring_to_list(fun_set_current_output_port.     name)
	mov____$i32,%eax &fun_set_current_output_port
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_set_current_output_port
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_set_current_output_port].car = make_cell_(tmp_num_(TSTRING),      scm_set_current_output_port.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_set_current_output_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_set_current_output_port
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_set_current_output_port.car),      cell_set_current_output_port, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_set_current_output_port
	push___%eax
	mov____$i32,%eax &scm_set_current_output_port
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_force_output.car = cstring_to_list(fun_force_output.name)
	mov____$i32,%eax &fun_force_output
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_force_output
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_force_output].car = make_cell_(tmp_num_(TSTRING), scm_force_output     .car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_force_output
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_force_output
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_force_output.car), cell_force_output, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_force_output
	push___%eax
	mov____$i32,%eax &scm_force_output
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_read_input_file_env_.car = cstring_to_list(fun_read_input_file_env_.name)
	mov____$i32,%eax &fun_read_input_file_env_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_read_input_file_env_].car = make_cell_(tmp_num_(TSTRING),      scm_read_input_file_env_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_read_input_file_env_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_read_input_file_env_.car),      cell_read_input_file_env_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_read_input_file_env_
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_read_input_file_env.car = cstring_to_list(fun_read_input_file_env.name)
	mov____$i32,%eax &fun_read_input_file_env
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_read_input_file_env].car = make_cell_(tmp_num_(TSTRING),      scm_read_input_file_env.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_read_input_file_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_read_input_file_env.car), cell_read_input_file_env     , a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_read_input_file_env
	push___%eax
	mov____$i32,%eax &scm_read_input_file_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_read_list.car = cstring_to_list(fun_read_list.name)
	mov____$i32,%eax &fun_read_list
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_read_list
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_read_list].car = make_cell_(tmp_num_(TSTRING), scm_read_list.car,      0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_read_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_read_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_read_list.car), cell_read_list, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_read_list
	push___%eax
	mov____$i32,%eax &scm_read_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_read_env.car = cstring_to_list(fun_read_env.name)
	mov____$i32,%eax &fun_read_env
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_read_env
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_read_env].car = make_cell_(tmp_num_(TSTRING), scm_read_env.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_read_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_read_env
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_read_env.car), cell_read_env, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_read_env
	push___%eax
	mov____$i32,%eax &scm_read_env
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_lookup_.car = cstring_to_list(fun_lookup_.name)
	mov____$i32,%eax &fun_lookup_
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_lookup_
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_lookup_].car = make_cell_(tmp_num_(TSTRING), scm_lookup_.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_lookup_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_lookup_
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_lookup_.car), cell_lookup_, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_lookup_
	push___%eax
	mov____$i32,%eax &scm_lookup_
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_make_vector.car = cstring_to_list(fun_make_vector.name)
	mov____$i32,%eax &fun_make_vector
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_make_vector
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_make_vector].car = make_cell_(tmp_num_(TSTRING), scm_make_vector.     car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_make_vector
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_make_vector
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_make_vector.car), cell_make_vector, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_make_vector
	push___%eax
	mov____$i32,%eax &scm_make_vector
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_vector_length.car = cstring_to_list(fun_vector_length.name)
	mov____$i32,%eax &fun_vector_length
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_vector_length
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_vector_length].car = make_cell_(tmp_num_(TSTRING),      scm_vector_length.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_vector_length
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_vector_length
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_vector_length.car), cell_vector_length, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_vector_length
	push___%eax
	mov____$i32,%eax &scm_vector_length
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_vector_ref.car = cstring_to_list(fun_vector_ref.name)
	mov____$i32,%eax &fun_vector_ref
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_vector_ref
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_vector_ref].car = make_cell_(tmp_num_(TSTRING), scm_vector_ref.car     , 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_vector_ref
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_vector_ref
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_vector_ref.car), cell_vector_ref, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_vector_ref
	push___%eax
	mov____$i32,%eax &scm_vector_ref
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_vector_entry.car = cstring_to_list(fun_vector_entry.name)
	mov____$i32,%eax &fun_vector_entry
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_vector_entry
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_vector_entry].car = make_cell_(tmp_num_(TSTRING), scm_vector_entry     .car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_vector_entry
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_vector_entry
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_vector_entry.car), cell_vector_entry, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_vector_entry
	push___%eax
	mov____$i32,%eax &scm_vector_entry
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_vector_set_x.car = cstring_to_list(fun_vector_set_x.name)
	mov____$i32,%eax &fun_vector_set_x
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_vector_set_x
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_vector_set_x].car = make_cell_(tmp_num_(TSTRING), scm_vector_set_x     .car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_vector_set_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_vector_set_x
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_vector_set_x.car), cell_vector_set_x, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_vector_set_x
	push___%eax
	mov____$i32,%eax &scm_vector_set_x
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_list_to_vector.car = cstring_to_list(fun_list_to_vector.name)
	mov____$i32,%eax &fun_list_to_vector
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_list_to_vector
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_list_to_vector].car = make_cell_(tmp_num_(TSTRING),      scm_list_to_vector.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_list_to_vector
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_list_to_vector
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_list_to_vector.car), cell_list_to_vector, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_list_to_vector
	push___%eax
	mov____$i32,%eax &scm_list_to_vector
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# scm_vector_to_list.car = cstring_to_list(fun_vector_to_list.name)
	mov____$i32,%eax &fun_vector_to_list
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax &scm_vector_to_list
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[cell_vector_to_list].car = make_cell_(tmp_num_(TSTRING),      scm_vector_to_list.car, 0)
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax &scm_vector_to_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	mov____0x32,%eax &cell_vector_to_list
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# a = acons(lookup_symbol_(scm_vector_to_list.car), cell_vector_to_list, a)
	push___0x8(%ebp) !0x8
	mov____0x32,%eax &cell_vector_to_list
	push___%eax
	mov____$i32,%eax &scm_vector_to_list
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %mes_builtins_5849_break
					# fputs("functions: ", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_169
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(g_function), 2); 
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x32,%eax &g_function
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs("\n", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_136
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# for (int i = 0; i < g_function; i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-4
	jmp32  %mes_builtins_5877_initial_skip
:mes_builtins_5877_loop
					# fputs("[", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_145
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(itoa(i), 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs("]: ", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_170
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs(g_functions[i].name, 2); 
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
					# fputs("\n", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_136
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
:mes_builtins_5877_continue
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-4
	add____$i8,(%eax) !0x1
	pop____%eax
:mes_builtins_5877_initial_skip
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x32,%eax &g_function
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %mes_builtins_5877_break
	jmp32  %mes_builtins_5877_loop
:mes_builtins_5877_break
					# fputs("\n", 2); 
	mov____$i32,%eax %0x2
	push___%eax
	push___$i32 &string_isxdigit_136
	call32 %fputs
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %mes_builtins_5849_break
:mes_builtins_5849_break
	mov____0x8(%ebp),%eax !0x8
	leave
	ret


:load_env
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# r0 = a
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# g_stdin = open("module/mes/read-0.mes", 0)
	mov____$i32,%eax %0x0
	push___%eax
	push___$i32 &string_isxdigit_171
	call32 %open
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# char *read0 = "tmp/share/mes/module/" "mes/read-0.mes"; 
	mov____$i32,%eax &string_isxdigit_172
	mov____%eax,0x8(%ebp) !0x-4
					# g_stdin = g_stdin >= 0? g_stdin: open(read0, 0)
					# g_stdin >= 0? ...: ...
	mov____0x32,%eax &g_stdin
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setge__%al
	movzbl_%al,%eax
					# jmp test LABEL
	jl32   %load_env_16_else
	mov____0x32,%eax &g_stdin
	test___%eax,%eax
	jmp32  %load_env_16_break
:load_env_16_else
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %open
	add____$i8,%esp !0x8
	test___%eax,%eax
:load_env_16_break
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# if (!g_function) ...
	mov____0x32,%eax &g_function
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %load_env_36_break
					# r0 = mes_builtins(r0)
	mov____0x32,%eax &r0
	push___%eax
	call32 %mes_builtins
	add____$i8,%esp !0x4
	mov____%eax,0x32 &r0
	test___%eax,%eax
	jmp32  %load_env_36_break
:load_env_36_break
					# r2 = read_input_file_env(r0)
	mov____0x32,%eax &r0
	push___%eax
	call32 %read_input_file_env
	add____$i8,%esp !0x4
	mov____%eax,0x32 &r2
	test___%eax,%eax
					# g_stdin = 0
	mov____$i32,%eax %0x0
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
	mov____0x32,%eax &r2
	leave
	ret


:bload_env
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *mo = "mes/read-0-32.mo"; 
	mov____$i32,%eax &string_isxdigit_173
	mov____%eax,0x8(%ebp) !0x-4
					# g_stdin = open("module/mes/read-0-32.mo", 0)
	mov____$i32,%eax %0x0
	push___%eax
	push___$i32 &string_isxdigit_174
	call32 %open
	add____$i8,%esp !0x8
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# char *read0 = "tmp/share/mes/module/" "mes/read-0-32.mo"; 
	mov____$i32,%eax &string_isxdigit_175
	mov____%eax,0x8(%ebp) !0x-8
					# g_stdin = g_stdin >= 0? g_stdin: open(read0, 0)
					# g_stdin >= 0? ...: ...
	mov____0x32,%eax &g_stdin
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setge__%al
	movzbl_%al,%eax
					# jmp test LABEL
	jl32   %bload_env_15_else
	mov____0x32,%eax &g_stdin
	test___%eax,%eax
	jmp32  %bload_env_15_break
:bload_env_15_else
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x-8
	call32 %open
	add____$i8,%esp !0x8
	test___%eax,%eax
:bload_env_15_break
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# if (g_stdin < 0) ...
	mov____0x32,%eax &g_stdin
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %bload_env_35_break
					# eputs("no such file: "); 
	push___$i32 &string_isxdigit_176
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(mo); 
	push___0x8(%ebp) !0x-4
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	mov____$i32,%eax %0x1
	leave
	ret
	jmp32  %bload_env_35_break
:bload_env_35_break
					# getchar() == 'M'? ...: ...
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	mov____$i32,%eax %0x4d
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %bload_env_59_else
	jmp32  %bload_env_59_break
:bload_env_59_else
	push___$i32 &string_isxdigit_177
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:bload_env_59_break
					# getchar() == 'E'? ...: ...
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	mov____$i32,%eax %0x45
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %bload_env_73_else
	jmp32  %bload_env_73_break
:bload_env_73_else
	push___$i32 &string_isxdigit_178
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:bload_env_73_break
					# getchar() == 'S'? ...: ...
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	mov____$i32,%eax %0x53
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %bload_env_87_else
	jmp32  %bload_env_87_break
:bload_env_87_else
	push___$i32 &string_isxdigit_179
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:bload_env_87_break
					# if (g_debug) ...
	mov____0x32,%eax &g_debug
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %bload_env_101_break
					# eputs("*GOT MES*\n"); 
	push___$i32 &string_isxdigit_180
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %bload_env_101_break
:bload_env_101_break
					# g_stack = getchar()<<8
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	xor____%ecx,%ecx
	mov____%edx,%ecx
	shl____%cl,%eax
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
					# g_stack += getchar()
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	mov____0x32,%eax &g_stack
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
					# char *p = (char*)g_cells; 
	mov____0x32,%eax &g_cells
	mov____%eax,0x8(%ebp) !0x-c
					# int c = getchar(); 
	call32 %getchar
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x-10
					# while (c != -1) ...
	jmp32  %bload_env_135_continue
:bload_env_135_loop
					# *p = c
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____0x8(%ebp),%eax !0x-c
	mov____%eax,%edx
	pop____%eax
	mov____%al,(%edx)
	add____$i8,0x8(%ebp) !0x-c !0x1
	test___%eax,%eax
					# c = getchar()
	call32 %getchar
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x-10
	test___%eax,%eax
:bload_env_135_continue
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %bload_env_135_break
	jmp32  %bload_env_135_loop
:bload_env_135_break
					# g_free = (p - (char*)g_cells)/sizeof(struct scm)
	mov____0x8(%ebp),%eax !0x-c
	push___%eax
	mov____0x32,%eax &g_cells
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	mov____$i32,%edx %0x1
	mov____%edx,%ebx
	xor____%edx,%edx
	idiv___%ebx
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	mov____%edx,%ebx
	xor____%edx,%edx
	idiv___%ebx
	mov____%eax,0x32 &g_free
	test___%eax,%eax
					# gc_peek_frame(); 
	call32 %gc_peek_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# g_symbols = r1
	mov____0x32,%eax &r1
	mov____%eax,0x32 &g_symbols
	test___%eax,%eax
					# g_stdin = 0
	mov____$i32,%eax %0x0
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# r0 = mes_builtins(r0)
	mov____0x32,%eax &r0
	push___%eax
	call32 %mes_builtins
	add____$i8,%esp !0x4
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# set_env_x(65, 2, r0); 
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x2
	push___%eax
	mov____$i32,%eax %0x41
	push___%eax
	call32 %set_env_x
	add____$i8,%esp !0xc
	test___%eax,%eax
					# set_env_x(66, 3, r0); 
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x3
	push___%eax
	mov____$i32,%eax %0x42
	push___%eax
	call32 %set_env_x
	add____$i8,%esp !0xc
	test___%eax,%eax
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %bload_env_209_break
					# eputs("symbols: "); 
	push___$i32 &string_isxdigit_181
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# SCM s = g_symbols; 
	mov____0x32,%eax &g_symbols
	mov____%eax,0x8(%ebp) !0x-14
					# while (s && s != 1) ...
	jmp32  %bload_env_224_continue
:bload_env_224_loop
					# display_error_(g_cells[s].car); 
	mov____0x8(%ebp),%eax !0x-14
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(" "); 
	push___$i32 &string_isxdigit_163
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# s = g_cells[s].cdr
	mov____0x8(%ebp),%eax !0x-14
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-14
	test___%eax,%eax
:bload_env_224_continue
	mov____0x8(%ebp),%eax !0x-14
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %bload_env_224_break
	mov____0x8(%ebp),%eax !0x-14
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %bload_env_224_break
	jmp32  %bload_env_224_loop
:bload_env_224_break
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("functions: "); 
	push___$i32 &string_isxdigit_169
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(g_function)); 
	mov____0x32,%eax &g_function
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# for (int i = 0; i < g_function; i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-18
	jmp32  %bload_env_281_initial_skip
:bload_env_281_loop
					# eputs("["); 
	push___$i32 &string_isxdigit_145
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(i)); 
	push___0x8(%ebp) !0x-18
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("]: "); 
	push___$i32 &string_isxdigit_170
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(g_functions[i].name); 
	mov____0x8(%ebp),%eax !0x-18
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____$i32,%edx &g_functions
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
:bload_env_281_continue
	mov____0x8(%ebp),%eax !0x-18
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-18
	add____$i8,(%eax) !0x1
	pop____%eax
:bload_env_281_initial_skip
	mov____0x8(%ebp),%eax !0x-18
	push___%eax
	mov____0x32,%eax &g_function
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %bload_env_281_break
	jmp32  %bload_env_281_loop
:bload_env_281_break
	jmp32  %bload_env_209_break
:bload_env_209_break
	mov____0x32,%eax &r2
	leave
	ret


:make_vector
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int k = g_cells[n].cdr; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells[tmp_num].cdr = TVECTOR
	mov____$i32,%eax %0xd
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# SCM v = alloc(k); 
	push___0x8(%ebp) !0x-4
	call32 %alloc
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-8
					# SCM x = make_cell_(tmp_num, k, v); 
	push___0x8(%ebp) !0x-8
	push___0x8(%ebp) !0x-4
	mov____0x32,%eax &tmp_num
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-c
					# for (int i = 0; i < k; i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-10
	jmp32  %make_vector_30_initial_skip
:make_vector_30_loop
					# g_cells[v + i] = g_cells[vector_entry(7)]
	mov____$i32,%eax %0x7
	push___%eax
	call32 %vector_entry
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____0x8(%ebp),%eax !0x-10
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
:make_vector_30_continue
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-10
	add____$i8,(%eax) !0x1
	pop____%eax
:make_vector_30_initial_skip
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %make_vector_30_break
	jmp32  %make_vector_30_loop
:make_vector_30_break
	mov____0x8(%ebp),%eax !0x-c
	leave
	ret


:vector_length
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TVECTOR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_length_1_else
	jmp32  %vector_length_1_break
:vector_length_1_else
	push___$i32 &string_isxdigit_182
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:vector_length_1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret


:vector_ref
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TVECTOR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_ref_1_else
	jmp32  %vector_ref_1_break
:vector_ref_1_else
	push___$i32 &string_isxdigit_182
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:vector_ref_1_break
					# g_cells[i].cdr < g_cells[x].car? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %vector_ref_19_else
	jmp32  %vector_ref_19_break
:vector_ref_19_else
	push___$i32 &string_isxdigit_183
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:vector_ref_19_break
					# SCM e = g_cells[x].cdr + g_cells[i].cdr; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-4
					# if (g_cells[e].type == TREF) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_ref_56_break
					# e = g_cells[e].car
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %vector_ref_56_break
:vector_ref_56_break
					# if (g_cells[e].type == TCHAR) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_ref_78_break
					# e = make_cell_(tmp_num_(TCHAR), 0, tmp_num2_(g_cells[e].cdr))
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %vector_ref_78_break
:vector_ref_78_break
					# if (g_cells[e].type == TNUMBER) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_ref_109_break
					# e = make_cell_(tmp_num_(TNUMBER), 0, tmp_num2_(g_cells[e].cdr))
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %vector_ref_109_break
:vector_ref_109_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:vector_entry
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if ((((g_cells[x].type == TPAIR || g_cells[x].type == TSPECIAL) || g_cells[x].     type == TSTRING) || g_cells[x].type == TSYMBOL) || g_cells[x].type ==      TVECTOR) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_entry_1_break_b_2_b_2_b_2_b_2
	jmp32  %vector_entry_1_break_b_2_b_2_b_2_skip_b_2
:vector_entry_1_break_b_2_b_2_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_entry_1_break_b_2_b_2_b_2
:vector_entry_1_break_b_2_b_2_b_2_skip_b_2
	jmp32  %vector_entry_1_break_b_2_b_2_skip_b_2
:vector_entry_1_break_b_2_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_entry_1_break_b_2_b_2
:vector_entry_1_break_b_2_b_2_skip_b_2
	jmp32  %vector_entry_1_break_b_2_skip_b_2
:vector_entry_1_break_b_2_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_entry_1_break_b_2
:vector_entry_1_break_b_2_skip_b_2
	jmp32  %vector_entry_1_break_skip_b_2
:vector_entry_1_break_b_2
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_entry_1_break
:vector_entry_1_break_skip_b_2
					# x = make_cell_(tmp_num_(TREF), x, 0)
	mov____$i32,%eax %0x0
	push___%eax
	push___0x8(%ebp) !0x8
	mov____$i32,%eax %0x8
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
	jmp32  %vector_entry_1_break
:vector_entry_1_break
	mov____0x8(%ebp),%eax !0x8
	leave
	ret


:vector_set_x
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[x].type == TVECTOR? ...: ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_set_x_1_else
	jmp32  %vector_set_x_1_break
:vector_set_x_1_else
	push___$i32 &string_isxdigit_182
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:vector_set_x_1_break
					# g_cells[i].cdr < g_cells[x].car? ...: ...
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %vector_set_x_19_else
	jmp32  %vector_set_x_19_break
:vector_set_x_19_else
	push___$i32 &string_isxdigit_183
	call32 %assert_fail
	add____$i8,%esp !0x4
	test___%eax,%eax
:vector_set_x_19_break
					# g_cells[g_cells[x].cdr + g_cells[i].cdr] = g_cells[vector_entry(e)]
	push___0x8(%ebp) !0x10
	call32 %vector_entry
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0xc
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:list_to_vector
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_cells[tmp_num].cdr = g_cells[length(x)].cdr
	push___0x8(%ebp) !0x8
	call32 %length
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x32,%eax &tmp_num
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# SCM v = make_vector(tmp_num); 
	mov____0x32,%eax &tmp_num
	push___%eax
	call32 %make_vector
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# SCM p = g_cells[v].cdr; 
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-8
					# while (x != 1) ...
	jmp32  %list_to_vector_29_continue
:list_to_vector_29_loop
					# g_cells[p++] = g_cells[vector_entry(car(x))]
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	push___%eax
	call32 %vector_entry
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-8
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# x = cdr(x)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:list_to_vector_29_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %list_to_vector_29_break
	jmp32  %list_to_vector_29_loop
:list_to_vector_29_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:vector_to_list
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# SCM x = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-4
					# for (int i = 0; i < g_cells[v].car; i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-8
	jmp32  %vector_to_list_4_initial_skip
:vector_to_list_4_loop
					# SCM e = g_cells[v].cdr + i; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-c
					# if (g_cells[e].type == TREF) ...
	mov____0x8(%ebp),%eax !0x-c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %vector_to_list_21_break
					# e = g_cells[e].car
	mov____0x8(%ebp),%eax !0x-c
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,0x8(%ebp) !0x-c
	test___%eax,%eax
	jmp32  %vector_to_list_21_break
:vector_to_list_21_break
					# x = append2(x, cons(e, 1))
	mov____$i32,%eax %0x1
	push___%eax
	push___0x8(%ebp) !0x-c
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %append2
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
:vector_to_list_4_continue
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-8
	add____$i8,(%eax) !0x1
	pop____%eax
:vector_to_list_4_initial_skip
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %vector_to_list_4_break
	jmp32  %vector_to_list_4_loop
:vector_to_list_4_break
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:gc_up_arena
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# ARENA_SIZE *= 2
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x32,%eax &ARENA_SIZE
	pop____%edx
	mul____%edx
	mov____%eax,0x32 &ARENA_SIZE
	test___%eax,%eax
					# GC_SAFETY *= 2
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x32,%eax &GC_SAFETY
	pop____%edx
	mul____%edx
	mov____%eax,0x32 &GC_SAFETY
	test___%eax,%eax
					# char *p = g_cells; 
	mov____0x32,%eax &g_cells
	mov____%eax,0x8(%ebp) !0x-4
					# p = realloc(p - sizeof(struct scm), 2*ARENA_SIZE*sizeof(struct scm))
	mov____$i32,%eax %0x2
	push___%eax
	mov____0x32,%eax &ARENA_SIZE
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	push___%eax
	call32 %realloc
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# gc_init_news(); 
	call32 %gc_init_news
	add____$i8,%esp !0x0
	test___%eax,%eax
	mov____$i32,%eax %0x0
	leave
	ret


:gc_flip
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# struct scm *cells = g_cells; 
	mov____0x32,%eax &g_cells
	mov____%eax,0x8(%ebp) !0x-4
					# g_cells = g_news
	mov____0x32,%eax &g_news
	mov____%eax,0x32 &g_cells
	test___%eax,%eax
					# g_news = cells
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &g_news
	test___%eax,%eax
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %gc_flip_12_break
					# eputs(";;;   => jam["); 
	push___$i32 &string_isxdigit_184
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(g_free)); 
	mov____0x32,%eax &g_free
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("]\n"); 
	push___$i32 &string_isxdigit_146
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %gc_flip_12_break
:gc_flip_12_break
	mov____0x32,%eax &g_stack
	leave
	ret


:gc_copy
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_cells[old].type == TBROKEN_HEART) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xe
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_copy_1_break
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	leave
	ret
	jmp32  %gc_copy_1_break
:gc_copy_1_break
					# SCM new = g_free++; 
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,0x8(%ebp) !0x-4
					# g_news[new] = g_cells[old]
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
					# if (g_news[new].type == TVECTOR) ...
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xd
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_copy_42_break
					# g_news[new].cdr = g_free
	mov____0x32,%eax &g_free
	push___%eax
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# for (int i = 0; i < g_cells[old].car; i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-8
	jmp32  %gc_copy_66_initial_skip
:gc_copy_66_loop
					# g_news[g_free++] = g_cells[g_cells[old].cdr + i]
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	push___%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax &g_free
	add____$i8,(%eax) !0x1
	pop____%eax
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	add____$i8,%eax !0x4
	add____$i8,%edx !0x4
	mov____(%eax),%ecx
	mov____%ecx,(%edx)
	test___%eax,%eax
:gc_copy_66_continue
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-8
	add____$i8,(%eax) !0x1
	pop____%eax
:gc_copy_66_initial_skip
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %gc_copy_66_break
	jmp32  %gc_copy_66_loop
:gc_copy_66_break
	jmp32  %gc_copy_42_break
:gc_copy_42_break
					# g_cells[old].type = TBROKEN_HEART
	mov____$i32,%eax %0xe
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x0
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
					# g_cells[old].car = new
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____0x8(%ebp),%eax !0x-4
	leave
	ret


:gc_relocate_car
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_news[new].car = car
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x4
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:gc_relocate_cdr
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# g_news[new].cdr = cdr
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	add____$i8,%eax !0x8
	mov____%eax,%edx
	pop____%eax
	mov____%eax,(%edx)
	test___%eax,%eax
	mov____$i32,%eax %0x7
	leave
	ret


:gc_loop
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# while (scan < g_free) ...
	jmp32  %gc_loop_1_continue
:gc_loop_1_loop
					# if ((((((((((g_news[scan].type == TCLOSURE || g_news[scan].type ==      TCONTINUATION) || g_news[scan].type == TFUNCTION) || g_news[scan].type ==      TKEYWORD) || g_news[scan].type == TMACRO) || g_news[scan].type == TPAIR)      || g_news[scan].type == TREF) || scan == 1) || g_news[scan].type ==      TSPECIAL) || g_news[scan].type == TSTRING) || g_news[scan].type == TSYMBOL     ) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x3
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x5
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5_b_5
:gc_loop_4_break_b_5_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5_b_5
:gc_loop_4_break_b_5_b_5_skip_b_5
	jmp32  %gc_loop_4_break_b_5_skip_b_5
:gc_loop_4_break_b_5_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break_b_5
:gc_loop_4_break_b_5_skip_b_5
	jmp32  %gc_loop_4_break_skip_b_5
:gc_loop_4_break_b_5
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xb
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_4_break
:gc_loop_4_break_skip_b_5
					# SCM car = gc_copy(g_news[scan].car); 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x4
	push___%eax
	call32 %gc_copy
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# gc_relocate_car(scan, car); 
	push___0x8(%ebp) !0x-4
	push___0x8(%ebp) !0x8
	call32 %gc_relocate_car
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %gc_loop_4_break
:gc_loop_4_break
					# if (((((g_news[scan].type == TCLOSURE || g_news[scan].type == TCONTINUATION)      || g_news[scan].type == TMACRO) || g_news[scan].type == TPAIR) || g_news[     scan].type == TVALUES) && g_news[scan].cdr) ...
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_168_break_b_169_b_169_b_169_b_169
	jmp32  %gc_loop_168_break_b_169_b_169_b_169_skip_b_169
:gc_loop_168_break_b_169_b_169_b_169_b_169
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_168_break_b_169_b_169_b_169
:gc_loop_168_break_b_169_b_169_b_169_skip_b_169
	jmp32  %gc_loop_168_break_b_169_b_169_skip_b_169
:gc_loop_168_break_b_169_b_169_b_169
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x5
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_168_break_b_169_b_169
:gc_loop_168_break_b_169_b_169_skip_b_169
	jmp32  %gc_loop_168_break_b_169_skip_b_169
:gc_loop_168_break_b_169_b_169
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0x7
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_168_break_b_169
:gc_loop_168_break_b_169_skip_b_169
	jmp32  %gc_loop_168_break_skip_b_169
:gc_loop_168_break_b_169
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x0
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_loop_168_break
:gc_loop_168_break_skip_b_169
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %gc_loop_168_break
					# SCM cdr = gc_copy(g_news[scan].cdr); 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_news
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %gc_copy
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# gc_relocate_cdr(scan, cdr); 
	push___0x8(%ebp) !0x-4
	push___0x8(%ebp) !0x8
	call32 %gc_relocate_cdr
	add____$i8,%esp !0x8
	test___%eax,%eax
	jmp32  %gc_loop_168_break
:gc_loop_168_break
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x8
	add____$i8,(%eax) !0x1
	pop____%eax
	test___%eax,%eax
:gc_loop_1_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____0x32,%eax &g_free
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %gc_loop_1_break
	jmp32  %gc_loop_1_loop
:gc_loop_1_break
	call32 %gc_flip
	add____$i8,%esp !0x0
	leave
	ret


:gc_check
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_free + GC_SAFETY > ARENA_SIZE) ...
	mov____0x32,%eax &g_free
	push___%eax
	mov____0x32,%eax &GC_SAFETY
	mov____%eax,%edx
	pop____%eax
	add____%edx,%eax
	push___%eax
	mov____0x32,%eax &ARENA_SIZE
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %gc_check_1_break
					# gc_pop_frame(gc(gc_push_frame())); 
	call32 %gc_push_frame
	add____$i8,%esp !0x0
	push___%eax
	call32 %gc
	add____$i8,%esp !0x4
	push___%eax
	call32 %gc_pop_frame
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %gc_check_1_break
:gc_check_1_break
	mov____$i32,%eax %0x7
	leave
	ret


:gc
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (g_debug == 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %gc_1_break
					# eputs("."); 
	push___$i32 &string_isxdigit_3
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %gc_1_break
:gc_1_break
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %gc_15_break
					# eputs(";;; gc["); 
	push___$i32 &string_isxdigit_185
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(g_free)); 
	mov____0x32,%eax &g_free
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(":"); 
	push___$i32 &string_isxdigit_166
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(ARENA_SIZE - g_free)); 
	mov____0x32,%eax &ARENA_SIZE
	push___%eax
	mov____0x32,%eax &g_free
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("]..."); 
	push___$i32 &string_isxdigit_186
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %gc_15_break
:gc_15_break
					# g_free = 1
	mov____$i32,%eax %0x1
	mov____%eax,0x32 &g_free
	test___%eax,%eax
					# if (g_cells < g_news && ARENA_SIZE < MAX_ARENA_SIZE) ...
	mov____0x32,%eax &g_cells
	push___%eax
	mov____0x32,%eax &g_news
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %gc_58_break
	mov____0x32,%eax &ARENA_SIZE
	push___%eax
	mov____0x32,%eax &MAX_ARENA_SIZE
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %gc_58_break
					# gc_up_arena(); 
	call32 %gc_up_arena
	add____$i8,%esp !0x0
	test___%eax,%eax
	jmp32  %gc_58_break
:gc_58_break
					# for (int i = g_free; i < g_symbol_max; i++) ...
					# int i = g_free; 
	mov____0x32,%eax &g_free
	mov____%eax,0x8(%ebp) !0x-4
	jmp32  %gc_78_initial_skip
:gc_78_loop
					# gc_copy(i); 
	push___0x8(%ebp) !0x-4
	call32 %gc_copy
	add____$i8,%esp !0x4
	test___%eax,%eax
:gc_78_continue
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-4
	add____$i8,(%eax) !0x1
	pop____%eax
:gc_78_initial_skip
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____0x32,%eax &g_symbol_max
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %gc_78_break
	jmp32  %gc_78_loop
:gc_78_break
					# make_tmps(g_news); 
	mov____0x32,%eax &g_news
	push___%eax
	call32 %make_tmps
	add____$i8,%esp !0x4
	test___%eax,%eax
					# g_symbols = gc_copy(g_symbols)
	mov____0x32,%eax &g_symbols
	push___%eax
	call32 %gc_copy
	add____$i8,%esp !0x4
	mov____%eax,0x32 &g_symbols
	test___%eax,%eax
					# SCM new = gc_copy(g_stack); 
	mov____0x32,%eax &g_stack
	push___%eax
	call32 %gc_copy
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %gc_117_break
					# eputs("new="); 
	push___$i32 &string_isxdigit_187
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(new)); 
	push___0x8(%ebp) !0x-4
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %gc_117_break
:gc_117_break
					# g_stack = new
	mov____0x8(%ebp),%eax !0x-4
	mov____%eax,0x32 &g_stack
	test___%eax,%eax
	mov____$i32,%eax %0x1
	push___%eax
	call32 %gc_loop
	add____$i8,%esp !0x4
	leave
	ret


:read_input_file_env_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (e == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_input_file_env__1_break
	mov____0x8(%ebp),%eax !0x8
	leave
	ret
	jmp32  %read_input_file_env__1_break
:read_input_file_env__1_break
	push___0x8(%ebp) !0xc
	push___0x8(%ebp) !0xc
	call32 %read_env
	add____$i8,%esp !0x4
	push___%eax
	call32 %read_input_file_env_
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret


:read_input_file_env
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# r0 = a
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# if (assq_ref_env(25, r0) != 6) ...
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x19
	push___%eax
	call32 %assq_ref_env
	add____$i8,%esp !0x8
	push___%eax
	mov____$i32,%eax %0x6
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %read_input_file_env_5_break
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x1
	push___%eax
	mov____$i32,%eax %0x19
	push___%eax
	call32 %apply
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_input_file_env_5_break
:read_input_file_env_5_break
	mov____0x32,%eax &r0
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	call32 %read_env
	add____$i8,%esp !0x4
	push___%eax
	call32 %read_input_file_env_
	add____$i8,%esp !0x8
	leave
	ret


:read_line_comment
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (c == '\n') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_line_comment_1_break
	mov____0x8(%ebp),%eax !0x8
	leave
	ret
	jmp32  %read_line_comment_1_break
:read_line_comment_1_break
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %read_line_comment
	add____$i8,%esp !0x4
	leave
	ret


:read_word
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (c == -1 && w == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_1_break
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_1_break
	mov____$i32,%eax %0x1
	leave
	ret
	jmp32  %read_word_1_break
:read_word_1_break
					# if (c == '\t') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_24_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	mov____$i32,%eax %0xa
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_word_24_break
:read_word_24_break
					# if (c == '\f') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_40_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	mov____$i32,%eax %0xa
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_word_40_break
:read_word_40_break
					# if (c == '\n' && w == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_56_break
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_56_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_word_56_break
:read_word_56_break
					# if (c == '\n' && g_cells[car(w)].cdr == '.' && cdr(w) == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_79_break
	push___0x8(%ebp) !0xc
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2e
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_79_break
	push___0x8(%ebp) !0xc
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_79_break
	mov____$i32,%eax %0x4
	leave
	ret
	jmp32  %read_word_79_break
:read_word_79_break
					# if (c == -1 || c == '\n') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_111_break_b_112
	jmp32  %read_word_111_break_skip_b_112
:read_word_111_break_b_112
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_111_break
:read_word_111_break_skip_b_112
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	call32 %lookup_
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %read_word_111_break
:read_word_111_break
					# if (c == ' ') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x20
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_139_break
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	mov____$i32,%eax %0xa
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_word_139_break
:read_word_139_break
					# if (c == '(' && w == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x28
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_155_break
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_155_break
	push___0x8(%ebp) !0x10
	call32 %read_list
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %read_word_155_break
:read_word_155_break
					# if (c == '(') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x28
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_175_break
					# ungetchar(c); 
	push___0x8(%ebp) !0x8
	call32 %ungetchar
	add____$i8,%esp !0x4
	test___%eax,%eax
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	call32 %lookup_
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %read_word_175_break
:read_word_175_break
					# if (c == ')' && w == 1) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x29
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_193_break
	mov____0x8(%ebp),%eax !0xc
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_193_break
					# ungetchar(c); 
	push___0x8(%ebp) !0x8
	call32 %ungetchar
	add____$i8,%esp !0x4
	test___%eax,%eax
	mov____$i32,%eax %0x1
	leave
	ret
	jmp32  %read_word_193_break
:read_word_193_break
					# if (c == ')') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x29
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_216_break
					# ungetchar(c); 
	push___0x8(%ebp) !0x8
	call32 %ungetchar
	add____$i8,%esp !0x4
	test___%eax,%eax
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	call32 %lookup_
	add____$i8,%esp !0x8
	leave
	ret
	jmp32  %read_word_216_break
:read_word_216_break
					# if (c == ';') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x3b
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_word_234_break
					# read_line_comment(c); 
	push___0x8(%ebp) !0x8
	call32 %read_line_comment
	add____$i8,%esp !0x4
	test___%eax,%eax
	push___0x8(%ebp) !0x10
	push___0x8(%ebp) !0xc
	mov____$i32,%eax %0xa
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %read_word_234_break
:read_word_234_break
	push___0x8(%ebp) !0x10
	mov____$i32,%eax %0x1
	push___%eax
	push___0x8(%ebp) !0x8
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	push___%eax
	push___0x8(%ebp) !0xc
	call32 %append2
	add____$i8,%esp !0x8
	push___%eax
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret


:eat_whitespace
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# while (((c == ' ' || c == '\t') || c == '\n') || c == '\f') ...
	jmp32  %eat_whitespace_1_continue
:eat_whitespace_1_loop
					# c = getchar()
	call32 %getchar
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x8
	test___%eax,%eax
:eat_whitespace_1_continue
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x20
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eat_whitespace_1_break_b_9_b_9_b_9
	jmp32  %eat_whitespace_1_break_b_9_b_9_skip_b_9
:eat_whitespace_1_break_b_9_b_9_b_9
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x9
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eat_whitespace_1_break_b_9_b_9
:eat_whitespace_1_break_b_9_b_9_skip_b_9
	jmp32  %eat_whitespace_1_break_b_9_skip_b_9
:eat_whitespace_1_break_b_9_b_9
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xa
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eat_whitespace_1_break_b_9
:eat_whitespace_1_break_b_9_skip_b_9
	jmp32  %eat_whitespace_1_break_skip_b_9
:eat_whitespace_1_break_b_9
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eat_whitespace_1_break
:eat_whitespace_1_break_skip_b_9
	jmp32  %eat_whitespace_1_loop
:eat_whitespace_1_break
					# if (c == ';') ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x3b
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %eat_whitespace_48_break
	push___0x8(%ebp) !0x8
	call32 %read_line_comment
	add____$i8,%esp !0x4
	push___%eax
	call32 %eat_whitespace
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %eat_whitespace_48_break
:eat_whitespace_48_break
	mov____0x8(%ebp),%eax !0x8
	leave
	ret


:read_list
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# int c = getchar(); 
	call32 %getchar
	add____$i8,%esp !0x0
	mov____%eax,0x8(%ebp) !0x-4
					# c = eat_whitespace(c)
	push___0x8(%ebp) !0x-4
	call32 %eat_whitespace
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# if (c == ')') ...
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0x29
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_list_9_break
	mov____$i32,%eax %0x1
	leave
	ret
	jmp32  %read_list_9_break
:read_list_9_break
					# SCM w = read_word(c, 1, a); 
	push___0x8(%ebp) !0x8
	mov____$i32,%eax %0x1
	push___%eax
	push___0x8(%ebp) !0x-4
	call32 %read_word
	add____$i8,%esp !0xc
	mov____%eax,0x8(%ebp) !0x-8
					# if (w == 4) ...
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____$i32,%eax %0x4
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %read_list_28_break
	push___0x8(%ebp) !0x8
	call32 %read_list
	add____$i8,%esp !0x4
	push___%eax
	call32 %car
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %read_list_28_break
:read_list_28_break
	push___0x8(%ebp) !0x8
	call32 %read_list
	add____$i8,%esp !0x4
	push___%eax
	push___0x8(%ebp) !0x-8
	call32 %cons
	add____$i8,%esp !0x8
	leave
	ret


:read_env
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
	push___0x8(%ebp) !0x8
	mov____$i32,%eax %0x1
	push___%eax
	call32 %getchar
	add____$i8,%esp !0x0
	push___%eax
	call32 %read_word
	add____$i8,%esp !0xc
	leave
	ret


:lookup_
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# if (isdigit(g_cells[car(s)].cdr) || (g_cells[car(s)].cdr == '-' && cdr(s) != 1)     ) ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %isdigit
	add____$i8,%esp !0x4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %lookup__1_break_b_2
	jmp32  %lookup__1_break_skip_b_2
:lookup__1_break_b_2
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2d
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lookup__1_break
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %lookup__1_break
:lookup__1_break_skip_b_2
					# SCM p = s; 
	mov____0x8(%ebp),%eax !0x8
	mov____%eax,0x8(%ebp) !0x-4
					# int sign = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-8
					# if (g_cells[car(s)].cdr == '-') ...
	push___0x8(%ebp) !0x8
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2d
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lookup__43_break
					# sign = -1
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	mov____$i32,%eax %0x0
	sub____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-8
	test___%eax,%eax
					# p = cdr(s)
	push___0x8(%ebp) !0x8
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
	jmp32  %lookup__43_break
:lookup__43_break
					# int n = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-c
					# while (p != 1 && isdigit(g_cells[car(p)].cdr)) ...
	jmp32  %lookup__74_continue
:lookup__74_loop
					# n *= 10
	mov____$i32,%eax %0xa
	push___%eax
	mov____0x8(%ebp),%eax !0x-c
	pop____%edx
	mul____%edx
	mov____%eax,0x8(%ebp) !0x-c
	test___%eax,%eax
					# n += g_cells[car(p)].cdr - '0'
	push___0x8(%ebp) !0x-4
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x30
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	push___%eax
	mov____0x8(%ebp),%eax !0x-c
	pop____%edx
	add____%edx,%eax
	mov____%eax,0x8(%ebp) !0x-c
	test___%eax,%eax
					# p = cdr(p)
	push___0x8(%ebp) !0x-4
	call32 %cdr
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
:lookup__74_continue
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	push___%eax
	sub____%edx,%eax
	setne__%al
	movzbl_%al,%eax
	xchg___%eax,(%esp)
	sub____%edx,%eax
	lahf
	xor____$i8,%ah !0x40
	sahf
	pop____%eax
					# jmp test LABEL
	jne32  %lookup__74_break
	push___0x8(%ebp) !0x-4
	call32 %car
	add____$i8,%esp !0x4
	mov____%eax,%edx
	add____%eax,%eax
	add____%edx,%eax
	shl____$i8,%eax !0x2
	mov____0x32,%edx &g_cells
	add____%edx,%eax
	mov____0x8(%eax),%eax !0x8
	push___%eax
	call32 %isdigit
	add____$i8,%esp !0x4
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %lookup__74_break
	jmp32  %lookup__74_loop
:lookup__74_break
					# if (p == 1) ...
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	sete___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jne32  %lookup__129_break
	mov____0x8(%ebp),%eax !0x-c
	push___%eax
	mov____0x8(%ebp),%eax !0x-8
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	push___%eax
	call32 %tmp_num2_
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0x0
	push___%eax
	mov____$i32,%eax %0x6
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	leave
	ret
	jmp32  %lookup__129_break
:lookup__129_break
	jmp32  %lookup__1_break
:lookup__1_break
	push___0x8(%ebp) !0x8
	call32 %lookup_symbol_
	add____$i8,%esp !0x4
	leave
	ret


:dump
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# r1 = g_symbols
	mov____0x32,%eax &g_symbols
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# gc_push_frame(); 
	call32 %gc_push_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# gc(); 
	call32 %gc
	add____$i8,%esp !0x0
	test___%eax,%eax
					# gc_peek_frame(); 
	call32 %gc_peek_frame
	add____$i8,%esp !0x0
	test___%eax,%eax
					# char *p = (char*)g_cells; 
	mov____0x32,%eax &g_cells
	mov____%eax,0x8(%ebp) !0x-4
					# putchar('M'); 
	mov____$i32,%eax %0x4d
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
					# putchar('E'); 
	mov____$i32,%eax %0x45
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
					# putchar('S'); 
	mov____$i32,%eax %0x53
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
					# putchar(g_stack<<8); 
	mov____0x32,%eax &g_stack
	push___%eax
	mov____$i32,%eax %0x8
	mov____%eax,%edx
	pop____%eax
	xor____%ecx,%ecx
	mov____%edx,%ecx
	shr____%cl,%eax
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
					# putchar(g_stack%256); 
	mov____0x32,%eax &g_stack
	push___%eax
	mov____$i32,%eax %0x100
	mov____%eax,%edx
	pop____%eax
	mov____%edx,%ebx
	xor____%edx,%edx
	idiv___%ebx
	mov____%edx,%eax
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("dumping\n"); 
	push___$i32 &string_isxdigit_188
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %dump_54_break
					# eputs("program r2="); 
	push___$i32 &string_isxdigit_189
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# display_error_(r2); 
	mov____0x32,%eax &r2
	push___%eax
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %dump_54_break
:dump_54_break
					# for (int i = 0; i < g_free*sizeof(struct scm); i++) ...
					# int i = 0; 
	mov____$i32,%eax %0x0
	mov____%eax,0x8(%ebp) !0x-8
	jmp32  %dump_76_initial_skip
:dump_76_loop
					# putchar(*p++); 
	mov____0x8(%ebp),%eax !0x-4
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-4
	add____$i8,(%eax) !0x1
	pop____%eax
	movzbl_(%eax),%eax
	push___%eax
	call32 %putchar
	add____$i8,%esp !0x4
	test___%eax,%eax
:dump_76_continue
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-8
	add____$i8,(%eax) !0x1
	pop____%eax
:dump_76_initial_skip
	mov____0x8(%ebp),%eax !0x-8
	push___%eax
	mov____0x32,%eax &g_free
	push___%eax
	mov____$i32,%eax %0xc
	mov____%eax,%edx
	pop____%eax
	mul____%edx
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setl___%al
	movzbl_%al,%eax
					# jmp test LABEL
	jge32  %dump_76_break
	jmp32  %dump_76_loop
:dump_76_break
	mov____$i32,%eax %0x0
	leave
	ret


:main
	push___%ebp
	mov____%esp,%ebp
	sub____%esp,$i32 %0x1054
					# char *p; 
					# if (p = getenv("MES_DEBUG")) ...
					# p = getenv("MES_DEBUG")
	push___$i32 &string_isxdigit_190
	call32 %getenv
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# jmp test LABEL
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
	je32   %main_2_break
					# g_debug = atoi(p)
	push___0x8(%ebp) !0x-4
	call32 %atoi
	add____$i8,%esp !0x4
	mov____%eax,0x32 &g_debug
	test___%eax,%eax
	jmp32  %main_2_break
:main_2_break
					# if (g_debug) ...
	mov____0x32,%eax &g_debug
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %main_19_break
					# eputs(";;; MODULEDIR="); 
	push___$i32 &string_isxdigit_191
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("tmp/share/mes/module/"); 
	push___$i32 &string_isxdigit_192
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %main_19_break
:main_19_break
					# if (p = getenv("MES_MAX_ARENA")) ...
					# p = getenv("MES_MAX_ARENA")
	push___$i32 &string_isxdigit_193
	call32 %getenv
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# jmp test LABEL
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
	je32   %main_39_break
					# MAX_ARENA_SIZE = atoi(p)
	push___0x8(%ebp) !0x-4
	call32 %atoi
	add____$i8,%esp !0x4
	mov____%eax,0x32 &MAX_ARENA_SIZE
	test___%eax,%eax
	jmp32  %main_39_break
:main_39_break
					# if (p = getenv("MES_ARENA")) ...
					# p = getenv("MES_ARENA")
	push___$i32 &string_isxdigit_194
	call32 %getenv
	add____$i8,%esp !0x4
	mov____%eax,0x8(%ebp) !0x-4
	test___%eax,%eax
					# jmp test LABEL
	mov____0x8(%ebp),%eax !0x-4
	test___%eax,%eax
	je32   %main_56_break
					# ARENA_SIZE = atoi(p)
	push___0x8(%ebp) !0x-4
	call32 %atoi
	add____$i8,%esp !0x4
	mov____%eax,0x32 &ARENA_SIZE
	test___%eax,%eax
	jmp32  %main_56_break
:main_56_break
					# if (argc > 1 && !strcmp(argv[1], "--help")) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %main_73_break
	push___$i32 &string_isxdigit_195
	mov____$i32,%eax %0x1
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %strcmp
	add____$i8,%esp !0x8
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %main_73_break
	push___$i32 &string_isxdigit_196
	call32 %puts
	add____$i8,%esp !0x4
	leave
	ret
	jmp32  %main_73_break
:main_73_break
					# if (argc > 1 && !strcmp(argv[1], "--version")) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %main_99_break
	push___$i32 &string_isxdigit_197
	mov____$i32,%eax %0x1
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %strcmp
	add____$i8,%esp !0x8
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %main_99_break
					# puts("Mes "); 
	push___$i32 &string_isxdigit_198
	call32 %puts
	add____$i8,%esp !0x4
	test___%eax,%eax
					# puts("0.9"); 
	push___$i32 &string_isxdigit_167
	call32 %puts
	add____$i8,%esp !0x4
	test___%eax,%eax
					# puts("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %puts
	add____$i8,%esp !0x4
	test___%eax,%eax
	mov____$i32,%eax %0x0
	leave
	ret
	jmp32  %main_99_break
:main_99_break
					# g_stdin = 0
	mov____$i32,%eax %0x0
	mov____%eax,0x32 &g_stdin
	test___%eax,%eax
					# g_stdout = 1
	mov____$i32,%eax %0x1
	mov____%eax,0x32 &g_stdout
	test___%eax,%eax
					# r0 = mes_environment()
	call32 %mes_environment
	add____$i8,%esp !0x0
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# SCM program = argc > 1 && !strcmp(argv[1], "--load")? bload_env(r0): load_env(     r0); 
					# argc > 1 && !strcmp(argv[1], "--load")? ...: ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %main_149_else
	push___$i32 &string_isxdigit_199
	mov____$i32,%eax %0x1
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %strcmp
	add____$i8,%esp !0x8
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %main_149_else
	mov____0x32,%eax &r0
	push___%eax
	call32 %bload_env
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %main_149_break
:main_149_else
	mov____0x32,%eax &r0
	push___%eax
	call32 %load_env
	add____$i8,%esp !0x4
	test___%eax,%eax
:main_149_break
	mov____%eax,0x8(%ebp) !0x-8
					# g_tiny = argc > 2 && !strcmp(argv[2], "--tiny")
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x2
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
	test___%eax,%eax
	je32   %main_186_and_skip_b
	test___%eax,%eax
	push___$i32 &string_isxdigit_200
	mov____$i32,%eax %0x2
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %strcmp
	add____$i8,%esp !0x8
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
:main_186_and_skip_b
	mov____%eax,0x32 &g_tiny
	test___%eax,%eax
					# if (argc > 1 && !strcmp(argv[1], "--dump")) ...
	mov____0x8(%ebp),%eax !0x8
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %main_203_break
	push___$i32 &string_isxdigit_201
	mov____$i32,%eax %0x1
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %strcmp
	add____$i8,%esp !0x8
	test___%eax,%eax
	sete___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	je32   %main_203_break
	call32 %dump
	add____$i8,%esp !0x0
	leave
	ret
	jmp32  %main_203_break
:main_203_break
					# SCM lst = 1; 
	mov____$i32,%eax %0x1
	mov____%eax,0x8(%ebp) !0x-c
					# for (int i = argc - 1; i >= 0; i--) ...
					# int i = argc - 1; 
	mov____0x8(%ebp),%eax !0x8
	add____$i8,%eax !0x-1
	mov____%eax,0x8(%ebp) !0x-10
	jmp32  %main_231_initial_skip
:main_231_loop
					# lst = cons(make_cell_(tmp_num_(TSTRING), cstring_to_list(argv[i]), 0), lst)
	push___0x8(%ebp) !0x-c
	mov____$i32,%eax %0x0
	push___%eax
	mov____0x8(%ebp),%eax !0x-10
	shl____$i8,%eax !0x2
	mov____0x8(%ebp),%edx !0xc
	add____%edx,%eax
	mov____(%eax),%eax
	push___%eax
	call32 %cstring_to_list
	add____$i8,%esp !0x4
	push___%eax
	mov____$i32,%eax %0xa
	push___%eax
	call32 %tmp_num_
	add____$i8,%esp !0x4
	push___%eax
	call32 %make_cell_
	add____$i8,%esp !0xc
	push___%eax
	call32 %cons
	add____$i8,%esp !0x8
	mov____%eax,0x8(%ebp) !0x-c
	test___%eax,%eax
:main_231_continue
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____%ebp,%eax
	add____$i8,%eax !0x-10
	add____$i8,(%eax) !0x-1
	pop____%eax
:main_231_initial_skip
	mov____0x8(%ebp),%eax !0x-10
	push___%eax
	mov____$i32,%eax %0x0
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setge__%al
	movzbl_%al,%eax
					# jmp test LABEL
	jl32   %main_231_break
	jmp32  %main_231_loop
:main_231_break
					# r0 = acons(34, lst, r0)
	mov____0x32,%eax &r0
	push___%eax
	push___0x8(%ebp) !0x-c
	mov____$i32,%eax %0x22
	push___%eax
	call32 %acons
	add____$i8,%esp !0xc
	mov____%eax,0x32 &r0
	test___%eax,%eax
					# push_cc(r2, 7, r0, 7); 
	mov____$i32,%eax %0x7
	push___%eax
	mov____0x32,%eax &r0
	push___%eax
	mov____$i32,%eax %0x7
	push___%eax
	mov____0x32,%eax &r2
	push___%eax
	call32 %push_cc
	add____$i8,%esp !0x10
	test___%eax,%eax
					# if (g_debug > 1) ...
	mov____0x32,%eax &g_debug
	push___%eax
	mov____$i32,%eax %0x1
	mov____%eax,%edx
	pop____%eax
	sub____%edx,%eax
	setg___%al
	movzbl_%al,%eax
	test___%eax,%eax
					# jmp test LABEL
	jle32  %main_291_break
					# eputs("program: "); 
	push___$i32 &string_isxdigit_202
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# display_error_(r1); 
	mov____0x32,%eax &r1
	push___%eax
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %main_291_break
:main_291_break
					# r3 = 57
	mov____$i32,%eax %0x39
	mov____%eax,0x32 &r3
	test___%eax,%eax
					# r1 = eval_apply()
	call32 %eval_apply
	add____$i8,%esp !0x0
	mov____%eax,0x32 &r1
	test___%eax,%eax
					# display_error_(r1); 
	mov____0x32,%eax &r1
	push___%eax
	call32 %display_error_
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("\n"); 
	push___$i32 &string_isxdigit_136
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# gc(g_stack); 
	mov____0x32,%eax &g_stack
	push___%eax
	call32 %gc
	add____$i8,%esp !0x4
	test___%eax,%eax
					# if (g_debug) ...
	mov____0x32,%eax &g_debug
	test___%eax,%eax
					# jmp test LABEL
	test___%eax,%eax
	je32   %main_333_break
					# eputs("\nstats: ["); 
	push___$i32 &string_isxdigit_203
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs(itoa(g_free)); 
	mov____0x32,%eax &g_free
	push___%eax
	call32 %itoa
	add____$i8,%esp !0x4
	push___%eax
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
					# eputs("]\n"); 
	push___$i32 &string_isxdigit_146
	call32 %eputs
	add____$i8,%esp !0x4
	test___%eax,%eax
	jmp32  %main_333_break
:main_333_break
	mov____$i32,%eax %0x0
	leave
	ret


:ELF_data


:HEX2_data

:g_environment
!0x00 !0x00 !0x00 !0x00

:g_stdin
!0x00 !0x00 !0x00 !0x00

:g_stdout
!0x00 !0x00 !0x00 !0x00

:ARENA_SIZE
!0x-60 !0x-7a !0x01 !0x00

:MAX_ARENA_SIZE
!0x00 !0x2d !0x31 !0x01

:GC_SAFETY
!0x-6 !0x00 !0x00 !0x00

:g_arena
!0x00 !0x00 !0x00 !0x00

:g_debug
!0x00 !0x00 !0x00 !0x00

:g_free
!0x00 !0x00 !0x00 !0x00

:g_continuations
!0x00 !0x00 !0x00 !0x00

:g_symbols
!0x00 !0x00 !0x00 !0x00

:g_stack
!0x00 !0x00 !0x00 !0x00

:r0
!0x00 !0x00 !0x00 !0x00

:r1
!0x00 !0x00 !0x00 !0x00

:r2
!0x00 !0x00 !0x00 !0x00

:r3
!0x00 !0x00 !0x00 !0x00

:foobar
!0x00 !0x00 !0x00 !0x00

:g_cells
&foobar

:g_news
&foobar

:string_isxdigit_0
"()"

:scm_nil
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_0 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_1
"#f"

:scm_f
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_1 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_2
"#t"

:scm_t
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_2 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_3
"."

:scm_dot
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_3 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_4
"=>"

:scm_arrow
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_4 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_5
"*undefined*"

:scm_undefined
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_5 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_6
"*unspecified*"

:scm_unspecified
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_6 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_7
"*closure*"

:scm_closure
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_7 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_8
"*circular*"

:scm_circular
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_8 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_9
"*begin*"

:scm_begin
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_9 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_10
"*dot*"

:scm_symbol_dot
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_10 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_11
"lambda"

:scm_symbol_lambda
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_11 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_12
"begin"

:scm_symbol_begin
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_12 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_13
"if"

:scm_symbol_if
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_13 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_14
"quote"

:scm_symbol_quote
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_14 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_15
"set!"

:scm_symbol_set_x
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_15 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_16
"sc-expand"

:scm_symbol_sc_expand
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_16 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_17
"macro-expand"

:scm_symbol_macro_expand
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_17 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_18
"*sc-expander-alist*"

:scm_symbol_sc_expander_alist
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_18 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_19
"call-with-values"

:scm_symbol_call_with_values
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_19 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_20
"*call/cc*"

:scm_call_with_current_continuation
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_20 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_21
"call-with-current-continuation"

:scm_symbol_call_with_current_continuation
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_21 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_22
"current-module"

:scm_symbol_current_module
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_22 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_23
"primitive-load"

:scm_symbol_primitive_load
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_23 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_24
"read-input-file"

:scm_symbol_read_input_file
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_24 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_25
"write"

:scm_symbol_write
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_25 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_26
"display"

:scm_symbol_display
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_26 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_27
"throw"

:scm_symbol_throw
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_27 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_28
"not-a-pair"

:scm_symbol_not_a_pair
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_28 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_29
"system-error"

:scm_symbol_system_error
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_29 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_30
"wrong-number-of-args"

:scm_symbol_wrong_number_of_args
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_30 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_31
"wrong-type-arg"

:scm_symbol_wrong_type_arg
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_31 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_32
"unbound-variable"

:scm_symbol_unbound_variable
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_32 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_33
"%argv"

:scm_symbol_argv
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_33 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_34
"%prefix"

:scm_symbol_mes_prefix
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_34 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_35
"%version"

:scm_symbol_mes_version
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_35 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_36
"car"

:scm_symbol_car
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_36 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_37
"cdr"

:scm_symbol_cdr
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_37 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_38
"null?"

:scm_symbol_null_p
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_38 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_39
"eq?"

:scm_symbol_eq_p
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_39 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_40
"cons"

:scm_symbol_cons
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_40 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_41
"*vm-evlis*"

:scm_vm_evlis
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_41 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_42
"*vm-evlis2*"

:scm_vm_evlis2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_42 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_43
"*vm-evlis3*"

:scm_vm_evlis3
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_43 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_44
"core:apply"

:scm_vm_apply
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_44 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_45
"*vm-apply2*"

:scm_vm_apply2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_45 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_46
"core:eval"

:scm_vm_eval
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_46 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_47
"*vm-eval-car*"

:scm_vm_eval_car
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_47 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_48
"*vm-eval-cdr*"

:scm_vm_eval_cdr
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_48 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_49
"*vm-eval-cons*"

:scm_vm_eval_cons
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_49 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_50
"*vm-eval-null-p*"

:scm_vm_eval_null_p
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_50 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_51
"*vm-eval-set!*"

:scm_vm_eval_set_x
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_51 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_52
"*vm-eval-macro*"

:scm_vm_eval_macro
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_52 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_53
"*vm-eval-check-func*"

:scm_vm_eval_check_func
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_53 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_54
"*vm-eval2*"

:scm_vm_eval2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_54 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_55
"core:macro-expand"

:scm_vm_macro_expand
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_55 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_56
"*vm-begin*"

:scm_vm_begin
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_56 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_57
"*vm-begin-read-input-file*"

:scm_vm_begin_read_input_file
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_57 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_58
"*vm-begin2*"

:scm_vm_begin2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_58 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_59
"*vm-if*"

:scm_vm_if
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_59 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_60
"*vm-if-expr*"

:scm_vm_if_expr
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_60 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_61
"*vm-call-with-values2*"

:scm_vm_call_with_values2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_61 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_62
"*vm-call-with-current-continuation2*"

:scm_vm_call_with_current_continuation2
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_62 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_63
"*vm-return*"

:scm_vm_return
!0x09 !0x00 !0x00 !0x00 &string_isxdigit_63 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_64
"%gnuc"

:scm_symbol_gnuc
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_64 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_65
"%mesc"

:scm_symbol_mesc
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_65 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_66
"test"

:scm_test
!0x0b !0x00 !0x00 !0x00 &string_isxdigit_66 !0x00 !0x00 !0x00 !0x00

:tmp
!0x00 !0x00 !0x00 !0x00

:tmp_num
!0x00 !0x00 !0x00 !0x00

:tmp_num2
!0x00 !0x00 !0x00 !0x00

:g_functions
!0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:g_function
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_67
"gc-check"

:fun_gc_check
&gc_check !0x00 !0x00 !0x00 !0x00 &string_isxdigit_67

:scm_gc_check
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_gc_check
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_68
"gc"

:fun_gc
&gc !0x00 !0x00 !0x00 !0x00 &string_isxdigit_68

:scm_gc
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_gc
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_69
"core:display"

:fun_display_
&display_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_69

:scm_display_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_display_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_70
"core:display-error"

:fun_display_error_
&display_error_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_70

:scm_display_error_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_display_error_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_71
"exit"

:fun_exit_
&exit_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_71

:scm_exit_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_exit_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_72
"xassq"

:fun_xassq
&xassq !0x02 !0x00 !0x00 !0x00 &string_isxdigit_72

:scm_xassq
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_xassq
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_73
">"

:fun_greater_p
&greater_p !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_73

:scm_greater_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_greater_p
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_74
"<"

:fun_less_p
&less_p !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_74

:scm_less_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_less_p
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_75
"="

:fun_is_p
&is_p !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_75

:scm_is_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_is_p
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_76
"-"

:fun_minus
&minus !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_76

:scm_minus
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_minus
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_77
"+"

:fun_plus
&plus !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_77

:scm_plus
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_plus
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_78
"/"

:fun_divide
&divide !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_78

:scm_divide
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_divide
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_79
"modulo"

:fun_modulo
&modulo !0x02 !0x00 !0x00 !0x00 &string_isxdigit_79

:scm_modulo
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_modulo
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_80
"*"

:fun_multiply
&multiply !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_80

:scm_multiply
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_multiply
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_81
"logand"

:fun_logand
&logand !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_81

:scm_logand
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_logand
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_82
"logior"

:fun_logior
&logior !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_82

:scm_logior
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_logior
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_83
"lognot"

:fun_lognot
&lognot !0x01 !0x00 !0x00 !0x00 &string_isxdigit_83

:scm_lognot
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_lognot
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_84
"ash"

:fun_ash
&ash !0x02 !0x00 !0x00 !0x00 &string_isxdigit_84

:scm_ash
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_ash
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_85
"core:make-cell"

:fun_make_cell_
&make_cell_ !0x03 !0x00 !0x00 !0x00 &string_isxdigit_85

:scm_make_cell_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_make_cell_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_86
"core:lookup-symbol"

:fun_lookup_symbol_
&lookup_symbol_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_86

:scm_lookup_symbol_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_lookup_symbol_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_87
"core:type"

:fun_type_
&type_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_87

:scm_type_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_type_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_88
"core:car"

:fun_car_
&car_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_88

:scm_car_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_car_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_89
"core:cdr"

:fun_cdr_
&cdr_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_89

:scm_cdr_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_cdr_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_90
"core:arity"

:fun_arity_
&arity_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_90

:scm_arity_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_arity_
!0x00 !0x00 !0x00 !0x00

:fun_cons
&cons !0x02 !0x00 !0x00 !0x00 &string_isxdigit_40

:scm_cons
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_cons
!0x00 !0x00 !0x00 !0x00

:fun_car
&car !0x01 !0x00 !0x00 !0x00 &string_isxdigit_36

:scm_car
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_car
!0x00 !0x00 !0x00 !0x00

:fun_cdr
&cdr !0x01 !0x00 !0x00 !0x00 &string_isxdigit_37

:scm_cdr
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_cdr
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_91
"list"

:fun_list
&list !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_91

:scm_list
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_list
!0x00 !0x00 !0x00 !0x00

:fun_null_p
&null_p !0x01 !0x00 !0x00 !0x00 &string_isxdigit_38

:scm_null_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_null_p
!0x00 !0x00 !0x00 !0x00

:fun_eq_p
&eq_p !0x02 !0x00 !0x00 !0x00 &string_isxdigit_39

:scm_eq_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_eq_p
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_92
"values"

:fun_values
&values !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_92

:scm_values
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_values
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_93
"acons"

:fun_acons
&acons !0x03 !0x00 !0x00 !0x00 &string_isxdigit_93

:scm_acons
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_acons
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_94
"length"

:fun_length
&length !0x01 !0x00 !0x00 !0x00 &string_isxdigit_94

:scm_length
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_length
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_95
"error"

:fun_error
&error !0x02 !0x00 !0x00 !0x00 &string_isxdigit_95

:scm_error
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_error
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_96
"append2"

:fun_append2
&append2 !0x02 !0x00 !0x00 !0x00 &string_isxdigit_96

:scm_append2
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_append2
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_97
"pairlis"

:fun_pairlis
&pairlis !0x03 !0x00 !0x00 !0x00 &string_isxdigit_97

:scm_pairlis
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_pairlis
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_98
"call"

:fun_call
&call !0x02 !0x00 !0x00 !0x00 &string_isxdigit_98

:scm_call
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_call
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_99
"assq"

:fun_assq
&assq !0x02 !0x00 !0x00 !0x00 &string_isxdigit_99

:scm_assq
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_assq
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_100
"assq-ref-env"

:fun_assq_ref_env
&assq_ref_env !0x02 !0x00 !0x00 !0x00 &string_isxdigit_100

:scm_assq_ref_env
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_assq_ref_env
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_101
"set-car!"

:fun_set_car_x
&set_car_x !0x02 !0x00 !0x00 !0x00 &string_isxdigit_101

:scm_set_car_x
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_set_car_x
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_102
"set-cdr!"

:fun_set_cdr_x
&set_cdr_x !0x02 !0x00 !0x00 !0x00 &string_isxdigit_102

:scm_set_cdr_x
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_set_cdr_x
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_103
"set-env!"

:fun_set_env_x
&set_env_x !0x03 !0x00 !0x00 !0x00 &string_isxdigit_103

:scm_set_env_x
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_set_env_x
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_104
"eval-apply"

:fun_eval_apply
&eval_apply !0x00 !0x00 !0x00 !0x00 &string_isxdigit_104

:scm_eval_apply
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_eval_apply
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_105
"peek-byte"

:fun_peek_byte
&peek_byte !0x00 !0x00 !0x00 !0x00 &string_isxdigit_105

:scm_peek_byte
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_peek_byte
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_106
"read-byte"

:fun_read_byte
&read_byte !0x00 !0x00 !0x00 !0x00 &string_isxdigit_106

:scm_read_byte
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_read_byte
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_107
"unread-byte"

:fun_unread_byte
&unread_byte !0x01 !0x00 !0x00 !0x00 &string_isxdigit_107

:scm_unread_byte
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_unread_byte
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_108
"write-byte"

:fun_write_byte
&write_byte !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_108

:scm_write_byte
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_write_byte
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_109
"getenv"

:fun_getenv_
&getenv_ !0x01 !0x00 !0x00 !0x00 &string_isxdigit_109

:scm_getenv_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_getenv_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_110
"access?"

:fun_access_p
&access_p !0x02 !0x00 !0x00 !0x00 &string_isxdigit_110

:scm_access_p
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_access_p
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_111
"current-input-port"

:fun_current_input_port
&current_input_port !0x00 !0x00 !0x00 !0x00 &string_isxdigit_111

:scm_current_input_port
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_current_input_port
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_112
"open-input-file"

:fun_open_input_file
&open_input_file !0x01 !0x00 !0x00 !0x00 &string_isxdigit_112

:scm_open_input_file
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_open_input_file
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_113
"set-current-input-port"

:fun_set_current_input_port
&set_current_input_port !0x01 !0x00 !0x00 !0x00 &string_isxdigit_113

:scm_set_current_input_port
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_set_current_input_port
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_114
"current-output-port"

:fun_current_output_port
&current_output_port !0x00 !0x00 !0x00 !0x00 &string_isxdigit_114

:scm_current_output_port
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_current_output_port
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_115
"open-output-file"

:fun_open_output_file
&open_output_file !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_115

:scm_open_output_file
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_open_output_file
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_116
"set-current-output-port"

:fun_set_current_output_port
&set_current_output_port !0x01 !0x00 !0x00 !0x00 &string_isxdigit_116

:scm_set_current_output_port
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_set_current_output_port
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_117
"force-output"

:fun_force_output
&force_output !0x-1 !0x-1 !0x-1 !0x-1 &string_isxdigit_117

:scm_force_output
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_force_output
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_118
"core:read-input-file-env"

:fun_read_input_file_env_
&read_input_file_env_ !0x02 !0x00 !0x00 !0x00 &string_isxdigit_118

:scm_read_input_file_env_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_read_input_file_env_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_119
"read-input-file-env"

:fun_read_input_file_env
&read_input_file_env !0x01 !0x00 !0x00 !0x00 &string_isxdigit_119

:scm_read_input_file_env
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_read_input_file_env
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_120
"read-list"

:fun_read_list
&read_list !0x01 !0x00 !0x00 !0x00 &string_isxdigit_120

:scm_read_list
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_read_list
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_121
"read-env"

:fun_read_env
&read_env !0x01 !0x00 !0x00 !0x00 &string_isxdigit_121

:scm_read_env
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_read_env
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_122
"core:lookup"

:fun_lookup_
&lookup_ !0x02 !0x00 !0x00 !0x00 &string_isxdigit_122

:scm_lookup_
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_lookup_
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_123
"make-vector"

:fun_make_vector
&make_vector !0x01 !0x00 !0x00 !0x00 &string_isxdigit_123

:scm_make_vector
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_make_vector
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_124
"vector-length"

:fun_vector_length
&vector_length !0x01 !0x00 !0x00 !0x00 &string_isxdigit_124

:scm_vector_length
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_vector_length
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_125
"vector-ref"

:fun_vector_ref
&vector_ref !0x02 !0x00 !0x00 !0x00 &string_isxdigit_125

:scm_vector_ref
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_vector_ref
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_126
"vector-entry"

:fun_vector_entry
&vector_entry !0x01 !0x00 !0x00 !0x00 &string_isxdigit_126

:scm_vector_entry
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_vector_entry
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_127
"vector-set!"

:fun_vector_set_x
&vector_set_x !0x03 !0x00 !0x00 !0x00 &string_isxdigit_127

:scm_vector_set_x
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_vector_set_x
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_128
"list->vector"

:fun_list_to_vector
&list_to_vector !0x01 !0x00 !0x00 !0x00 &string_isxdigit_128

:scm_list_to_vector
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_list_to_vector
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_129
"vector->list"

:fun_vector_to_list
&vector_to_list !0x01 !0x00 !0x00 !0x00 &string_isxdigit_129

:scm_vector_to_list
!0x03 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:cell_vector_to_list
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_130
"g_free + n < ARENA_SIZE"

:string_isxdigit_131
"g_cells[type].type == TNUMBER"

:string_isxdigit_132
"g_cells[g_cells[a].car].type == TCHAR"

:string_isxdigit_133
"g_cells[g_cells[b].car].type == TCHAR"

:string_isxdigit_134
"g_cells[x].type == TFUNCTION"

:string_isxdigit_135
": "

:string_isxdigit_136
"
"

:string_isxdigit_137
"apply: wrong number of arguments; expected: "

:string_isxdigit_138
", got: "

:string_isxdigit_139
"bool"

:string_isxdigit_140
"nil"

:string_isxdigit_141
"char"

:string_isxdigit_142
"number"

:string_isxdigit_143
"string"

:string_isxdigit_144
"cannot apply: "

:string_isxdigit_145
"["

:string_isxdigit_146
"]
"

:string_isxdigit_147
"g_cells[x].type == TPAIR"

:string_isxdigit_148
"0"

:string_to_cstring_buf
!0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00 !0x00

:string_isxdigit_149
"g_cells[car (x)].type == TNUMBER"

:string_isxdigit_150
"g_cells[a].type == TNUMBER"

:string_isxdigit_151
"g_cells[b].type == TNUMBER"

:string_isxdigit_152
"g_cells[x].type == TNUMBER"

:string_isxdigit_153
"g_cells[n].type == TNUMBER"

:string_isxdigit_154
"g_cells[count].type == TNUMBER"

:g_depth
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_155
"#\"

:string_isxdigit_156
"#<procedure "

:string_isxdigit_157
"?"

:string_isxdigit_158
","

:string_isxdigit_159
"]>"

:string_isxdigit_160
"#<macro "

:string_isxdigit_161
""

:string_isxdigit_162
"("

:string_isxdigit_163
" "

:string_isxdigit_164
" . "

:string_isxdigit_165
")"

:string_isxdigit_166
":"

:g_symbol_max
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_167
"0.9"

:string_isxdigit_168
"tmp"

:string_isxdigit_169
"functions: "

:string_isxdigit_170
"]: "

:string_isxdigit_171
"module/mes/read-0.mes"

:string_isxdigit_172
"tmp/share/mes/module/mes/read-0.mes"

:string_isxdigit_173
"mes/read-0-32.mo"

:string_isxdigit_174
"module/mes/read-0-32.mo"

:string_isxdigit_175
"tmp/share/mes/module/mes/read-0-32.mo"

:string_isxdigit_176
"no such file: "

:string_isxdigit_177
!0x67 !0x65 !0x74 !0x63 !0x68 !0x61 !0x72 !0x20 !0x28 !0x29 !0x20 !0x3d !0x3d !0x20 !0x27 !0x4d !0x27 !0x00

:string_isxdigit_178
!0x67 !0x65 !0x74 !0x63 !0x68 !0x61 !0x72 !0x20 !0x28 !0x29 !0x20 !0x3d !0x3d !0x20 !0x27 !0x45 !0x27 !0x00

:string_isxdigit_179
!0x67 !0x65 !0x74 !0x63 !0x68 !0x61 !0x72 !0x20 !0x28 !0x29 !0x20 !0x3d !0x3d !0x20 !0x27 !0x53 !0x27 !0x00

:string_isxdigit_180
"*GOT MES*
"

:string_isxdigit_181
"symbols: "

:string_isxdigit_182
"g_cells[x].type == TVECTOR"

:string_isxdigit_183
"g_cells[i].cdr < g_cells[x].car"

:string_isxdigit_184
";;;   => jam["

:string_isxdigit_185
";;; gc["

:string_isxdigit_186
"]..."

:string_isxdigit_187
"new="

:g_tiny
!0x00 !0x00 !0x00 !0x00

:string_isxdigit_188
"dumping
"

:string_isxdigit_189
"program r2="

:string_isxdigit_190
"MES_DEBUG"

:string_isxdigit_191
";;; MODULEDIR="

:string_isxdigit_192
"tmp/share/mes/module/"

:string_isxdigit_193
"MES_MAX_ARENA"

:string_isxdigit_194
"MES_ARENA"

:string_isxdigit_195
"--help"

:string_isxdigit_196
"Usage: mes [--dump|--load] < FILE
"

:string_isxdigit_197
"--version"

:string_isxdigit_198
"Mes "

:string_isxdigit_199
"--load"

:string_isxdigit_200
"--tiny"

:string_isxdigit_201
"--dump"

:string_isxdigit_202
"program: "

:string_isxdigit_203
"
stats: ["
