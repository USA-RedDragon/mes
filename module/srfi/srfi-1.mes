;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; srfi-1.mes: This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; srfi-1.mes is the miminimal srfi-1 needed to run mescc.

;;; Code:

(define (find pred lst)
  (let loop ((lst lst))
    (if (null? lst) #f
        (if (pred (car lst)) (car lst)
            (loop (cdr lst))))))

(define (filter pred lst)
  (let loop ((lst lst))
    (if (null? lst) '()
        (if (pred (car lst))
            (cons (car lst) (loop (cdr lst)))
            (loop (cdr lst))))))

(define (append-map f lst)
  (apply append (map f lst)))

;;; nyacc requirements

(define (fold proc init lst1 . rest)
  (if (null? rest)
      (let loop ((lst lst1) (result init))
        (if (null? lst) result
            (loop (cdr lst) (proc (car lst) result))))
      '*FOLD-n-NOT-SUPPORTED))

(define (fold-right proc init lst1 . rest)
  (if (null? rest)
      (let loop ((lst lst1))
        (if (null? lst) init
            (proc (car lst) (loop (cdr lst)))))
      '*FOLD-RIGHT-n-NOT-SUPPORTED))

(define (remove pred lst) (filter (lambda (x) (not (pred x))) lst))

(define (append-reverse rev-head tail)
  (let loop ((rev-head rev-head) (tail tail))
    (if (null? rev-head) tail
	(loop (cdr rev-head) (cons (car rev-head) tail)))))

(define (reverse! lst)
  (let loop ((lst lst) (result '()))
    (if (null? lst) result
        (let ((tail (cdr lst)))
          (set-cdr! lst result)
          (loop tail lst)))))

(mes-use-module (srfi srfi-1.upstream))
