;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; base.mes: This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.


;;; Commentary:

;;; base.mes is being loaded after base0.mes.  It provides the minimal
;;; set of scheme primitives to run lib/test.mes.  It is safe to be
;;; run by Guile.

;;; Code:

(define-macro (mes-use-module . rest) #t)

(define (identity x) x)

(define-macro (or . x)
  (if (null? x) #f
      (if (null? (cdr x)) (car x)
          (list 'if (car x) (car x)
                (cons 'or (cdr x))))))

(define-macro (and . x)
  (if (null? x) #t
      (if (null? (cdr x)) (car x)
          (list 'if (car x) (cons 'and (cdr x))
                #f))))

(define (not x)
  (if x #f #t))

(define (equal? a b) ;; FIXME: only 2 arg
  (if (and (null? a) (null? b)) #t
      (if (and (pair? a) (pair? b))
          (and (equal? (car a) (car b))
               (equal? (cdr a) (cdr b)))
          (if (and (string? a) (string? b))
              (eq? (string->symbol a) (string->symbol b))
              (if (and (vector? a) (vector? b))
                  (equal? (vector->list a) (vector->list b))
                  (eq? a b))))))

(define (memq x lst)
  (if (null? lst) #f
      (if (eq? x (car lst)) lst
          (memq x (cdr lst)))))

(define guile? (not (pair? (current-module))))

(define (map f l . r)
  (if (null? l) '()
      (if (null? r) (cons (f (car l)) (map f (cdr l)))
          (if (null? (cdr r))
              (cons (f (car l) (caar r)) (map f (cdr l) (cdar r)))))))

(define (list? x)
  (or (null? x)
      (and (pair? x) (list? (cdr x)))))

(define (procedure? p)
  (cond ((builtin? p) #t)
        ((and (pair? p) (eq? (car p) 'lambda)))
        ((and (pair? p) (eq? (car p) '*closure*)))
        (#t #f)))
