#! /bin/sh
# -*-scheme-*-
MES=${MES-$(dirname $0)/../src/mes}
$MES -s $0
exit $?
!#

;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2018 Jan (janneke) Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.


(cond-expand
 (mes
  (mes-use-module (srfi srfi-9))
  (mes-use-module (srfi srfi-9 gnu))
  (mes-use-module (mes test)))
 (guile
  (use-modules (srfi srfi-9))
  (use-modules (srfi srfi-9 gnu))
  (use-modules (mes test))))

(pass-if "first dummy" #t)
(pass-if-not "second dummy" #f)

(define-record-type lexical-token
  (make-lexical-token category source value)
  lexical-token?
  (category lexical-token-category)
  (source   lexical-token-source)
  (value    lexical-token-value))

(pass-if "record"
  (lexical-token? (make-lexical-token 'x 'y 'z)))

(pass-if-equal "set-field" "baar"
         (let ((token (make-lexical-token 'foo "bar" 'baz)))
           (lexical-token-category (set-field token (lexical-token-category) "baar"))))

(result 'report)
