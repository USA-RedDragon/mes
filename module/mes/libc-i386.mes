;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc-i386.mes defines C library routines

;;; Code:

(define (i386:exit f g ta t d)
  `(
    #x5b                                ; pop    %ebx
    #x5b                                ; pop    %ebx
    #xb8 #x01 #x00 #x00 #x00            ; mov    $0x1,%eax
    #xcd #x80                           ; int    $0x80
    ))

(define (i386:open f g ta t d)
  `(
    #x55                                ; push   %ebp
    #x89 #xe5                           ; mov    %esp,%ebp

    #x8b #x5d #x08                      ; mov    0x8(%ebp),%ebx
    #x8b #x4d #x0c                      ; mov    0xc(%ebp),%ecx

    #xb8 #x05 #x00 #x00 #x00            ; mov    $0x5,%eax
    #xcd #x80                           ; int    $0x80

    #xc9                                ; leave
    #xc3                                ; ret
    ))

(define (i386:read f g ta t d)
  `(
    #x55                                ; push   %ebp
    #x89 #xe5                           ; mov    %esp,%ebp

    #x8b #x5d #x08                      ; mov    0x8(%ebp),%ebx
    #x8b #x4d #x0c                      ; mov    0xc(%ebp),%ecx
    #x8b #x55 #x10                      ; mov    0x10(%ebp),%edx

    #xb8 #x03 #x00 #x00 #x00            ; mov    $0x3,%eax
    #xcd #x80                           ; int    $0x80

    #xc9                                ; leave
    #xc3                                ; ret
    ))

(define (i386:write f g ta t d)
  `(
    #x55                                ; push   %ebp
    #x89 #xe5                           ; mov    %esp,%ebp

    #x8b #x5d #x08                      ; mov    0x8(%ebp),%ebx
    #x8b #x4d #x0c                      ; mov    0xc(%ebp),%ecx
    #x8b #x55 #x10                      ; mov    0x10(%ebp),%edx

    #xb8 #x04 #x00 #x00 #x00            ; mov    $0x4,%eax
    #xcd #x80                           ; int    $0x80

    #xc9                                ; leave
    #xc3                                ; ret
    ))

(define (i386:_start)
 (string-append ".byte"
                " 0x89 0xe8"      ; mov    %ebp,%eax
                " 0x83 0xc0 0x08" ; add    $0x8,%eax
                " 0x50"           ; push   %eax
                " 0x89 0xe8"      ; mov    %ebp,%eax
                " 0x83 0xc0 0x04" ; add    $0x4,%eax
                " 0x0f 0xb6 0x00" ; movzbl (%eax),%eax
                " 0x50"           ; push   %eax
                ))

(define i386:libc
  (list
   (cons "exit" (list i386:exit))
   (cons "open" (list i386:open))
   (cons "read" (list i386:read))
   (cons "write" (list i386:write))))
