;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc-i386.mes defines i386 assembly

;;; Code:

(cond-expand
 (guile-2)
 (guile)
 (mes
  (mes-use-module (mes elf))))

(define (i386:function-preamble)
  '(#x55                                ; push   %ebp
    #x89 #xe5))                         ; mov    %esp,%ebp

;; (define (i386:function-locals)
;;   '(#x83 #xec #x20))               ; sub    $0x10,%esp -- 8 local vars

(define (i386:function-locals)
  '(#x83 #xec #x40))              ; sub    $0x10,%esp -- 16 local vars

(define (i386:push-global-address o)
  (or o (error "invalid value: push-global-address: " o))
  `(#x68 ,@(int->bv32 o)))              ; push  $0x<o>

(define (i386:push-global o)
  (or o (error "invalid value: push-global: " o))
  `(#xa1 ,@(int->bv32 o)                ; mov    0x804a000,%eax
         #x50))                         ; push  %eax

(define (i386:push-local n)
  (or n (error "invalid value: push-local: " n))
  `(#xff #x75 ,(- 0 (* 4 n))))          ; pushl  0x<n>(%ebp)

(define (i386:push-local-address n)
  (or n (error "invalid value: push-local-address: " n))
  `(#x8d #x45 ,(- 0 (* 4 n))            ; lea 0x<n>(%ebp),%eax
         #x50))                         ; push %eax

(define (i386:push-local-de-ref n)
  (or n (error "invalid value: push-local-de-ref: " n))
  `(#x8b #x45 ,(- 0 (* 4 n))            ; mov    -0x<n>(%ebp),%eax
         #x0f #xb6 #x00             	; movzbl (%eax),%eax
         ;;#x0f #xbe #xc0                 ; movsbl %al,%eax ***FIXME BYTE****
         #x50))                         ; push   %eax

(define (i386:pop-accu)
  '(#x58))                              ; pop %eax

(define (i386:push-accu)
  '(#x50))                              ; push %eax

(define (i386:pop-base)
  '(#x5a))                              ; pop %edx

(define (i386:push-base)
  '(#x52))                              ; push %edx

(define (i386:ret)
  '(#xc9                                ; leave
    #xc3))                              ; ret

(define (i386:accu->base)
  '(#x89 #xc2))                         ; mov    %eax,%edx

(define (i386:accu->base-address)
  '(#x89 #x02))                         ; mov    %eax,%(edx)

(define (i386:byte-accu->base-address)
  '(#x88 #x02))                         ; mov    %al,%(edx)

(define (i386:accu->base-address+n n)
  (or n (error "invalid value: accu->base-address+n: " n))
  `(#x89 #x42 ,n))                      ; mov    %eax,$0x<n>%(edx)

(define (i386:accu->local n)
  (or n (error "invalid value: accu->local: " n))
  `(#x89 #x45 ,(- 0 (* 4 n))))          ; mov    %eax,-<0xn>(%ebp)

(define (i386:base->local n)
  (or n (error "invalid value: base->local: " n))
  `(#x89 #x55 ,(- 0 (* 4 n))))          ; mov    %edx,-<0xn>(%ebp)

(define (i386:base->global n)
  (or n (error "invalid value: base->global: " n))
  `(#x89 #x15 ,@(int->bv32 n)))         ; mov    %edx,0x0

(define (i386:accu->global n)
  (or n (error "invalid value: accu->global: " n))
  `(#xa3 ,@(int->bv32 n)))              ; mov    %eax,0x0

(define (i386:accu->global-address n)
  (or n (error "invalid value: accu->global-address: " n))
  `(#x8b #x15 ,@(int->bv32 n)           ; mov    0x<n>,%edx
         #x89 #x02 ))                   ; mov    %eax,(%edx)

(define (i386:accu-zero?)
  '(#x85 #xc0))                         ; cmpl   %eax,%eax

(define (i386:accu-non-zero?)
  (append '(#x85 #xc0)                  ; cmpl   %eax,%eax
          (i386:xor-zf)))

(define (i386:accu-shl n)
  (or n (error "invalid value: accu:shl n: " n))
  `(#xc1 #xe0 ,n))                      ; shl    $0x8,%eax

(define (i386:accu<<base)
  '(#x31 #xc9                           ; xor    %ecx,%ecx
    #x89 #xd1                           ; mov    %edx,%ecx
    #xd3 #xe0))                         ; shl    %cl,%eax

(define (i386:accu>>base)
  '(#x31 #xc9                           ; xor    %ecx,%ecx
    #x89 #xd1                           ; mov    %edx,%ecx
    #xd3 #xe8))                         ; shr    %cl,%eax

(define (i386:accu-or-base)
  '(#x09 #xd0))                         ; or    %edx,%eax

(define (i386:accu+accu)
  '(#x01 #xc0))                         ; add    %eax,%eax

(define (i386:accu+base)
  `(#x01 #xd0))                         ; add    %edx,%eax

(define (i386:accu+value v)
  (or v (error "invalid value: accu+value: " v))
  `(#x05 ,@(int->bv32 v)))              ; add    %eax,%eax

(define (i386:accu-base)
  `(#x29 #xd0))                         ; sub    %edx,%eax

(define (i386:accu*base)
  `(#xf7 #xe2))                         ; mul    %edx

(define (i386:accu/base)
  '(#x86 #xd3                           ; mov    %edx,%ebx
    #x31 #xd2                           ; xor    %edx,%edx
    #xf7 #xf3))                         ; div    %ebx

(define (i386:accu%base)
  '(#x86 #xd3                           ; mov    %edx,%ebx
    #x31 #xd2                           ; xor    %edx,%edx
    #xf7 #xf3                           ; div    %ebx
    #x89 #xd0))                         ; mov    %edx,%eax

(define (i386:base->accu)
  '(#x89 #xd0))                         ; mov    %edx,%eax

(define (i386:local->accu n)
  (or n (error "invalid value: local->accu: " n))
  `(#x8b #x45 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%eax

(define (i386:local-address->accu n)
  (or n (error "invalid value: ladd: " n))
  `(#x8d #x45 ,(- 0 (* 4 n))))          ; lea 0x<n>(%ebp),%eax

(define (i386:local-ptr->accu n)
  (or n (error "invalid value: local-ptr->accu: " n))
  `(#x89 #xe8                           ; mov    %ebp,%eax
         #x83 #xc0 ,(- 0 (* 4 n))))     ; add    $0x<n>,%eax

(define (i386:byte-local->accu n)
  (or n (error "invalid value: byte-local->accu: " n))
  `(#x0f #xb6 #x45 ,(- 0 (* 4 n))))     ; movzbl 0x<n>(%ebp),%eax

(define (i386:byte-local->base n)
  (or n (error "invalid value: byte-local->base: " n))
  `(x0f #xb6 #x95 ,(- 0 (* 4 n))))     ; movzbl 0x<n>(%ebp),%edx

(define (i386:local->base n)
  (or n (error "invalid value: local->base: " n))
  `(#x8b #x55 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%edx

(define (i386:local-address->base n) ;; DE-REF
  (or n (error "invalid value: local-address->base: " n))
  `(#x8d #x55 ,(- 0 (* 4 n))))          ; lea    0x<n>(%ebp),%edx

(define (i386:local-ptr->base n)
  (or n (error "invalid value: local-ptr->base: " n))
  `(#x89 #xea                           ; mov    %ebp,%edx
         #x83 #xc2 ,(- 0 (* 4 n))))     ; add    $0x<n>,%edx

(define (i386:global->base n)
  (or n (error "invalid value: global->base: " n))
  `(#xba ,@(int->bv32 n)))              ; mov   $<n>,%edx

(define (i386:global-address->accu n)
  (or n (error "invalid value: global-address->accu: " n))
  `(#xa1 ,@(int->bv32 n)))              ; mov    0x<n>,%eax

(define (i386:global-address->base n)
  (or n (error "invalid value: global-address->base: " n))
  `(#x8b #x15 ,@(int->bv32 n)))         ; mov    0x<n>,%edx

(define (i386:byte-base-mem->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x0f #xb6 #x00))               ; movzbl (%eax),%eax

(define (i386:byte-mem->accu)
  '(#x0f #xb6 #x00))                    ; movzbl (%eax),%eax

(define (i386:byte-mem->base)
  '(#x0f #xb6 #x10))                    ; movzbl (%eax),%edx

(define (i386:base-mem->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x8b #x00))                    ; mov    (%eax),%eax

(define (i386:mem->accu)
  '(#x8b #x00))                         ; mov    (%eax),%eax

(define (i386:mem+n->accu n)
  `(#x8b #x40 ,n))                      ; mov    0x<n>(%eax),%eax

(define (i386:base-mem+n->accu n)
  (or n (error "invalid value: base-mem+n->accu: " n))
  `(#x01 #xd0                           ; add    %edx,%eax
         #x8b #x40 ,n))                 ; mov    <n>(%eax),%eax

(define (i386:value->accu v)
  (or v (error "invalid value: i386:value->accu: " v))
  `(#xb8 ,@(int->bv32 v)))              ; mov    $<v>,%eax

(define (i386:value->accu-address v)
  `(#xc7 #x00 ,@(int->bv32 v)))         ; movl   $0x<v>,(%eax)

(define (i386:value->accu-address+n n v)
  (or v (error "invalid value: i386:value->accu-address+n: " v))
  `(#xc7 #x40 ,n ,@(int->bv32 v)))      ; movl   $<v>,0x<n>(%eax)

(define (i386:base->accu-address)
  '(#x89 #x10))                         ; mov    %edx,(%eax)

(define (i386:base-address->accu-address)
  '(#x8b #x0a                           ; mov    (%edx),%ecx
    #x89 #x08))                         ; mov    %ecx,(%eax)

(define (i386:accu+n n)
  `(#x83 #xc0 ,n))                      ; add    $0x00,%eax

(define (i386:base+n n)
  `(#x83 #xc2 ,n))                      ; add    $0x00,%edx

(define (i386:byte-base->accu-address)
  '(#x88 #x10))                         ; mov    %dl,(%eax)

(define (i386:byte-base->accu-address+n n)
  (or n (error "invalid value: byte-base->accu-address+n: " n))
  `(#x88 #x50 ,n))                      ; mov    %dl,0x<n>(%eax)

(define (i386:value->base v)
  (or v (error "invalid value: i386:value->base: " v))
  `(#xba ,@(int->bv32 v)))              ; mov    $<v>,%edx

(define (i386:local-add n v)
  (or n (error "invalid value: i386:local-add: " n))
  `(#x83 #x45 ,(- 0 (* 4 n)) ,v))       ; addl   $<v>,0x<n>(%ebp)

(define (i386:global-add n v)
  (or n (error "invalid value: i386:global-add: " n))
  `(#x83 #x05 ,@(int->bv32 n) ,v))      ; addl   $<v>,0x<n>

(define (i386:global->accu o)
  (or o (error "invalid value: i386:global->accu: " o))
  `(#xb8 ,@(int->bv32 o)))              ; mov    $<>,%eax

(define (i386:value->global n v)
  (or n (error "invalid value: value->global: " n))
  `(#xc7 #x05 ,@(int->bv32 n)           ; movl   $<v>,(<n>)
         ,@(int->bv32 v)))

(define (i386:value->local n v)
  (or n (error "invalid value: value->local: " n))
  `(#xc7 #x45 ,(- 0 (* 4 n))            ; movl   $<v>,0x<n>(%ebp)
         ,@(int->bv32 v)))

(define (i386:local-test n v)
  (or n (error "invalid value: local-test: " n))
  `(#x83 #x7d ,(- 0 (* 4 n)) ,v))       ; cmpl   $<v>,0x<n>(%ebp)

(define (i386:call f g ta t d address n)
  (or address (error "invalid value: i386:call: " address))
  `(#xe8 ,@(int->bv32 (- address 5))    ; call   relative $00
         #x83 #xc4 ,(* n 4)))           ; add    $00,%esp

(define (i386:call-accu f g ta t d n)
  `(,@(i386:push-accu)
    ,@(i386:pop-accu)
    #xff #xd0                           ; call   *%eax
    #x83 #xc4 ,(* n 4)))                ; add    $00,%esp

(define (i386:accu-not)
  `(#x0f #x94 #xc0                      ; sete %al
         #x0f #xb6 #xc0))               ; movzbl %al,%eax

(define (i386:xor-accu v)
  (or v (error "invalid value: i386:xor-accu: n: " v))
  `(#x35 ,@(int->bv32 v)))       	;xor    $0xff,%eax

(define (i386:xor-zf)
  '(#x9f                                ; lahf   
    #x80 #xf4 #x40                      ; xor    $0x40,%ah
    #x9e))                              ; sahf   

(define (i386:accu-cmp-value v)
  `(#x83 #xf8 ,v))                      ; cmp    $<v>,%eax

(define (i386:accu-test)
  '(#x85 #xc0))                         ; test   %eax,%eax

(define (i386:Xjump n)
  (or n (error "invalid value: i386:Xjump: n: " n))
  `(#xe9 ,@(int->bv32 (if (>= n 0) n (- n 5))))) ; jmp . + <n>

(define (i386:XXjump n)
  (or n (error "invalid value: i386:XXjump: n: " n))
  `(#xe9 ,@(int->bv32 n)))              ; jmp . + <n>

(define (i386:Xjump-nz n)
  (or n (error "invalid value: i386:Xjump-nz: n: " n))
  `(#x0f #x85 ,@(int->bv32 n)))         ; jnz . + <n>

(define (i386:Xjump-z n)
  (or n (error "invalid value: i386:Xjump-z: n: " n))
  `(#x0f #x84 ,@(int->bv32 n)))         ; jz . + <n>

(define (i386:jump n) ;;FIXME: NEED THIS WEIRDNESS for t.c
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP n=" n))
  `(#xeb ,(if (>= n 0) (- n 2) (- n 2)))) ; jmp <n>

(define (i386:jump-c n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP n=" n))
  `(#x72 ,(if (>= n 0) n (- n 2))))     ; jc <n>

(define (i386:jump-cz n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP n=" n))
  `(#x76 ,(if (>= n 0) n (- n 2))))     ; jbe <n>

(define (i386:jump-ncz n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-ncz n=" n))
  `(#x77 ,(if (>= n 0) n (- n 2))))     ; ja <n>

(define (i386:jump-nc n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-nc n=" n))
  `(#x73 ,(if (>= n 0) n (- n 2))))     ; jnc <n>

;; unsigned
(define (i386:Xjump-nc n)
  (or n (error "invalid value i386:Xjump-nc: " n))
  `(#x0f #x83 ,@(int->bv32 n)))         ; jnc <n>

;; unsigned
(define (i386:Xjump-ncz n)
  (or n (error "invalid value: i386:Xjump-ncz" n))
  `(#x0f #x87 ,@(int->bv32 n)))         ; ja <n>

;; unsigned
;; (define (i386:Xjump-c n)
;;   (or n urg:Xjump-c)
;;   `(#x0f #x82 ,@(int->bv32 n)))     ; jc <n>

;; unsigned
;; (define (i386:Xjump-cz n)
;;   (or n urg:Xjump-cz)
;;   `(#x0f #x86 ,@(int->bv32 n)))         ; jbe <n>

;; signed
(define (i386:Xjump-g n)
  (or n (error "invalid value: i386:Xjump-g: " n))
  `(#x0f #x8f ,@(int->bv32 n)))         ; jg/jnle <n>

;; signed
(define (i386:Xjump-ge n)
  (or n (error "invalid value: Xjump-ge: " n))
  `(#x0f #x8d ,@(int->bv32 n)))         ; jge/jnl <n>

;; ;; signed
;; (define (i386:Xjump-l n)
;;   (or n urg:Xjump-l)
;;   `(#x0f #x8c ,@(int->bv32 n)))         ; jl/jnge <n>

;; ;; signed
;; (define (i386:Xjump-le n)
;;   (or n urg:Xjump-le)
;;   `(#x0f #x8e ,@(int->bv32 n)))         ; jle/jgn <n>

(define (i386:jump-z n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-z n=" n))
  `(#x74 ,(if (>= n 0) n (- n 2))))     ; jz <n>

(define (i386:jump-nz n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-nz n=" n))
  `(#x75 ,(if (>= n 0) n (- n 2))))     ; jnz <n>

(define (i386:test-jump-z n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-z n=" n))
  `(#x85 #xc0                           ; test   %eax,%eax
    #x74 ,(if (>= n 0) n (- n 4))))     ; jz <n>

(define (i386:jump-byte-nz n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-byte-nz n=" n))
  `(#x84 #xc0                           ; test   %al,%al
    #x75 ,(if (>= n 0) n (- n 4))))     ; jne <n>

(define (i386:jump-byte-z n)
  (when (or (> n #x80) (< n #x-80))
    (error "JUMP-byte-z n=" n))
  `(#x84 #xc0                           ; test   %al,%al
    #x74 ,(if (>= n 0) n (- n 4))))     ; jne <n>

(define (i386:byte-test-base)
  `(#x38 #xc2))                         ; cmp    %al,%dl

(define (i386:test-base)
  `(#x39 #xd0))                         ; cmp    %edx,%eax

(define (i386:byte-sub-base)
  `(#x28 #xd0))                         ; sub    %dl,%al

(define (i386:byte-base-sub)
  `(#x28 #xd0))                         ; sub    %al,%dl

(define (i386:sub-base)
  `(#x29 #xd0))                         ; sub    %edx,%eax

(define (i386:base-sub)
  `(#x29 #xc2))                         ; sub    %eax,%edx

