#! /bin/sh
# -*-scheme-*-
MES_ARENA=${MES_ARENA-10000000}
export MES_ARENA
MES=${MES-$(dirname $0)/../scripts/mes}
echo ' ()' | cat $(dirname $0)/../module/mes/base-0.mes $0 /dev/stdin | $MES $MES_FLAGS $MES_FLAGS"$@"
#paredit:||
exit $?
!#

;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.


(cond-expand
 (guile-2.2
  (use-modules (ice-9 peg)))
 (guile
  (use-modules (ice-9 syncase))
  (display "guile 2.0: no PEG\n" (current-error-port))
  (exit 0))
 (mes
  (mes-use-module (mes peg))
  (mes-use-module (mes test))))

(pass-if "first dummy" #t)
(pass-if-not "second dummy" #f)

(define *etc-passwd*
  "root:x:0:0:root:/root:/bin/bash
daemon:x:1:1:daemon:/usr/sbin:/bin/sh
bin:x:2:2:bin:/bin:/bin/sh
sys:x:3:3:sys:/dev:/bin/sh
nobody:x:65534:65534:nobody:/nonexistent:/bin/sh
messagebus:x:103:107::/var/run/dbus:/bin/false")

(define-peg-string-patterns
  "string-passwd <- entry* !.
entry <-- (! NL .)* NL*
NL < '\n'")

(pass-if-equal "peg-tree"
    (map (lambda (x) (list 'entry x)) (string-split *etc-passwd* #\newline))
  (peg:tree (match-pattern string-passwd *etc-passwd*)))
            
(define-peg-pattern passwd body (and (* entry) (not-followed-by peg-any)))
(define-peg-pattern entry all (and (* (and (not-followed-by NL) peg-any))
                                   (* NL)))
(define-peg-pattern NL none "\n")
(define-peg-pattern passwd body (peg "entry* !."))

(pass-if-equal "peg-tree"
    (map (lambda (x) (list 'entry x)) (string-split *etc-passwd* #\newline))
  (peg:tree (match-pattern passwd *etc-passwd*)))

(result 'report)
