;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; Code:

(define <cell:char> 0)
(define <cell:closure> 1)
(define <cell:function> 2)
(define <cell:keyword> 3)
(define <cell:macro> 4)
(define <cell:number> 5)
(define <cell:pair> 6)
(define <cell:ref> 7)
(define <cell:special> 8)
(define <cell:string> 9)
(define <cell:symbol> 10)
(define <cell:values> 11)
(define <cell:vector> 12)
(define <cell:broken-heart> 13)

(define cell:type-alist
  (list (cons <cell:char> (quote <cell:char>))
        (cons <cell:closure> (quote <cell:closure>))
        (cons <cell:function> (quote <cell:function>))
        (cons <cell:keyword> (quote <cell:keyword>))
        (cons <cell:macro> (quote <cell:macro>))
        (cons <cell:number> (quote <cell:number>))
        (cons <cell:pair> (quote <cell:pair>))
        (cons <cell:ref> (quote <cell:ref>))
        (cons <cell:special> (quote <cell:special>))
        (cons <cell:string> (quote <cell:string>))
        (cons <cell:symbol> (quote <cell:symbol>))
        (cons <cell:values> (quote <cell:values>))
        (cons <cell:vector> (quote <cell:vector>))
        (cons <cell:broken-heart> (quote <cell:broken-heart>))))

(define (cell:type-name x)
  (cond ((assq (core:type x) cell:type-alist) => cdr)))

(define (char? x)
  (eq? (core:type x) <cell:char>))

(define (closure? x)
  (eq? (core:type x) <cell:closure>))

(define (function? x)
  (eq? (core:type x) <cell:function>))

(define builtin? function?)

(define (keyword? x)
  (eq? (core:type x) <cell:keyword>))

(define (macro? x)
  (eq? (core:type x) <cell:macro>))

(define (number? x)
  (eq? (core:type x) <cell:number>))

(define (pair? x)
  (eq? (core:type x) <cell:pair>))

(define (pair? x)
  (eq? (core:type x) <cell:pair>))

(define (special? x)
  (eq? (core:type x) <cell:special>))

(define (string? x)
  (eq? (core:type x) <cell:string>))

(define (symbol? x)
  (eq? (core:type x) <cell:symbol>))

;; Hmm?
(define (values? x)
  (eq? (core:type x) <cell:values>))

(define (vector? x)
  (eq? (core:type x) <cell:vector>))

;; Non-types
;; In core
;; (define (null? x)
;;   (eq? x '()))

(define (atom? x)
  (not (pair? x)))

(define (boolean? x)
  (or (eq? x #f) (eq? x #t)))
