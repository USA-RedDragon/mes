;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc-i386.mes defines C library routines

;;; Code:

(define (i386:function-preamble)
  '(#x55                                ; push   %ebp
    #x89 #xe5))                         ; mov    %esp,%ebp

(define (i386:function-locals)
  '(#x83 #xec #x10))               ; sub    $0x10,%esp -- 4 local vars

(define (i386:ref-global o)
  `(#x68 ,@(int->bv32 o)))               ; push  $0x<o>

(define (i386:ref-local n)
  (or n rl)
  `(#xff #x75 ,(- 0 (* 4 n))))          ; pushl  0x<n>(%ebp)

(define (i386:push-accu)
  `(#x50))                              ; push %eax

(define (i386:push-arg f g t d)
  (lambda (o)
    (cond ((number? o)
           `(#x68 ,@(int->bv32 o)))     ; push $<o>
          ((pair? o) o)
          ((procedure? o) (o f g t d))
          (_ barf))))

(define (i386:ret . rest)
  (lambda (f g t d)
    `(
      ,@(cond ((null? rest) '())
              ((number? (car rest))
               `(#xb8                     ; mov    $<>,%eax
                 ,@(int->bv32 (car rest))))
              ((pair? (car rest)) (car rest))
              ((procedure? (car rest))
               ((car rest) f g t d)))
    #xc9                                ; leave
    #xc3                                ; ret
    )))

(define (i386:accu->local n)
  (or n al)
  `(#x89 #x45 ,(- 0 (* 4 n))))          ; mov    ,%eax,-<0xn>(%ebp)

(define (i386:accu-zero?)
  `(#x85 #xc0))                         ; cmpl   %eax,%eax

(define (i386:accu-non-zero?)
  (append '(#x85 #xc0)                  ; cmpl   %eax,%eax
          (i386:xor-zf)))

(define (i386:local->accu n)
  (or n la)
  `(#x8b #x45 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%eax

(define (i386:local->base n)
  (or n lb)
  `(#x8b #x55 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%edx

(define (i386:byte-mem->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x0f #xb6 #x00))               ; movzbl (%eax),%eax

(define (i386:byte-mem->base)
  '(#x0f #xb6 #x10))                    ; movzbl (%eax),%edx

(define (i386:mem->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x8b #x00))                    ; mov    (%eax),%eax

(define (i386:value->accu v)
  `(#xb8 ,@(int->bv32 v)))              ; mov    $<v>,%eax

(define (i386:value->base v)
  `(#xba ,@(int->bv32 v)))              ; mov    $<v>,%edx

(define (i386:local-add n v)
  (or n ladd)
  `(#x83 #x45 ,(- 0 (* 4 n)) ,v))       ; addl   $<v>,0x<n>(%ebp)
    
(define (i386:local-assign n v)
  (or n lassign)
  `(#xc7 #x45 ,(- 0 (* 4 n))            ; movl   $<v>,0x<n>(%ebp)
         ,@(int->bv32 v)))

(define (i386:local-test n v)
  (or n lt)
  `(#x83 #x7d ,(- 0 (* 4 n)) ,v))       ; cmpl   $<v>,0x<n>(%ebp)

(define (i386:ret-local n)
  (or n rl)
  `(
    #x89 #x45 ,(- 0 (* 4 n))            ; mov    %eax,-0x<n>(%ebp)
    ))

(define (i386:call f g t d address . arguments)
  (let* ((pushes (append-map (i386:push-arg f g t d) (reverse arguments)))
         (s (length pushes))
         (n (length arguments)))
   `(
     ,@pushes                           ; push args
     #xe8 ,@(int->bv32 (- address 5 s)) ; call relative
     #x83 #xc4 ,(* n 4)                 ; add    $00,%esp
     )))
  
(define (i386:xor-zf)
  '(#x9f                                ; lahf   
    #x80 #xf4 #x40                      ; xor    $0x40,%ah
    #x9e))                              ; sahf   

(define (i386:test-accu)
  '(#x85 #xc0))                         ; test   %eax,%eax

(define (i386:jump n)
  `(#xeb ,(if (>= n 0) (- n 2) (- n 2))))   ; jmp <n>

(define (i386:jump-c n)
  `(#x72 ,(if (>= n 0) n (- n 2))))     ; jc <n>

(define (i386:jump-cz n)
  `(#x76 ,(if (>= n 0) n (- n 2))))     ; jna <n>

(define (i386:jump-ncz n)
  `(#x77 ,(if (>= n 0) n (- n 2))))     ; ja <n>

(define (i386:jump-nc n)
  `(#x73 ,(if (>= n 0) n (- n 2))))     ; jnc <n>

(define (i386:jump-z n)
  `(#x74 ,(if (>= n 0) n (- n 2)))) ; jz <n>

(define (i386:jump-nz n)
  `(#x75 ,(if (>= n 0) n (- n 2)))) ; jnz <n>

(define (i386:test-jump-z n)
  `(#x85 #xc0                           ; test   %eax,%eax
    #x74 ,(if (>= n 0) n (- n 4))))     ; jz <n>

(define (i386:jump-byte-nz n)
  `(#x84 #xc0                           ; test   %al,%al
    #x75 ,(if (>= n 0) n (- n 4))))     ; jne <n>

(define (i386:jump-byte-z n)
  `(#x84 #xc0                           ; test   %al,%al
    #x74 ,(if (>= n 0) n (- n 4))))     ; jne <n>

(define (i386:byte-test-base)
  `(#x38 #xc2))                         ; cmp    %al,%dl

(define (i386:test-base)
  `(#x39 #xd0))                         ; cmp    %edx,%eax

(define (i386:byte-sub-base)
  `(#x28 #xd0))                         ; sub    %dl,%al

(define (i386:byte-base-sub)
  `(#x28 #xd0))                         ; sub    %al,%dl

(define (i386:sub-base)
  `(#x29 #xd0))                         ; sub    %edx,%eax

(define (i386:base-sub)
  `(#x29 #xc2))                         ; sub    %eax,%edx

;;; libc bits
(define (i386:exit f g t d)
  `(
    #x5b                                ; pop    %ebx
    #x5b                                ; pop    %ebx
    #xb8 #x01 #x00 #x00 #x00            ; mov    $0x1,%eax
    #xcd #x80                           ; int    $0x80
    ))

(define (i386:write f g t d)
  `(
    #x55                                ; push   %ebp
    #x89 #xe5                           ; mov    %esp,%ebp

    #x8b #x5d #x08                      ; mov    $0x8(%ebp),%ebx
    #x8b #x4d #x0c                      ; mov    $0xc(%ebp),%ecx
    #x8b #x55 #x10                      ; mov    $0x4(%ebp),%edx

    #xb8 #x04 #x00 #x00 #x00            ; mov    $0x4,%eax
    #xcd #x80                           ; int    $0x80

    #xc9                                ; leave
    #xc3                                ; ret
    ))
