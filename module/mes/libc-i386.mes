;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016,2017 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;;; Commentary:

;;; libc-i386.mes defines C library routines

;;; Code:

(define (i386:function-preamble)
  '(#x55                                ; push   %ebp
    #x89 #xe5))                         ; mov    %esp,%ebp

(define (i386:function-locals)
  '(#x83 #xec #x10))               ; sub    $0x10,%esp -- 4 local vars

;; (define (i386:formal i n)
;;   (case i
;;     ((0) (list #x8b #x5d (* (- n 2) 4)))       ; mov    $00(%ebp),%ebx
;;     ((1) (list #x8b #x4d (* (- n 3) 4)))    ; mov    $00(%ebp),%ecx
;;     ((2) (list #x8b #x55 (* (- n 4) 4)))    ; mov    $00(%ebp),%edx
;;     ((3) (list #x8b #x45 (* (- n 5) 4)))))  ; mov    $00(%ebp),%eax FIXME

(define (i386:ref-global o)
  `(#x68 ,@(int->bv32 o)))               ; push  $0x<o>

(define (i386:ref-local n)
  `(#xff #x75 ,(- 0 (* 4 n))))          ; pushl  0x<n>(%ebp)

(define (i386:push-accu)
  `(#x50))                              ; push %eax

(define (i386:push-arg s t d)
  (lambda (o)
    (cond ((number? o)
           `(#x68 ,@(int->bv32 o)))       ; push $<o>
          ((pair? o) o)
          ((procedure? o) (o s t d)))))

(define (i386:ret . rest)
  (lambda (s t d)
    `(
      ,@(cond ((null? rest) '())
              ((number? (car rest))
               `(#xb8                     ; mov    $<>,%eax
                 ,@(int->bv32 (car rest))))
              ((pair? (car rest)) (car rest))
              ((procedure? (car rest))
               ((car rest) s t d)))
    #xc9                                ; leave
    #xc3                                ; ret
    )))

(define (i386:accu->local n)
  `(#x89 #x45 ,(- 0 (* 4 n))))          ; mov    ,%eax,-<0xn>(%ebp)

(define (i386:local->accu n)
  `(#x8b #x45 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%eax

(define (i386:local->base n)
  `(#x8b #x55 ,(- 0 (* 4 n))))          ; mov    -<0xn>(%ebp),%edx

(define (i386:mem-byte->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x0f #xb6 #x00))               ; movzbl (%eax),%eax

(define (i386:mem->accu)
  '(#x01 #xd0                           ; add    %edx,%eax
         #x8b #x00))                    ; mov    (%eax),%eax

(define (i386:value->accu v)
  `(#xb8 ,@(int->bv32 v)))              ; mov    $<v>,%eax

(define (i386:local-add n v)
  `(#x83 #x45 ,(- 0 (* 4 n)) ,v))       ; addl   $<v>,0x<n>(%ebp)
    
(define (i386:local-assign n v)
  `(#xc7 #x45 ,(- 0 (* 4 n))            ; movl   $<v>,0x<n>(%ebp)
         ,@(int->bv32 v)))

(define (i386:local-test n v)
  `(#x83 #x7d ,(- 0 (* 4 n)) ,v))       ; cmpl   $<v>,0x<n>(%ebp)

(define (i386:ret-local n)
  `(
    #x89 #x45 ,(- 0 (* 4 n))            ; mov    %eax,-0x<n>(%ebp)
    ))

(define (i386:call s t d address . arguments)
  (let* ((pushes (append-map (i386:push-arg s t d) (reverse arguments)))
         (s (length pushes))
         (n (length arguments)))
   `(
     ,@pushes                           ; push args
     #xe8 ,@(int->bv32 (- address 5 s)) ; call relative
     #x83 #xc4 ,(* n 4)                 ; add    $00,%esp
     )))
  
(define (i386:exit s t d)
  `(
    #x5b                                ; pop    %ebx
    #x5b                                ; pop    %ebx
    #xb8 #x01 #x00 #x00 #x00            ; mov    $0x1,%eax
    #xcd #x80                           ; int    $0x80
    ))

;; (define (i386:_start s t d)
;;   (let* ((prefix
;;           `(
;;             #x55                         ; push   %ebp
;;             #x89 #xe5                    ; mov    %esp,%ebp
      
;;             ;;#x83 #xec #x10                 ; sub    $0x10,%esp -- 4 local vars
            
;;             #xe8 ,@(int->bv32 (- address 5 s)) ; call relative

;;             #xb8 #x04 #x00 #x00 #x00     ; mov    $0x4,%eax
;;             #xcd #x80                    ; int    $0x80
      
;;             #xc9                         ; leave
;;             #xc3                         ; ret
;;             ))
;;          (text-list (text->list t))
;;          (statement-offset (- (+ (length prefix) (length text-list))))
;;          (address (+ t (function-offset "main" s))))))

(define (i386:write s t d)
  `(
    #x55                                ; push   %ebp
    #x89 #xe5                           ; mov    %esp,%ebp

    #x8b #x5d #x08                      ; mov    $0x8(%ebp),%ebx
    #x8b #x4d #x0c                      ; mov    $0xc(%ebp),%ecx
    #x8b #x55 #x10                      ; mov    $0x4(%ebp),%edx

    #xb8 #x04 #x00 #x00 #x00            ; mov    $0x4,%eax
    #xcd #x80                           ; int    $0x80

    #xc9                                ; leave
    #xc3                                ; ret
    ))

(define (i386:jump n)
  `(#xeb ,(if (>= n 0) n (- n 2))))     ; jmp <n>

(define (i386:jump-le n)
  `(#x7e ,(if (>= n 0) n (- n 4))))     ; jle <n>

(define (i386:jump-nz n)
  `(#x84 #xc0                           ; test   %al,%al
    #x75 ,(if (>= n 0) n (- n 4))))     ; jne <n>

#!
int
strcmp (char const* a, char const* b)
{
 while (*a && *b && *a == *b) {*a++;b++;
                               }
  return *a == *b;
}
08048150 <strcmp>:
 8048150:	55                   	push   %ebp
 8048151:	89 e5                	mov    %esp,%ebp
 8048153:	eb 0d                	jmp    8048162 <strcmp+0x12>

<body>
 8048155:	8b 45 08             	mov    0x8(%ebp),%eax
 8048158:	83 c0 01             	add    $0x1,%eax
 804815b:	89 45 08             	mov    %eax,0x8(%ebp)
 804815e:	83 45 0c 01          	addl   $0x1,0xc(%ebp)

<test>
 8048162:	8b 45 08             	mov    0x8(%ebp),%eax
 8048165:	0f b6 00             	movzbl (%eax),%eax
 8048168:	84 c0                	test   %al,%al
 804816a:	74 1a                	je     8048186 <strcmp+0x36>

 804816c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804816f:	0f b6 00             	movzbl (%eax),%eax
 8048172:	84 c0                	test   %al,%al
 8048174:	74 10                	je     8048186 <strcmp+0x36>

 8048176:	8b 45 08             	mov    0x8(%ebp),%eax
 8048179:	0f b6 10             	movzbl (%eax),%edx
 804817c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804817f:	0f b6 00             	movzbl (%eax),%eax
 8048182:	38 c2                	cmp    %al,%dl
 8048184:	74 cf                	je     8048155 <strcmp+0x5>

<done>
 8048186:	8b 45 08             	mov    0x8(%ebp),%eax
 8048189:	0f b6 10             	movzbl (%eax),%edx
 804818c:	8b 45 0c             	mov    0xc(%ebp),%eax
 804818f:	0f b6 00             	movzbl (%eax),%eax
 8048192:	38 c2                	cmp    %al,%dl
 8048194:	0f 94 c0             	sete   %al
 8048197:	0f b6 c0             	movzbl %al,%eax
 804819a:	5d                   	pop    %ebp
 804819b:	c3                   	ret    
!#
