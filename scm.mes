;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; scm.mes: This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

;; The Maxwell Equations of Software -- John McCarthy page 13
;; http://www.softwarepreservation.org/projects/LISP/book/LISP%201.5%20Programmers%20Manual.pdf

(define (list . rest) rest)

(define (scm-define x a)
  (cond ((atom? (cadr x)) (cons (cadr x) (eval (caddr x) a)))
        (#t (cons (caadr x) (cons 'lambda (cons (cdadr x) (cddr x)))))))

(define (scm-define-macro x a)
  (cons '*macro*
        (cons (cons (caadr e) (cons 'lambda (cons (cdadr e) (cddr e))))
              (cdr (assoc '*macro* a)))))

(define (loop2 r e a)
  ;; (display '____loop2)
  ;; (newline)
  ;; (display 'e:)
  ;; (display e)  
  ;; (newline)
  (cond ((null? e) r)
        ((eq? e 'EOF2)
         (display 'loop2-exiting...)
         (newline))
        ((atom? e)
         (loop2 (eval e a) (readenv a) a))
        ((eq? (car e) 'define)
         (loop2 *unspecified* (readenv a) (cons (scm-define e a) a)))
        ((eq? (car e) 'define-macro)
         (loop2 *unspecified* (readenv a) (cons (scm-define-macro e a) a)))

        (#t (loop2 (eval e a) (readenv a) a))
        ;;(#t (loop2 ((cdr (assoc 'eval a)) e a) (readenv a) a))
        ))

;;(display 'loop:read-loop2-exiting...)
;;(newline)
EOF

(define (+ x y) (- x (- 0 y)))

(define-macro (and x y)
  (cond (x y)
        (#t #f)))

(define-macro (or x y)
  (cond (x x)
        (#t y)))

(define (split-params bindings params)
  (cond ((null? bindings) params)
        (#t (split-params (cdr bindings)
                          (append params (cons (caar bindings) '()))))))

(define (split-values bindings values)
  (cond ((null? bindings) values)
        (#t (split-values (cdr bindings)
                          (append values (cdar bindings) '())))))

(define-macro (let bindings . body)
  (cons (cons 'lambda (cons (split-params bindings '()) body))
        (split-values bindings '())))

(define (expand-let* bindings body)
  (cond ((null? bindings)
         (cons (cons 'lambda (cons '() body)) '()))
        (#t
         (cons
          (cons 'lambda (cons (cons (caar bindings) '())
                              (cons (expand-let* (cdr bindings) body) '())))
          (cdar bindings)))))

(define-macro (let* bindings . body)
  (expand-let* bindings body))

(define (map f l . r)
  (cond ((null? l) '())
        ((null? r) (cons (f (car l)) (map f (cdr l))))
        ((null? (cdr r))
         (cons (f (car l) (caar r)) (map f (cdr l) (cdar r))))))
