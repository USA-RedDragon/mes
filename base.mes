;;; -*-scheme-*-

;;; Mes --- Maxwell Equations of Software
;;; Copyright Â© 2016 Jan Nieuwenhuizen <janneke@gnu.org>
;;;
;;; base.mes: This file is part of Mes.
;;;
;;; Mes is free software; you can redistribute it and/or modify it
;;; under the terms of the GNU General Public License as published by
;;; the Free Software Foundation; either version 3 of the License, or (at
;;; your option) any later version.
;;;
;;; Mes is distributed in the hope that it will be useful, but
;;; WITHOUT ANY WARRANTY; without even the implied warranty of
;;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;;; GNU General Public License for more details.
;;;
;;; You should have received a copy of the GNU General Public License
;;; along with Mes.  If not, see <http://www.gnu.org/licenses/>.

(define (not x)
  (cond (x #f)
        (#t #t)))

(define guile? (not (pair? (current-module))))

(define-macro (or2 x y)
  `(cond (,x ,x) (#t ,y)))

(define-macro (and2 x y)
  `(cond (,x ,y) (#t #f)))

(define-macro (and . x)
  (cond ((null? x) #t)
        ((null? (cdr x)) (car x))
        (#t (list 'cond (list (car x) (cons 'and (cdr x)))
                  '(#t #f)))))

(define-macro (or . x)
  (cond
   ((null? x) #f)
   ((null? (cdr x)) (car x))
   (#t (list 'cond (list (car x))
             (list #t (cons 'or (cdr x)))))))

(define (cons* x . rest)
  (define (loop rest)
    (cond ((null? (cdr rest)) (car rest))
          (#t (cons (car rest) (loop (cdr rest))))))
  (loop (cons x rest)))

(define (equal? a b) ;; FIXME: only 2 arg
  (cond ((and (null? a) (null? b)) #t)
        ((and (pair? a) (pair? b))
         (and (equal? (car a) (car b))
              (equal? (cdr a) (cdr b))))
        ((and (string? a) (string? b))
         (eq? (string->symbol a) (string->symbol b)))
        ((and (vector? a) (vector? b))
         (equal? (vector->list a) (vector->list b)))
        (#t (eq? a b))))

(define (memq x lst)
  (cond ((null? lst) #f)
        ((eq? x (car lst)) lst)
        (#t (memq x (cdr lst)))))

(define (map f l . r)
  (cond ((null? l) '())
        ((null? r) (cons (f (car l)) (map f (cdr l))))
        ((null? (cdr r))
         (cons (f (car l) (caar r)) (map f (cdr l) (cdar r))))))

(define-macro (simple-let bindings . rest)
  (cons (cons 'lambda (cons (map car bindings) rest))
        (map cadr bindings)))

(define-macro (let bindings . rest)
  (cons* 'simple-let bindings rest))
